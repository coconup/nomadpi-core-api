[
    {
        "id": "181d977a8b81274c",
        "type": "tab",
        "label": "HTTP API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2ec629db0b2d93d1",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "412a66feda2814e4",
        "type": "tab",
        "label": "MQTT Hub",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e394437c1a103158",
        "type": "tab",
        "label": "Init",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2f6480327ea906c3",
        "type": "tab",
        "label": "[Test] Relays",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "43f1ddd45d338663",
        "type": "tab",
        "label": "[Test] JBD BMS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d06ae3eee692de3d",
        "type": "tab",
        "label": "[Test] USB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "254fbe7becd93c6d",
        "type": "tab",
        "label": "[Test] GPS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0176619f63694862",
        "type": "tab",
        "label": "[Test] Temperature sensor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d1fe66a0a15b470a",
        "type": "tab",
        "label": "[Test] Tasmota",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e7a6fe05a4d2b37c",
        "type": "tab",
        "label": "[Test] Water tanks",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b78d606a12ae9c11",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ee3b10c02a9dae4",
        "type": "subflow",
        "name": "[Relays] dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 480,
                "wires": [
                    {
                        "id": "827e13d335fd312c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 520,
                "wires": [
                    {
                        "id": "827e13d335fd312c",
                        "port": 0
                    },
                    {
                        "id": "d604f0318f30da1e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4e1f9183000d244e",
        "type": "subflow",
        "name": "[Relays] set items state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "8a0ad5065fdbb073"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 80,
                "wires": [
                    {
                        "id": "63d13c5a16c612f0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d2eb75050cc2ea33",
        "type": "subflow",
        "name": "[Relays] Get item state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "ad6e53e4c4004a25"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 80,
                "wires": [
                    {
                        "id": "ad6e53e4c4004a25",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "44f3ed9f999bd3a8",
        "type": "subflow",
        "name": "[JBD BMS] Get battery stats",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "e9419abf35522968"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 660,
                "y": 80,
                "wires": [
                    {
                        "id": "b034b52cd70cb3d7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "924d506d524e2f1f",
        "type": "subflow",
        "name": "[GPS] Set state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "49ee4acd56fb9817"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "49ee4acd56fb9817",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "cd03e8b953118d1f",
        "type": "subflow",
        "name": "[GPS] Get state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "85c5be514632f153"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "85c5be514632f153",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "48376301d7cf8ab5",
        "type": "subflow",
        "name": "[Relays] Get items state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "b305862eb524c8b9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "b305862eb524c8b9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c30c47ad0a20b80b",
        "type": "subflow",
        "name": "[Temp Sensor] Get 1-Wire values",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c2d74b2b38c9e67b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 80,
                "wires": [
                    {
                        "id": "215a88fad5308406",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b3276c87a286f102",
        "type": "subflow",
        "name": "[USB] Scan devices",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "203b04a219021af7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 80,
                "wires": [
                    {
                        "id": "d7a0ab15f94c0aa3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2f860c0929d372d8",
        "type": "subflow",
        "name": "[DB] Run query",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "d3fb6d1d0e15f941"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 80,
                "wires": [
                    {
                        "id": "1c4a76541ff62d0d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "28a3f62edac8391d",
        "type": "subflow",
        "name": "[Relays] GPIO dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 460,
                "wires": [
                    {
                        "id": "97059ba81f6ce727"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d843692079f79c4f",
        "type": "subflow",
        "name": "[Relays] MQTT dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "3ffcd74351762851"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e0baa17c5072b7d3",
        "type": "subflow",
        "name": "[USB] Rewrite `udev` rules",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "82aef1b2f5d6d0c5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1400,
                "y": 60,
                "wires": [
                    {
                        "id": "3483775fb8fe0b42",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d1e3712ec6c2128d",
        "type": "subflow",
        "name": "[Batteries] Dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 160,
                "wires": [
                    {
                        "id": "8276b42967ce2963"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 140,
                "wires": [
                    {
                        "id": "a85ad1d6b4e922a4",
                        "port": 0
                    },
                    {
                        "id": "cff0d2d68e414164",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1fcb65ecb479780e",
        "type": "subflow",
        "name": "[Temp Sensor] Get temperature values",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "560065fbfef44112"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "560065fbfef44112",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2af61905d791930b",
        "type": "subflow",
        "name": "[Water tanks] Set water tanks state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "b27fc867cae90a0f"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d522f6d2f07435cd",
        "type": "subflow",
        "name": "[Docker] Get container",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "0d5b2114da75e3d1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1100,
                "y": 80,
                "wires": [
                    {
                        "id": "4a6ce239161630fd",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7b9d1f6f5864ccce",
        "type": "subflow",
        "name": "[Docker] Restart container",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "932fb4a01c4811ce"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1000,
                "y": 80,
                "wires": [
                    {
                        "id": "689e133112ae6ce2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "931b8d41fb4d3124",
        "type": "subflow",
        "name": "[Batteries] Get all batteries",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "873222205cecdc2f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 80,
                "wires": [
                    {
                        "id": "7a8739f934e85410",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "fbcbc95f786b1f72",
        "type": "subflow",
        "name": "[Batteries] Update global state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "efa5074daeceaa81"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5dcda338317c7a86",
        "type": "subflow",
        "name": "[Batteries] Get batteries state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "b43d1c3dfac9b4c3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "b43d1c3dfac9b4c3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d6bd8ca48ade8d7d",
        "type": "subflow",
        "name": "[Water tanks] Get water tanks state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "8766551fd4e3b522"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 80,
                "wires": [
                    {
                        "id": "8766551fd4e3b522",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5c6f48f8e87bdeba",
        "type": "subflow",
        "name": "[Temp sensors] Get all temperature sensors",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "9d8eb984951b703c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 80,
                "wires": [
                    {
                        "id": "f756c710b3494575",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d8264d18d8e4b566",
        "type": "subflow",
        "name": "[Temp sensors] Update one-wire state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "5f5fee335ab24a85"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7f8f32220da2dd83",
        "type": "subflow",
        "name": "[Solar charge controllers] Get all solar charge controllers",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "3fa0405a6381d1f4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 80,
                "wires": [
                    {
                        "id": "c9481a4af4b14335",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f7bd6ee532013f76",
        "type": "subflow",
        "name": "[Solar charge controllers] Request Renogy BT info",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "ac4d3050957b2ebb"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5b7abfd84ae7c0fb",
        "type": "subflow",
        "name": "[Solar charge controllers] Dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "c911c8cc206cae5b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 140,
                "wires": [
                    {
                        "id": "425588dd818d368c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d0749495e355f931",
        "type": "subflow",
        "name": "[Solar charge controllers] Request state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "52cdd9e09fb00541"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8b0e71f3c152c02a",
        "type": "subflow",
        "name": "[Solar charge controllers] Get solar charge controllers state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c84b63091dd548fa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 80,
                "wires": [
                    {
                        "id": "c84b63091dd548fa",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4ca15bb77bd03cce",
        "type": "subflow",
        "name": "[Solar charge controllers] Update global state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "20df51fe25c79723"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "933ed9d2e03018bd",
        "type": "subflow",
        "name": "[Alarm] Get alarm state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c3f1e910b77c57b6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "c3f1e910b77c57b6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d02cbdb9b9ab0598",
        "type": "subflow",
        "name": "[Alarm] Arm alarm",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "9b1565da34c03305"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 80,
                "wires": [
                    {
                        "id": "6042330ec132ec15",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6abeab3fde5e230f",
        "type": "subflow",
        "name": "[Frigate] Record custom event",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "b96306105e36b31a"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7d49c71091189360",
        "type": "subflow",
        "name": "[Alarm] Trigger alarm",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 180,
                "wires": [
                    {
                        "id": "e11c94b0b5b6b826"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c3aaa54e875b64fe",
        "type": "subflow",
        "name": "[Frigate] Arm camera",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "4418b51a23fc3e1d"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f93e3d154617f1c6",
        "type": "subflow",
        "name": "[Frigate] Disarm camera",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "b2469c4afd594f05"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f42119ca744f79bc",
        "type": "subflow",
        "name": "[Alarm] Handle sensor trigger",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "6bd359d944dc6e60"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5951c9b8d92c3224",
        "type": "subflow",
        "name": "[Alarm] Handle camera motion",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "53fe43181bd4b1f2"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7f2caed3ae7db32d",
        "type": "subflow",
        "name": "[Alarm] Handle camera detect",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "dc657bcce8ae5f97"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "955372658bf804f1",
        "type": "subflow",
        "name": "[Settings] Get setting",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c2383a9fdbcbbbbd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 80,
                "wires": [
                    {
                        "id": "16f086e892d4aafb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "75ede1672068ab0f",
        "type": "subflow",
        "name": "[Alarm] Disarm `trigger` cameras",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "ca7792ec74ddb5dc"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e52b3bb6fb08cd68",
        "type": "subflow",
        "name": "[Alarm] Disarm `alarm_on` cameras",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "e982076e6930c9c2"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4fec160c96cbd7e5",
        "type": "subflow",
        "name": "[Cloudflare] Refresh credentials",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "d93ad76dcd020cdd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 80,
                "wires": [
                    {
                        "id": "b537e0ca9e479866",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0c36da2ded227873",
        "type": "subflow",
        "name": "[Nextcloud] Refresh credentials",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "ceecc1d5bd98370a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1460,
                "y": 80,
                "wires": [
                    {
                        "id": "65d89ecbaaad73d9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "fff9b047550b9220",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e83d5dc5a3f616c1",
        "type": "mcp23017chip",
        "addr": "0x20",
        "interval": "100"
    },
    {
        "id": "f57dd118a2654036",
        "type": "MySQL-Server-Connector",
        "name": "MariaDB",
        "host": "${DB_HOST}",
        "port": "3306",
        "user": "${DB_USER}",
        "password": "${DB_PASSWORD}",
        "tls": false,
        "database": "${DB_NAME}"
    },
    {
        "id": "4c57579e23eb17f5",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "default",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "83c62c0e144839bf",
        "type": "websocket-listener",
        "path": "/api/v1/ws/relays/state",
        "wholemsg": "false"
    },
    {
        "id": "fc9284fab0ccd3c2",
        "type": "websocket-listener",
        "path": "/api/v1/ws/alarm/state",
        "wholemsg": "false"
    },
    {
        "id": "92b926f12b45fcac",
        "type": "websocket-listener",
        "path": "/api/v1/ws/gps/state",
        "wholemsg": "false"
    },
    {
        "id": "f603d6ef41b5d8a2",
        "type": "websocket-listener",
        "path": "/api/v1/ws/water_tanks/state",
        "wholemsg": "false"
    },
    {
        "id": "4be285fb0888be8c",
        "type": "websocket-listener",
        "path": "/api/v1/ws/batteries/state",
        "wholemsg": "false"
    },
    {
        "id": "13d475413da9bf60",
        "type": "websocket-listener",
        "path": "/api/v1/ws/solar_charge_controllers/state",
        "wholemsg": "false"
    },
    {
        "id": "867e54e0ead62a12",
        "type": "websocket-listener",
        "path": "/api/v1/ws/temperature_sensors/state",
        "wholemsg": "false"
    },
    {
        "id": "adad033320ce05a2",
        "type": "serial-port",
        "name": "Webasto",
        "serialport": "/dev/nomadpi-webasto-usb",
        "serialbaud": "2400",
        "databits": "8",
        "parity": "even",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "827e13d335fd312c",
        "type": "subflow:4e1f9183000d244e",
        "z": "3ee3b10c02a9dae4",
        "name": "",
        "x": 250,
        "y": 480,
        "wires": [
            [
                "9e128262d7408f9d"
            ]
        ]
    },
    {
        "id": "9c7423bd52cc2dec",
        "type": "function",
        "z": "3ee3b10c02a9dae4",
        "name": "Parse payload",
        "func": "const {\n    relay_position,\n    state\n} = msg.payload;\n\nreturn {\n    relay_position,\n    payload: state ? 1 : 0\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 400,
        "wires": [
            [
                "816adb2ad456cbd8"
            ]
        ]
    },
    {
        "id": "1aee12fc671bca2f",
        "type": "catch",
        "z": "3ee3b10c02a9dae4",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 140,
        "y": 580,
        "wires": [
            [
                "d604f0318f30da1e"
            ]
        ]
    },
    {
        "id": "d604f0318f30da1e",
        "type": "function",
        "z": "3ee3b10c02a9dae4",
        "name": "Parse error",
        "func": "const { error } = msg;\nlet { message } = error;\n\ntry {\n    message = JSON.parse(message);\n} catch(err) {}\n\nreturn {\n    ...msg,\n    statusCode: 422,\n    payload: {\n        error: {\n            ...error,\n            message\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "9e128262d7408f9d",
        "type": "function",
        "z": "3ee3b10c02a9dae4",
        "name": "Group payloads",
        "func": "const payload = msg.payload.map(item => {\n    const {\n        relay_type,\n        vendor_id,\n        mqtt_topic,\n        relay_position,\n        state\n    } = item;\n    \n    return {\n        payload: {\n            relay_type,\n            vendor_id,\n            mqtt_topic,\n            relay_position,\n            state\n        }\n    }\n});\n\nreturn [payload];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 440,
        "wires": [
            [
                "080e9cb5061c772f"
            ]
        ]
    },
    {
        "id": "080e9cb5061c772f",
        "type": "switch",
        "z": "3ee3b10c02a9dae4",
        "name": "Relay type",
        "property": "payload.relay_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "relay",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "wifi_relay",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 440,
        "wires": [
            [
                "9c7423bd52cc2dec"
            ],
            [
                "248e1755cef2988d"
            ]
        ]
    },
    {
        "id": "816adb2ad456cbd8",
        "type": "subflow:28a3f62edac8391d",
        "z": "3ee3b10c02a9dae4",
        "name": "",
        "x": 1050,
        "y": 400,
        "wires": []
    },
    {
        "id": "248e1755cef2988d",
        "type": "subflow:d843692079f79c4f",
        "z": "3ee3b10c02a9dae4",
        "name": "",
        "x": 870,
        "y": 460,
        "wires": []
    },
    {
        "id": "8a0ad5065fdbb073",
        "type": "function",
        "z": "4e1f9183000d244e",
        "name": "Validate new state",
        "func": "const {\n    payload\n} = msg;\n\nif(!Array.isArray(payload)) {\n    throw { type: 'invalid_payload' }\n};\n\nconst relays_state = {\n    ...global.get('relays_state') || {}\n};\n\npayload.forEach(item => {\n    const {\n        relay_type,\n        relay_position,\n        state,\n        actor,\n        mode,\n        vendor_id,\n        mqtt_topic,\n        ...rest\n    } = item;\n\n    const relay_type_state = relays_state[relay_type] || {};\n    const item_state = relay_type_state[relay_position] || {};\n\n    if (\n        [relay_position, relay_type].includes(undefined)\n        || !['wifi_relay', 'relay'].includes(relay_type)\n        || Object.keys(rest).length > 0\n        || (\n            relay_type === 'wifi_relay' \n            && [vendor_id, mqtt_topic].includes(undefined)\n        )\n        || (\n            relay_type === 'relay'\n            && (!!vendor_id || !!mqtt_topic)\n        )\n        || !['subscribe', 'unsubscribe'].includes(mode)\n        || !actor\n        || (state !== undefined && mode === 'unsubscribe')\n        || (state === undefined && mode === 'subscribe')\n    ) {\n        throw { type: 'invalid_payload' }\n    };\n\n    if (\n        mode === 'subscribe'\n        && state !== item_state.state\n        && (item_state.actors || []).length > 0\n    ) {\n        throw {\n            type: 'conflicting_actors_found',\n            relay_type,\n            relay_position,\n            actors: item_state.actors\n        }\n    };\n})\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "63d13c5a16c612f0"
            ]
        ]
    },
    {
        "id": "63d13c5a16c612f0",
        "type": "function",
        "z": "4e1f9183000d244e",
        "name": "Set `global.relays_state`",
        "func": "const {\n    payload\n} = msg;\n\nlet relays_state = {...global.get('relays_state') || {}};\n\nconst newPayload = payload.map(item => {\n    const {\n        relay_type,\n        relay_position,\n        vendor_id,\n        mqtt_topic,\n        state,\n        actor,\n        mode\n    } = item;\n\n    let relay_type_state = relays_state[relay_type] || {};\n    let mqtt_topic_state = relay_type_state[mqtt_topic] || {};\n\n    let item_state;\n    if(relay_type === 'relay') {\n        item_state = relay_type_state[relay_position] || {};\n    } else if(relay_type === 'wifi_relay') {\n        item_state = mqtt_topic_state[relay_position] || {};\n    }\n    \n    item_state.actors ||= [];\n\n    if(mode === 'subscribe') {\n        item_state.state = state;\n        if (!item_state.actors.find(({actor: a}) => a === actor)) {\n            item_state.actors.push({ actor })\n        }\n    } else if(mode === 'unsubscribe') {\n        item_state.actors = item_state.actors.filter(({actor: a}) => a !== actor);\n        if(item_state.actors.length === 0) {\n            item_state.state = false;\n        }\n    }\n\n    if(relay_type === 'relay') {\n        relay_type_state[relay_position] = item_state;\n    } else if(relay_type === 'wifi_relay') {\n        mqtt_topic_state[relay_position] = item_state;\n        relay_type_state[mqtt_topic] = mqtt_topic_state;\n    }\n    \n    relays_state[relay_type] = relay_type_state;\n\n    return {\n        relay_type,\n        relay_position,\n        vendor_id,\n        mqtt_topic,\n        state: item_state.state\n    }\n});\n\nglobal.set('relays_state', relays_state);\n\nreturn {\n    ...msg,\n    payload: newPayload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ad6e53e4c4004a25",
        "type": "function",
        "z": "d2eb75050cc2ea33",
        "name": "Get item state",
        "func": "const {\n    relay_type,\n    mqtt_topic,\n    relay_position\n} = msg;\n\nconst relays_state = {...global.get('relays_state') || {}};\n\nconst relay_type_state = relays_state[relay_type] || {};\n\nlet relay_state;\nif(relay_type === 'wifi_relay') {\n    const mqtt_topic_state = relay_type_state[mqtt_topic] || {};\n    relay_state = mqtt_topic_state[relay_position]; \n} else if(relay_type === 'relay') {\n    relay_state = relay_type_state[relay_position];\n}\n\nreturn {\n    ...msg,\n    payload: relay_state || {}\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e9419abf35522968",
        "type": "function",
        "z": "44f3ed9f999bd3a8",
        "name": "JBD BMS script",
        "func": "const root_scripts_path = env.get('PEKAWAY_SCRIPTS_PATH');\nconst filename = `jbd_bms_info.py`;\nconst { device_id } = msg.payload;\n\nif(!root_scripts_path) {\n    throw {\n        type: 'missing_env_variable',\n        message: `$PEKAWAY_SCRIPTS_PATH is not set`\n    }\n} else if(!device_id) {\n    throw {\n        type: 'invalid_request',\n        message: `\\`device_id\\` is required`\n    }\n} else {\n    return {\n        ...msg,\n        payload: `${root_scripts_path}/${filename} -d ${device_id}`\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "5b81d63543932a28"
            ]
        ]
    },
    {
        "id": "5b81d63543932a28",
        "type": "exec",
        "z": "44f3ed9f999bd3a8",
        "command": "python3 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 360,
        "y": 80,
        "wires": [
            [
                "b034b52cd70cb3d7"
            ],
            [],
            []
        ]
    },
    {
        "id": "b034b52cd70cb3d7",
        "type": "json",
        "z": "44f3ed9f999bd3a8",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 530,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "49ee4acd56fb9817",
        "type": "function",
        "z": "924d506d524e2f1f",
        "name": "Set `global.gps_state`",
        "func": "const {\n    payload\n} = msg;\n\nconst gps_state = global.get('gps_state');\n\nif(['3d', '2d'].includes(payload.mode || !gps_state)) {\n    global.set('gps_state', msg.payload);\n};\n\nreturn {\n    payload\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "85c5be514632f153",
        "type": "function",
        "z": "cd03e8b953118d1f",
        "name": "Get `global.gps_state`",
        "func": "const payload = global.get('gps_state') || {};\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b305862eb524c8b9",
        "type": "function",
        "z": "48376301d7cf8ab5",
        "name": "Get GPIO items state",
        "func": "const {\n    _msgid='',\n    ...payload\n} = global.get('relays_state') || {};\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c2d74b2b38c9e67b",
        "type": "function",
        "z": "c30c47ad0a20b80b",
        "name": "Temperature sensor script",
        "func": "const root_scripts_path = env.get('PEKAWAY_SCRIPTS_PATH');\nconst filename = `ds18b20_info.py`;\n\nif(!root_scripts_path) {\n    throw `$PEKAWAY_SCRIPTS_PATH is not set`\n} else {\n    return {\n        ...msg,\n        payload: `${root_scripts_path}/${filename}`\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "9494fc6e2243e775"
            ]
        ]
    },
    {
        "id": "9494fc6e2243e775",
        "type": "exec",
        "z": "c30c47ad0a20b80b",
        "command": "python3 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "215a88fad5308406"
            ],
            [],
            []
        ]
    },
    {
        "id": "215a88fad5308406",
        "type": "function",
        "z": "c30c47ad0a20b80b",
        "name": "Parse temperatures",
        "func": "const {\n    payload\n} = msg;\n\nlet parsedPayload = {};\n\npayload\n    .split(\"\\n\")\n    .filter(s => !!s)\n    .forEach(string => {\n        const [\n            index,\n            temperature,\n            unit\n        ] = string.trim().split(/[\\s,\\t,\\n]+/);\n\n        if (temperature !== 'undefined') {\n            parsedPayload[parseInt(index)] = {\n                temperature: parseFloat(temperature),\n                unit\n            }\n        }\n    });\n\nreturn {\n    ...msg,\n    payload: parsedPayload\n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "203b04a219021af7",
        "type": "exec",
        "z": "b3276c87a286f102",
        "command": "jc lsusb -v",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "99d84750ab8b5b77"
            ],
            [],
            []
        ]
    },
    {
        "id": "99d84750ab8b5b77",
        "type": "json",
        "z": "b3276c87a286f102",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 80,
        "wires": [
            [
                "d7a0ab15f94c0aa3"
            ]
        ]
    },
    {
        "id": "d7a0ab15f94c0aa3",
        "type": "function",
        "z": "b3276c87a286f102",
        "name": "Parse items",
        "func": "const {\n    payload\n} = msg;\n\nconst usb_items = payload.map(item => {\n    const {\n        bus: bus_id,\n        device: device_id,\n        device_descriptor\n    } = item;\n\n    const {\n        idVendor,\n        idProduct,\n        iSerial,\n        iManufacturer,\n        iProduct\n    } = device_descriptor;\n\n    return {\n        bus_id,\n        device_id,\n        product_id: idProduct.value,\n        product_name: idProduct.description,\n        vendor_id: idVendor.value,\n        vendor_name: idVendor.description,\n        manufacturer_name: iManufacturer.description,\n        product_description: iProduct.description,\n        serial_id: iSerial.description\n    }\n});\n\nreturn {\n    ...msg,\n    payload: usb_items\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d3fb6d1d0e15f941",
        "type": "function",
        "z": "2f860c0929d372d8",
        "name": "Parse payload",
        "func": "const {\n    sql_query,\n    params\n} = msg.payload;\n\nreturn {\n    ...msg,\n    topic: sql_query,\n    payload: params\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "1c4a76541ff62d0d"
            ]
        ]
    },
    {
        "id": "1c4a76541ff62d0d",
        "type": "MySQL-Connector",
        "z": "2f860c0929d372d8",
        "server": "f57dd118a2654036",
        "name": "",
        "x": 340,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "97059ba81f6ce727",
        "type": "switch",
        "z": "28a3f62edac8391d",
        "name": "",
        "property": "relay_position",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 190,
        "y": 460,
        "wires": [
            [
                "51e9ffee4c0bc96b"
            ],
            [
                "4d7a3d34f6c7c660"
            ],
            [
                "968be9d3d6d4eebf"
            ],
            [
                "0ea16f9f74190e0f"
            ],
            [
                "2f6aac866698cfdc"
            ],
            [
                "a96a03dab3a26335"
            ],
            [
                "5e666f6ef9bf1e74"
            ],
            [
                "a45a4f2438934378"
            ]
        ]
    },
    {
        "id": "51e9ffee4c0bc96b",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "8",
        "invert": true,
        "x": 410,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "4d7a3d34f6c7c660",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "9",
        "invert": true,
        "x": 410,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "968be9d3d6d4eebf",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "10",
        "invert": true,
        "x": 410,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "0ea16f9f74190e0f",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "11",
        "invert": true,
        "x": 410,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2f6aac866698cfdc",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "12",
        "invert": true,
        "x": 410,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "a96a03dab3a26335",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "13",
        "invert": true,
        "x": 410,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "a45a4f2438934378",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "15",
        "invert": true,
        "x": 410,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "5e666f6ef9bf1e74",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "14",
        "invert": true,
        "x": 410,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "41b66de42d91cee8",
        "type": "function",
        "z": "d843692079f79c4f",
        "name": "Parse payload",
        "func": "const {\n    relay_position='',\n    mqtt_topic,\n    state\n} = msg.payload;\n\nconst topic = `cmnd/${mqtt_topic}/POWER${relay_position}`;\n\nreturn {\n    topic,\n    payload: state ? 'on' : 'off',\n    qos: 2\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 80,
        "wires": [
            [
                "e1924512decc72e2"
            ]
        ]
    },
    {
        "id": "3ffcd74351762851",
        "type": "switch",
        "z": "d843692079f79c4f",
        "name": "Vendor type",
        "property": "payload.vendor_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "tasmota",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 100,
        "wires": [
            [
                "41b66de42d91cee8"
            ],
            [
                "b68f65dc6383d334"
            ]
        ]
    },
    {
        "id": "b68f65dc6383d334",
        "type": "function",
        "z": "d843692079f79c4f",
        "name": "Throw error",
        "func": "const {\n    vendor_id\n} = msg.payload;\n\nthrow { type: `invalid_vendor_id`, vendor_id };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e1924512decc72e2",
        "type": "mqtt out",
        "z": "d843692079f79c4f",
        "name": "Dispatch MQTT command",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "82aef1b2f5d6d0c5",
        "type": "function",
        "z": "e0baa17c5072b7d3",
        "name": "Compose query",
        "func": "const payload = {\n    sql_query: 'select * from usb_devices'\n}\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "5dc5371dfb879bae"
            ]
        ]
    },
    {
        "id": "5dc5371dfb879bae",
        "type": "subflow:2f860c0929d372d8",
        "z": "e0baa17c5072b7d3",
        "name": "",
        "x": 360,
        "y": 80,
        "wires": [
            [
                "043806d87c0eb8f3"
            ]
        ]
    },
    {
        "id": "043806d87c0eb8f3",
        "type": "function",
        "z": "e0baa17c5072b7d3",
        "name": "`.rule` file content",
        "func": "const payload = msg.payload.map(item => {\n    const {\n        device_key,\n        device_spec\n    } = item;\n\n    const {\n        vendor_id,\n        product_id\n    } = JSON.parse(device_spec);\n\n    return `KERNEL==\"tty*\" ATTRS{idVendor}==\"${vendor_id.replace('0x', '')}\", ATTRS{idProduct}==\"${product_id.replace('0x', '')}\", MODE:=\"0666\", SYMLINK+=\"${device_key}\"`\n}).join(\"\\n\");\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 80,
        "wires": [
            [
                "d995c5942c7f9f0c"
            ]
        ]
    },
    {
        "id": "d995c5942c7f9f0c",
        "type": "file",
        "z": "e0baa17c5072b7d3",
        "name": "",
        "filename": "/lib/udev/rules.d/99-nomadpi-usb-devices.rules",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 830,
        "y": 80,
        "wires": [
            [
                "3483775fb8fe0b42"
            ]
        ]
    },
    {
        "id": "3483775fb8fe0b42",
        "type": "exec",
        "z": "e0baa17c5072b7d3",
        "command": "service udev restart && udevadm trigger",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1180,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "a85ad1d6b4e922a4",
        "type": "subflow:44f3ed9f999bd3a8",
        "z": "d1e3712ec6c2128d",
        "name": "",
        "x": 600,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8276b42967ce2963",
        "type": "switch",
        "z": "d1e3712ec6c2128d",
        "name": "Device type",
        "property": "payload.device_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "jbd",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "cc34d9c66177e492"
            ],
            [
                "5f3fc687b18afa45"
            ]
        ]
    },
    {
        "id": "cc34d9c66177e492",
        "type": "switch",
        "z": "d1e3712ec6c2128d",
        "name": "Connection type",
        "property": "payload.connection_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ble",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "a85ad1d6b4e922a4"
            ],
            [
                "5f3fc687b18afa45"
            ]
        ]
    },
    {
        "id": "5f3fc687b18afa45",
        "type": "function",
        "z": "d1e3712ec6c2128d",
        "name": "Throw error",
        "func": "const { payload } = msg;\n\nthrow {\n    type: 'invalid_request',\n    payload\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "9a24ef20470b8ef8",
        "type": "catch",
        "z": "d1e3712ec6c2128d",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 420,
        "y": 260,
        "wires": [
            [
                "cff0d2d68e414164"
            ]
        ]
    },
    {
        "id": "cff0d2d68e414164",
        "type": "function",
        "z": "d1e3712ec6c2128d",
        "name": "Parse error",
        "func": "const { error } = msg;\nlet { message } = error;\n\ntry {\n    message = JSON.parse(message);\n} catch(err) {}\n\nreturn {\n    ...msg,\n    statusCode: 400,\n    payload: {\n        error: {\n            ...error,\n            message\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "560065fbfef44112",
        "type": "function",
        "z": "1fcb65ecb479780e",
        "name": "Get `global.temperature_state`",
        "func": "const payload = global.get('temperature_state') || {};\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b27fc867cae90a0f",
        "type": "switch",
        "z": "2af61905d791930b",
        "name": "Value > 0",
        "property": "payload.value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "84c9c3b979ac8442"
            ]
        ]
    },
    {
        "id": "84c9c3b979ac8442",
        "type": "function",
        "z": "2af61905d791930b",
        "name": "Compose volumetric attributes query",
        "func": "const {\n  water_tank_id,\n  value\n} = msg.payload;\n\nconst sql_query = `\n  select\n    volumetric_type,\n    volumetric_params\n  from water_tanks\n  where id = :water_tank_id\n`;\n\nconst params = {\n  water_tank_id\n};\n\nreturn {\n  ...msg,\n  mqtt_payload: {\n    water_tank_id,\n    value\n  },\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 80,
        "wires": [
            [
                "9e859df6d55df580"
            ]
        ]
    },
    {
        "id": "9e859df6d55df580",
        "type": "subflow:2f860c0929d372d8",
        "z": "2af61905d791930b",
        "name": "",
        "x": 680,
        "y": 80,
        "wires": [
            [
                "5b0883d895bf1c0f"
            ]
        ]
    },
    {
        "id": "0826298b22e97e05",
        "type": "switch",
        "z": "2af61905d791930b",
        "name": "Switch `volumetric_type`",
        "property": "payload.volumetric_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "rectangular",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cylindrical",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 80,
        "wires": [
            [
                "538b31be0df29263"
            ],
            [
                "3d3606ea68b64a29"
            ]
        ]
    },
    {
        "id": "538b31be0df29263",
        "type": "function",
        "z": "2af61905d791930b",
        "name": "Calculate total and remaining volume",
        "func": "const { water_tank_id } = msg.mqtt_payload;\n\nconst {\n    sensor_distance_when_full,\n    sensor_distance_from_surface,\n    height,\n    width,\n    length\n} = msg.payload.volumetric_params;\n\nconst total_volume_liters = height * width * length / 1000;\nconst remaining_volume_liters = (\n    Math.min(\n        Math.max(\n            0, \n            (\n                height\n                - sensor_distance_from_surface\n                + sensor_distance_when_full\n            ) * width * length\n        ) / 1000,\n        total_volume_liters\n    )\n);\n\nreturn {\n    ...msg,\n    payload: {\n        water_tank_id,\n        total_volume_liters,\n        sensor_distance_from_surface,\n        sensor_distance_when_full,\n        remaining_volume_liters\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 60,
        "wires": [
            [
                "da3c73fc6dfbca7e"
            ]
        ]
    },
    {
        "id": "da3c73fc6dfbca7e",
        "type": "function",
        "z": "2af61905d791930b",
        "name": "Update `global.water_tanks_state`",
        "func": "const water_tanks_state = global.get('water_tanks_state');\n\nconst {\n    water_tank_id,\n    ...rest\n} = msg.payload;\n\nconst new_water_tanks_state = {\n    ...water_tanks_state,\n    [water_tank_id]: rest\n}\n\nglobal.set('water_tanks_state', new_water_tanks_state);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3d3606ea68b64a29",
        "type": "function",
        "z": "2af61905d791930b",
        "name": "Calculate total and remaining volume",
        "func": "const { water_tank_id } = msg.mqtt_payload;\n\nconst {\n    sensor_distance_from_surface,\n    sensor_distance_when_full,\n    height,\n    diameter\n} = msg.payload;\n\nconst square_radius = Math.pow(diameter / 2, 2);\nconst total_volume_liters = Math.PI * square_radius * height / 1000;\n\n// Calculate the remaining volume based on the liquid distance\nconst remaining_volume_liters = (\n    Math.min(\n        Math.max(\n            0,\n            (\n                height\n                - sensor_distance_from_surface\n                + sensor_distance_when_full\n            ) * Math.PI * square_radius / 1000\n        ),\n        total_volume_liters\n    )\n);\n\nreturn {\n    ...msg,\n    payload: {\n        water_tank_id,\n        total_volume_liters,\n        sensor_distance_from_surface,\n        remaining_volume_liters\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 120,
        "wires": [
            [
                "da3c73fc6dfbca7e"
            ]
        ]
    },
    {
        "id": "5b0883d895bf1c0f",
        "type": "function",
        "z": "2af61905d791930b",
        "name": "Parse volumetric params",
        "func": "const {\n    volumetric_params\n} = msg.payload[0];\n\nconst {\n    value\n} = msg.mqtt_payload;\n\nconst sensor_distance_from_surface = parseInt(value);\n\nconst parsed_params = JSON.parse(volumetric_params);\n\nconst height = parseInt(parsed_params.height);\nconst width = parseInt(parsed_params.width);\nconst length = parseInt(parsed_params.length);\nconst diameter = parseInt(parsed_params.diameter);\nconst sensor_distance_when_full = parseInt(parsed_params.sensor_distance_when_full);\n\nreturn {\n    ...msg,\n    payload: {\n        ...msg.payload[0],\n        volumetric_params: {\n            height,\n            width,\n            length,\n            diameter,\n            sensor_distance_when_full,\n            sensor_distance_from_surface\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 80,
        "wires": [
            [
                "0826298b22e97e05"
            ]
        ]
    },
    {
        "id": "4a6ce239161630fd",
        "type": "function",
        "z": "d522f6d2f07435cd",
        "name": "Get container info",
        "func": "const { service_name } = msg;\nconst service = msg.payload.find(i => {\n    return i['Names'].includes(`/${service_name}`)\n});\n\nreturn {\n    ...msg,\n    payload: service\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "0d5b2114da75e3d1",
        "type": "function",
        "z": "d522f6d2f07435cd",
        "name": "Validate request and compose command",
        "func": "const { service_name } = msg.payload;\n\nif (!service_name) {\n    throw { type: 'invalid_request' }\n};\n\nconst payload = `curl --unix-socket /var/run/docker.sock http://localhost/containers/json?all=true`;\n\nreturn {\n    ...msg,\n    service_name,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 80,
        "wires": [
            [
                "852700f367980827"
            ]
        ]
    },
    {
        "id": "852700f367980827",
        "type": "exec",
        "z": "d522f6d2f07435cd",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get containers",
        "x": 560,
        "y": 80,
        "wires": [
            [
                "1fb88a049422ae26"
            ],
            [],
            []
        ]
    },
    {
        "id": "1fb88a049422ae26",
        "type": "json",
        "z": "d522f6d2f07435cd",
        "name": "Parse JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 770,
        "y": 80,
        "wires": [
            [
                "4a6ce239161630fd"
            ]
        ]
    },
    {
        "id": "932fb4a01c4811ce",
        "type": "subflow:d522f6d2f07435cd",
        "z": "7b9d1f6f5864ccce",
        "name": "",
        "x": 240,
        "y": 80,
        "wires": [
            [
                "83c260bfccf56224"
            ]
        ]
    },
    {
        "id": "83c260bfccf56224",
        "type": "function",
        "z": "7b9d1f6f5864ccce",
        "name": "Compose request",
        "func": "const container_id = msg.payload['Id'];\n\nconst payload = `curl --unix-socket /var/run/docker.sock -X POST http://localhost/containers/${container_id}/restart`;\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 80,
        "wires": [
            [
                "2d4cfce907a252be"
            ]
        ]
    },
    {
        "id": "2d4cfce907a252be",
        "type": "exec",
        "z": "7b9d1f6f5864ccce",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart container",
        "x": 670,
        "y": 80,
        "wires": [
            [
                "689e133112ae6ce2"
            ],
            [],
            []
        ]
    },
    {
        "id": "689e133112ae6ce2",
        "type": "function",
        "z": "7b9d1f6f5864ccce",
        "name": "Return success",
        "func": "return {\n    ...msg,\n    payload: {\n        status: 'success'\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ed0e0c4d1a309ec1",
        "type": "subflow:2f860c0929d372d8",
        "z": "931b8d41fb4d3124",
        "name": "",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "7a8739f934e85410"
            ]
        ]
    },
    {
        "id": "873222205cecdc2f",
        "type": "function",
        "z": "931b8d41fb4d3124",
        "name": "Compose query",
        "func": "const sql_query = `\n  select *\n  from batteries\n`;\n\nconst params = {};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            [
                "ed0e0c4d1a309ec1"
            ]
        ]
    },
    {
        "id": "7a8739f934e85410",
        "type": "function",
        "z": "931b8d41fb4d3124",
        "name": "Parse result",
        "func": "const payload = msg.payload.map(battery => {\n    return {\n        ...battery,\n        connection_params: JSON.parse(battery.connection_params)\n    }\n})\n\nreturn {\n    ...msg,\n    payload\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "efa5074daeceaa81",
        "type": "subflow:931b8d41fb4d3124",
        "z": "fbcbc95f786b1f72",
        "name": "",
        "x": 260,
        "y": 80,
        "wires": [
            [
                "8719bc804a72d492"
            ]
        ]
    },
    {
        "id": "8719bc804a72d492",
        "type": "function",
        "z": "fbcbc95f786b1f72",
        "name": "Iterate over batteries",
        "func": "const payloads = msg.payload.map(payload => {\n    const {\n        id: battery_id,\n        connection_type,\n        connection_params\n    } = payload;\n\n    const {\n        device_type,\n        device_id\n    } = connection_params;\n\n    return {\n        battery: {\n            battery_id\n        },\n        payload: {\n            connection_type,\n            device_type,\n            device_id\n        }\n    }\n})\n\nreturn payloads;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "e427ba670c9924bd"
            ]
        ]
    },
    {
        "id": "e427ba670c9924bd",
        "type": "subflow:d1e3712ec6c2128d",
        "z": "fbcbc95f786b1f72",
        "name": "Get battery stats",
        "x": 710,
        "y": 80,
        "wires": [
            [
                "d1c75753b4b7d54c"
            ]
        ]
    },
    {
        "id": "d1c75753b4b7d54c",
        "type": "function",
        "z": "fbcbc95f786b1f72",
        "name": "Set `global.batteries_state`",
        "func": "let batteries_state = {\n    ...global.get('batteries_state') || {}\n};\n\nconst {\n    battery,\n    payload\n} = msg;\n\nbatteries_state[battery.battery_id] = payload;\n\nglobal.set('batteries_state', batteries_state)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b43d1c3dfac9b4c3",
        "type": "function",
        "z": "5dcda338317c7a86",
        "name": "Get batteries state",
        "func": "const payload = global.get('batteries_state') || {};\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8766551fd4e3b522",
        "type": "function",
        "z": "d6bd8ca48ade8d7d",
        "name": "Get water tanks state",
        "func": "const payload = global.get('water_tanks_state') || {};\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "37bf5f7a8a3cdb74",
        "type": "subflow:2f860c0929d372d8",
        "z": "5c6f48f8e87bdeba",
        "name": "",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "f756c710b3494575"
            ]
        ]
    },
    {
        "id": "9d8eb984951b703c",
        "type": "function",
        "z": "5c6f48f8e87bdeba",
        "name": "Compose query",
        "func": "const sql_query = `\n  select *\n  from temperature_sensors\n`;\n\nconst params = {};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            [
                "37bf5f7a8a3cdb74"
            ]
        ]
    },
    {
        "id": "f756c710b3494575",
        "type": "function",
        "z": "5c6f48f8e87bdeba",
        "name": "Parse result",
        "func": "const payload = msg.payload.map(temp_sensor => {\n    return {\n        ...temp_sensor,\n        connection_params: JSON.parse(temp_sensor.connection_params)\n    }\n})\n\nreturn {\n    ...msg,\n    payload\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "905b8f9e04957a19",
        "type": "function",
        "z": "d8264d18d8e4b566",
        "name": "Group sensors by `connection_type`",
        "func": "const parsed_result = {};\n\nmsg.payload.forEach(temp_sensor => {\n    const {\n        connection_type\n    } = temp_sensor;\n\n    if(!connection_type) {\n        throw {\n            type: 'invalid_request',\n            message: 'missing `connection_type` value'\n        }\n    }\n    \n    parsed_result[connection_type] ||= [];\n    parsed_result[connection_type].push(temp_sensor)\n})\n\nconst payloads = Object.keys(parsed_result).map(connection_type => {\n    const temperature_sensors = parsed_result[connection_type].map(temp_sensor => {\n        return {\n            temperature_sensor_id: temp_sensor.id,\n            ...temp_sensor.connection_params\n        }\n    });\n\n    return {\n        payload: {\n            connection_type,\n            temperature_sensors\n        }\n    }\n});\n\nreturn payloads;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 120,
        "wires": [
            [
                "11cd8eddc2e5fcec"
            ]
        ]
    },
    {
        "id": "11cd8eddc2e5fcec",
        "type": "switch",
        "z": "d8264d18d8e4b566",
        "name": "Connection type",
        "property": "payload.connection_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "one_wire",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "a8cb64a85366afd1"
            ]
        ]
    },
    {
        "id": "a8cb64a85366afd1",
        "type": "function",
        "z": "d8264d18d8e4b566",
        "name": "Parse payload",
        "func": "const {\n    temperature_sensors\n} = msg.payload;\n\nreturn {\n    ...msg,\n    temperature_sensors\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 120,
        "wires": [
            [
                "3ffcabd4772587ba"
            ]
        ]
    },
    {
        "id": "3ffcabd4772587ba",
        "type": "subflow:c30c47ad0a20b80b",
        "z": "d8264d18d8e4b566",
        "name": "",
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "562a4f72d675c33b"
            ]
        ]
    },
    {
        "id": "562a4f72d675c33b",
        "type": "function",
        "z": "d8264d18d8e4b566",
        "name": "Set `global.temperature_state`",
        "func": "const {\n    temperature_sensors,\n    payload\n} = msg;\n\nlet temperature_state = global.get('temperature_state') || {};\n\ntemperature_sensors.forEach(({ temperature_sensor_id, one_wire_index }) => {\n    if(payload[one_wire_index] !== undefined) {\n        temperature_state[temperature_sensor_id] = payload[one_wire_index];\n    }\n});\n\nglobal.set('temperature_state', temperature_state);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "9641a403207d74f3",
        "type": "catch",
        "z": "d8264d18d8e4b566",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 200,
        "y": 180,
        "wires": [
            [
                "b7b960f529b1372c"
            ]
        ]
    },
    {
        "id": "b7b960f529b1372c",
        "type": "function",
        "z": "d8264d18d8e4b566",
        "name": "Parse error",
        "func": "const { error } = msg;\nlet { message } = error;\n\ntry {\n    message = JSON.parse(message);\n} catch(err) {}\n\nreturn {\n    ...msg,\n    statusCode: 400,\n    payload: {\n        error: {\n            ...error,\n            message\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "5f5fee335ab24a85",
        "type": "subflow:5c6f48f8e87bdeba",
        "z": "d8264d18d8e4b566",
        "name": "",
        "x": 270,
        "y": 120,
        "wires": [
            [
                "905b8f9e04957a19"
            ]
        ]
    },
    {
        "id": "0fe7e05da4f35e8f",
        "type": "subflow:2f860c0929d372d8",
        "z": "7f8f32220da2dd83",
        "name": "",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "c9481a4af4b14335"
            ]
        ]
    },
    {
        "id": "3fa0405a6381d1f4",
        "type": "function",
        "z": "7f8f32220da2dd83",
        "name": "Compose query",
        "func": "const sql_query = `\n  select *\n  from solar_charge_controllers\n`;\n\nconst params = {};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            [
                "0fe7e05da4f35e8f"
            ]
        ]
    },
    {
        "id": "c9481a4af4b14335",
        "type": "function",
        "z": "7f8f32220da2dd83",
        "name": "Parse result",
        "func": "const payload = msg.payload.map(battery => {\n    return {\n        ...battery,\n        connection_params: JSON.parse(battery.connection_params)\n    }\n})\n\nreturn {\n    ...msg,\n    payload\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ac4d3050957b2ebb",
        "type": "function",
        "z": "f7bd6ee532013f76",
        "name": "Renogy solar charge controller script",
        "func": "const root_scripts_path = env.get('PEKAWAY_SCRIPTS_PATH');\nconst filename = `renogy_bt_info.py`;\nconst { device_id } = msg.payload;\n\nif(!root_scripts_path) {\n    throw {\n        type: 'missing_env_variable',\n        message: `$PEKAWAY_SCRIPTS_PATH is not set`\n    }\n} else if(!device_id) {\n    throw {\n        type: 'invalid_request',\n        message: `\\`device_id\\` is required`\n    }\n} else {\n    return {\n        ...msg,\n        payload: `${root_scripts_path}/${filename} -d ${device_id}`\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 80,
        "wires": [
            [
                "0f64a60cfc7bc1c6"
            ]
        ]
    },
    {
        "id": "0f64a60cfc7bc1c6",
        "type": "exec",
        "z": "f7bd6ee532013f76",
        "command": "python3 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 520,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "c911c8cc206cae5b",
        "type": "switch",
        "z": "5b7abfd84ae7c0fb",
        "name": "Device type",
        "property": "payload.device_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "renogy",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 140,
        "wires": [
            [
                "8d7728988ba69203"
            ],
            [
                "4906d196fc01ac90"
            ]
        ]
    },
    {
        "id": "8d7728988ba69203",
        "type": "switch",
        "z": "5b7abfd84ae7c0fb",
        "name": "Connection type",
        "property": "payload.connection_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ble",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 100,
        "wires": [
            [
                "0ce33a637c73a55d"
            ],
            [
                "4906d196fc01ac90"
            ]
        ]
    },
    {
        "id": "4906d196fc01ac90",
        "type": "function",
        "z": "5b7abfd84ae7c0fb",
        "name": "Throw error",
        "func": "const { payload } = msg;\n\nthrow {\n    type: 'invalid_request',\n    payload\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "86f35bdf8f05ea51",
        "type": "catch",
        "z": "5b7abfd84ae7c0fb",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 460,
        "y": 240,
        "wires": [
            [
                "425588dd818d368c"
            ]
        ]
    },
    {
        "id": "425588dd818d368c",
        "type": "function",
        "z": "5b7abfd84ae7c0fb",
        "name": "Parse error",
        "func": "const { error } = msg;\nlet { message } = error;\n\ntry {\n    message = JSON.parse(message);\n} catch(err) {}\n\nreturn {\n    ...msg,\n    statusCode: 400,\n    payload: {\n        error: {\n            ...error,\n            message\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "0ce33a637c73a55d",
        "type": "subflow:f7bd6ee532013f76",
        "z": "5b7abfd84ae7c0fb",
        "name": "",
        "x": 730,
        "y": 80,
        "wires": []
    },
    {
        "id": "52cdd9e09fb00541",
        "type": "subflow:7f8f32220da2dd83",
        "z": "d0749495e355f931",
        "name": "",
        "x": 340,
        "y": 80,
        "wires": [
            [
                "1296aad078f73fb1"
            ]
        ]
    },
    {
        "id": "1296aad078f73fb1",
        "type": "function",
        "z": "d0749495e355f931",
        "name": "Iterate over solar charge controllers",
        "func": "const payloads = msg.payload.map(payload => {\n    const {\n        id: solar_charge_controller_id,\n        connection_type,\n        connection_params\n    } = payload;\n\n    const {\n        device_type,\n        device_id\n    } = connection_params;\n\n    return {\n        solar_charge_controller: {\n            solar_charge_controller_id\n        },\n        payload: {\n            connection_type,\n            device_type,\n            device_id\n        }\n    }\n})\n\nreturn payloads;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 80,
        "wires": [
            [
                "936597b79ae60bdf"
            ]
        ]
    },
    {
        "id": "936597b79ae60bdf",
        "type": "subflow:5b7abfd84ae7c0fb",
        "z": "d0749495e355f931",
        "name": "",
        "x": 1010,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c84b63091dd548fa",
        "type": "function",
        "z": "8b0e71f3c152c02a",
        "name": "Get solar charge controllers state",
        "func": "const payload = global.get('solar_charge_controllers_state') || {};\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d4d7b905594dc2d7",
        "type": "function",
        "z": "4ca15bb77bd03cce",
        "name": "Set `global.solar_charge_controllers_state`",
        "func": "let solar_charge_controllers_state = {\n    ...global.get('solar_charge_controllers_state') || {}\n};\n\nconst {\n    values,\n    payload\n} = msg;\n\nsolar_charge_controllers_state[payload[0].id] = values;\n\nglobal.set('solar_charge_controllers_state', solar_charge_controllers_state)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3c699322bb9bf7e7",
        "type": "subflow:2f860c0929d372d8",
        "z": "4ca15bb77bd03cce",
        "name": "",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "d4d7b905594dc2d7"
            ]
        ]
    },
    {
        "id": "20df51fe25c79723",
        "type": "function",
        "z": "4ca15bb77bd03cce",
        "name": "Compose query",
        "func": "const {\n  mac_address,\n  battery_current,\n  battery_percentage,\n  battery_temperature,\n  battery_type,\n  battery_voltage,\n  charging_status,\n  controller_temperature,\n  // charging_amp_hours_today,\n  // discharging_amp_hours_today,\n  load_current,\n  load_power,\n  load_status,\n  load_voltage,\n  // max_charging_power_today,\n  // max_discharging_power_today,\n  // power_consumption_today,\n  // power_generation_today,\n  // power_generation_total,\n  pv_current,\n  pv_power,\n  pv_voltage,\n} = msg.payload;\n\nconst sql_query = `\n  select id\n  from solar_charge_controllers\n  where\n    connection_type = 'ble'\n    and json_value(connection_params, '$.device_id') = :mac_address\n  limit 1\n`;\n\nconst params = {\n  mac_address\n};\n\nreturn {\n  values: {\n    charging_status,\n    controller_temperature,\n    battery: {\n      state_of_charge: battery_percentage,\n      temperature: battery_temperature,\n      type: battery_type,\n      voltage: battery_voltage\n    },\n    load: {\n      current: load_current,\n      power: load_power,\n      status: load_status,\n      voltage: load_voltage,\n    },\n    photovoltaic: {\n      current: pv_current,\n      power: pv_power,\n      voltage: pv_voltage,\n    }\n  },\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            [
                "3c699322bb9bf7e7"
            ]
        ]
    },
    {
        "id": "c3f1e910b77c57b6",
        "type": "function",
        "z": "933ed9d2e03018bd",
        "name": "Get alarm state",
        "func": "const payload = global.get('alarm_state') || {};\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9b1565da34c03305",
        "type": "function",
        "z": "d02cbdb9b9ab0598",
        "name": "Set `global.alarm_state`",
        "func": "const payload = msg.req.body;\nconst { armed } = payload;\n\nif (![true, false].includes(armed)) {\n    throw { type: 'invalid_request' }\n};\n\nlet armed_at;\nif(armed) {\n    armed_at = Math.floor(new Date().getTime());\n};\n\nconst alarm_state = global.get('alarm_state') || {};\nglobal.set('alarm_state', { ...alarm_state, armed, armed_at });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "6042330ec132ec15",
                "22ada68811d504d0"
            ]
        ]
    },
    {
        "id": "dd669d26503322a2",
        "type": "function",
        "z": "d02cbdb9b9ab0598",
        "name": "Get `arm_on` alarm on cameras",
        "func": "const sql_query = `\n  select connection_params_camera_id as frigate_camera_id\n  from security_alarm_camera_rules\n  where connection_type = 'frigate'\n    and arm_on = 'alarm_on'\n`;\n\nconst params = {};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 160,
        "wires": [
            [
                "be5ab65a2f138aa0"
            ]
        ]
    },
    {
        "id": "be5ab65a2f138aa0",
        "type": "subflow:2f860c0929d372d8",
        "z": "d02cbdb9b9ab0598",
        "name": "",
        "x": 900,
        "y": 160,
        "wires": [
            [
                "4454db0d8de3d533"
            ]
        ]
    },
    {
        "id": "22ada68811d504d0",
        "type": "switch",
        "z": "d02cbdb9b9ab0598",
        "name": "",
        "property": "payload.armed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 180,
        "wires": [
            [
                "dd669d26503322a2"
            ],
            [
                "d668b37e7853ebee"
            ]
        ]
    },
    {
        "id": "d668b37e7853ebee",
        "type": "function",
        "z": "d02cbdb9b9ab0598",
        "name": "Get alarm cameras",
        "func": "const sql_query = `\n  select connection_params_camera_id as frigate_camera_id\n  from security_alarm_camera_rules\n  where connection_type = 'frigate'\n`;\n\nconst params = {};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 220,
        "wires": [
            [
                "d7d7a05a54c5498d"
            ]
        ]
    },
    {
        "id": "d7d7a05a54c5498d",
        "type": "subflow:2f860c0929d372d8",
        "z": "d02cbdb9b9ab0598",
        "name": "",
        "x": 820,
        "y": 220,
        "wires": [
            [
                "00e0b0bd1dffa9e4"
            ]
        ]
    },
    {
        "id": "6042330ec132ec15",
        "type": "delay",
        "z": "d02cbdb9b9ab0598",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4454db0d8de3d533",
        "type": "function",
        "z": "d02cbdb9b9ab0598",
        "name": "Iterate over cameras",
        "func": "const payloads = msg.payload.map(({ frigate_camera_id }) => {\n    return {\n        payload: { frigate_camera_id }\n    }\n});\n\nreturn [ payloads ].filter(p => p.length > 0);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 160,
        "wires": [
            [
                "c70d24f77167c3fd"
            ]
        ]
    },
    {
        "id": "00e0b0bd1dffa9e4",
        "type": "function",
        "z": "d02cbdb9b9ab0598",
        "name": "Iterate over cameras",
        "func": "const payloads = msg.payload.map(({ frigate_camera_id }) => {\n    return {\n        payload: { frigate_camera_id }\n    }\n});\n\nreturn [ payloads ].filter(p => p.length > 0);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 220,
        "wires": [
            [
                "f4e34f74c2aa76f7"
            ]
        ]
    },
    {
        "id": "c70d24f77167c3fd",
        "type": "subflow:c3aaa54e875b64fe",
        "z": "d02cbdb9b9ab0598",
        "name": "",
        "x": 1320,
        "y": 160,
        "wires": []
    },
    {
        "id": "f4e34f74c2aa76f7",
        "type": "subflow:f93e3d154617f1c6",
        "z": "d02cbdb9b9ab0598",
        "name": "",
        "x": 1250,
        "y": 220,
        "wires": []
    },
    {
        "id": "b658fd1bf07eafa5",
        "type": "http request",
        "z": "6abeab3fde5e230f",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b96306105e36b31a",
        "type": "function",
        "z": "6abeab3fde5e230f",
        "name": "Record `motion` event in Frigate",
        "func": "const {\n  frigate_camera_id,\n  event_name,\n  body={}\n} = msg.payload;\n\nconst url = `http://127.0.0.1:5000/api/events/${frigate_camera_id}/${event_name}/create`;\nreturn {\n  ...msg,\n  url,\n  payload: body\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 140,
        "wires": [
            [
                "b658fd1bf07eafa5"
            ]
        ]
    },
    {
        "id": "2665d4936c652384",
        "type": "function",
        "z": "7d49c71091189360",
        "name": "Set `global.alarm_state`",
        "func": "const {\n    payload: gps_state,\n    frigate_event\n} = msg;\n\nconst alarm_state = global.get('alarm_state');\n\nconst triggered_at = Math.floor(new Date().getTime());\nconst new_alarm_state = {\n    ...alarm_state,\n    triggered: true,\n    triggered_at,\n    gps_state,\n    frigate_event\n};\n\nglobal.set('alarm_state', new_alarm_state);\n\nreturn {\n    payload: new_alarm_state\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 120,
        "wires": [
            [
                "a10859844e1c0ab4",
                "40ae8cb3ef6e4600"
            ]
        ]
    },
    {
        "id": "020115577dccc5ed",
        "type": "subflow:cd03e8b953118d1f",
        "z": "7d49c71091189360",
        "name": "",
        "x": 440,
        "y": 120,
        "wires": [
            [
                "2665d4936c652384"
            ]
        ]
    },
    {
        "id": "e11c94b0b5b6b826",
        "type": "function",
        "z": "7d49c71091189360",
        "name": "Filter timestamp",
        "func": "const { frigate_event } = msg.payload;\n\nconst alarm_state = global.get('alarm_state') || {};\n\nconst { triggered_at, armed_at } = alarm_state;\n\nconst current_timestamp = Math.floor(new Date().getTime());\nconst ignore_after_timestamp = current_timestamp - 30 * 1000;\n\nif (armed_at < ignore_after_timestamp) {\n    if (!triggered_at || triggered_at < ignore_after_timestamp) {\n        return [ { triggered_at, frigate_event }, msg ];\n    }\n};\n\nif(triggered_at) {\n    global.set(\n        'alarm_state', \n        {\n            ...alarm_state,\n            triggered_at: current_timestamp\n        }\n    )\n\n    return [ { triggered_at: current_timestamp, frigate_event } ]\n};\n\nreturn [];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 180,
        "wires": [
            [
                "020115577dccc5ed"
            ],
            [
                "e5cf4a30697b6dd5",
                "bf014d4cfb592883",
                "5ea3decc29f05cb8"
            ]
        ]
    },
    {
        "id": "e5cf4a30697b6dd5",
        "type": "function",
        "z": "7d49c71091189360",
        "name": "Select `arm_on` trigger cameras",
        "func": "const sql_query = `\n  select connection_params_camera_id as frigate_camera_id\n  from security_alarm_camera_rules\n  where arm_on = 'trigger'\n`;\n\nconst params = {};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            [
                "c8e198007296f172"
            ]
        ]
    },
    {
        "id": "c8e198007296f172",
        "type": "subflow:2f860c0929d372d8",
        "z": "7d49c71091189360",
        "name": "",
        "x": 720,
        "y": 180,
        "wires": [
            [
                "c1f612d987947371"
            ]
        ]
    },
    {
        "id": "c1f612d987947371",
        "type": "function",
        "z": "7d49c71091189360",
        "name": "Iterate over cameras",
        "func": "const payloads = msg.payload.map(({ frigate_camera_id }) => {\n    return {\n        payload: { frigate_camera_id }\n    }\n});\n\nreturn [ payloads ].filter(p => p.length > 0);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 180,
        "wires": [
            [
                "202aee37af4af3bb"
            ]
        ]
    },
    {
        "id": "202aee37af4af3bb",
        "type": "subflow:c3aaa54e875b64fe",
        "z": "7d49c71091189360",
        "name": "",
        "x": 1140,
        "y": 180,
        "wires": []
    },
    {
        "id": "a10859844e1c0ab4",
        "type": "delay",
        "z": "7d49c71091189360",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "1628f714c9390ca0"
            ]
        ]
    },
    {
        "id": "40ae8cb3ef6e4600",
        "type": "debug",
        "z": "7d49c71091189360",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 60,
        "wires": []
    },
    {
        "id": "bf014d4cfb592883",
        "type": "function",
        "z": "7d49c71091189360",
        "name": "Set custom Frigate event",
        "func": "const {\n  frigate_event\n} = msg.payload || {};\n\nif(!frigate_event) return [];\n\nconst {\n  is_custom_event,\n  frigate_camera_id,\n  event_name,\n  body={}\n} = frigate_event;\n\nif(is_custom_event) {\n  return {\n    payload: {\n      frigate_camera_id,\n      event_name,\n      body\n    }\n  };\n} else {\n  return []\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 240,
        "wires": [
            [
                "22ec98253c7187ae"
            ]
        ]
    },
    {
        "id": "22ec98253c7187ae",
        "type": "subflow:6abeab3fde5e230f",
        "z": "7d49c71091189360",
        "name": "",
        "x": 730,
        "y": 240,
        "wires": []
    },
    {
        "id": "94acf3f4197da88d",
        "type": "function",
        "z": "7d49c71091189360",
        "name": "Check notifications enabled",
        "func": "const notifications_enabled = msg.payload;\n\nif(notifications_enabled) {\n    return {}\n} else {\n    return []\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 300,
        "wires": [
            [
                "bccdb6b947d88f6f"
            ]
        ]
    },
    {
        "id": "3d998ca408e5fad9",
        "type": "subflow:955372658bf804f1",
        "z": "7d49c71091189360",
        "name": "",
        "x": 940,
        "y": 300,
        "wires": [
            [
                "94acf3f4197da88d"
            ]
        ]
    },
    {
        "id": "695b303a7d115356",
        "type": "function",
        "z": "7d49c71091189360",
        "name": "Get `security_alarm_notifications` setting",
        "func": "const {\n    frigate_event\n} = msg.payload;\n\nreturn {\n    frigate_event,\n    payload: {\n        setting_key: 'security_alarm_notifications'\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 300,
        "wires": [
            [
                "3d998ca408e5fad9"
            ]
        ]
    },
    {
        "id": "bccdb6b947d88f6f",
        "type": "function",
        "z": "7d49c71091189360",
        "name": "Get `notifications_whatsapp_number` setting",
        "func": "return {\n    payload: {\n        setting_key: 'notifications_whatsapp_number'\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 300,
        "wires": [
            [
                "7d1f01261b422729"
            ]
        ]
    },
    {
        "id": "7d1f01261b422729",
        "type": "subflow:955372658bf804f1",
        "z": "7d49c71091189360",
        "name": "",
        "x": 1780,
        "y": 300,
        "wires": [
            [
                "b73aa6222871a1a4"
            ]
        ]
    },
    {
        "id": "b04c01ff63dc1208",
        "type": "http request",
        "z": "7d49c71091189360",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2190,
        "y": 300,
        "wires": [
            [
                "edc09f2469ddfb96"
            ]
        ]
    },
    {
        "id": "b73aa6222871a1a4",
        "type": "function",
        "z": "7d49c71091189360",
        "name": "Set CallMeBot request",
        "func": "const phone = msg.payload;\n\nconst alarm_state = global.get('alarm_state');\n\nconst {\n    frigate_event={},\n    gps_state={}\n} = alarm_state;\n\nconst {\n    frigate_camera_id,\n    event_name,\n    body={}\n} = frigate_event;\n\nconst {\n    sub_label\n} = body;\n\nconst {\n    longitude,\n    latitude\n} = gps_state;\n\nconst location = `google.com/maps/place/${longitude},${latitude}`;\n\nconst text = `\nAlarm triggered!\n\n${event_name} - ${sub_label || frigate_camera_id}\n\nLocation ${location}\n`;\n\nif(phone) {\n    return {\n        url: `${env.get('SERVICES_API_ROOT_URL')}/services/call-me-bot/whatsapp`,\n        payload: {\n            phone,\n            text\n        }\n    }\n} else {\n    return [];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 300,
        "wires": [
            [
                "b04c01ff63dc1208"
            ]
        ]
    },
    {
        "id": "5ea3decc29f05cb8",
        "type": "delay",
        "z": "7d49c71091189360",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 300,
        "wires": [
            [
                "695b303a7d115356"
            ]
        ]
    },
    {
        "id": "edc09f2469ddfb96",
        "type": "debug",
        "z": "7d49c71091189360",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 300,
        "wires": []
    },
    {
        "id": "f9434043c5c3a5ad",
        "type": "subflow:75ede1672068ab0f",
        "z": "7d49c71091189360",
        "name": "",
        "x": 1300,
        "y": 120,
        "wires": []
    },
    {
        "id": "1628f714c9390ca0",
        "type": "function",
        "z": "7d49c71091189360",
        "name": "Set `global.alarm_state`",
        "func": "const alarm_state = global.get('alarm_state');\n\nconst {\n    triggered_at\n} = msg.payload;\n\nif(triggered_at === alarm_state.triggered_at) {\n    const new_alarm_state = {\n        ...alarm_state,\n        triggered: false,\n        triggered_at: null,\n        gps_state: null,\n        frigate_event: null\n    };\n\n    global.set('alarm_state', new_alarm_state);\n\n    return {\n        payload: new_alarm_state\n    };\n}\n\nreturn [];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 120,
        "wires": [
            [
                "f9434043c5c3a5ad",
                "a52f4a83b6708017"
            ]
        ]
    },
    {
        "id": "a52f4a83b6708017",
        "type": "debug",
        "z": "7d49c71091189360",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 60,
        "wires": []
    },
    {
        "id": "970ff1130a49e2c5",
        "type": "mqtt out",
        "z": "c3aaa54e875b64fe",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "4418b51a23fc3e1d",
        "type": "function",
        "z": "c3aaa54e875b64fe",
        "name": "Arm camera",
        "func": "const {\n    frigate_camera_id\n} = msg.payload;\n\nconst payloads = [\n    'motion',\n    'detect',\n    'recordings',\n    'snapshots'\n].map(setting => {\n    return {\n        topic: `frigate/${frigate_camera_id}/${setting}/set`,\n        payload: \"ON\"\n    }\n});\n\nreturn [ payloads ];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "970ff1130a49e2c5"
            ]
        ]
    },
    {
        "id": "b2469c4afd594f05",
        "type": "function",
        "z": "f93e3d154617f1c6",
        "name": "Disarm camera",
        "func": "const {\n    frigate_camera_id\n} = msg.payload;\n\nconst payloads = [\n    'detect',\n    'recordings',\n    'snapshots',\n    'motion'\n].map(setting => {\n    return {\n        topic: `frigate/${frigate_camera_id}/${setting}/set`,\n        payload: \"OFF\"\n    }\n});\n\nreturn [ payloads ];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            [
                "9226d5f9743cb567"
            ]
        ]
    },
    {
        "id": "9226d5f9743cb567",
        "type": "mqtt out",
        "z": "f93e3d154617f1c6",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 370,
        "y": 80,
        "wires": []
    },
    {
        "id": "6bd359d944dc6e60",
        "type": "function",
        "z": "f42119ca744f79bc",
        "name": "Get sensor alarm triggers",
        "func": "const {\n  device_id: sensor_id,\n  message: event_attributes\n} = msg.payload;\n\nconst sql_query = `\n  select\n    tt.trigger_id as sensor_id,\n    ss.name as sensor_name,\n    ss.sensor_type\n  from security_alarm_trigger_rules tt\n    left join sensors ss on ss.id = tt.trigger_id\n  where trigger_id = :sensor_id\n    and trigger_type = 'sensor'\n`;\n\nconst params = {\n  sensor_id\n};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  },\n  event_attributes\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 80,
        "wires": [
            [
                "b4cc2296a7286f2b"
            ]
        ]
    },
    {
        "id": "b4cc2296a7286f2b",
        "type": "subflow:2f860c0929d372d8",
        "z": "f42119ca744f79bc",
        "name": "",
        "x": 460,
        "y": 80,
        "wires": [
            [
                "7f17ee13c0d25451"
            ]
        ]
    },
    {
        "id": "63359a949684ad68",
        "type": "function",
        "z": "f42119ca744f79bc",
        "name": "Select alarm cameras",
        "func": "const {\n  sensor_id,\n  sensor_name,\n  sensor_type\n} = msg.payload;\n\nconst sql_query = `\n  select connection_params_camera_id as frigate_camera_id\n  from security_alarm_camera_rules\n  where connection_type = 'frigate'\n`;\n\nconst params = {};\n\nreturn {\n  sensor_id,\n  sensor_name,\n  sensor_type,\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 80,
        "wires": [
            [
                "a5712de2502ee893"
            ]
        ]
    },
    {
        "id": "a5712de2502ee893",
        "type": "subflow:2f860c0929d372d8",
        "z": "f42119ca744f79bc",
        "name": "",
        "x": 1060,
        "y": 80,
        "wires": [
            [
                "94d6f1e8f3cb055f"
            ]
        ]
    },
    {
        "id": "828e93a513933ab6",
        "type": "subflow:7d49c71091189360",
        "z": "f42119ca744f79bc",
        "name": "",
        "x": 1480,
        "y": 80,
        "wires": []
    },
    {
        "id": "94d6f1e8f3cb055f",
        "type": "function",
        "z": "f42119ca744f79bc",
        "name": "Iterate over cameras",
        "func": "const {\n    sensor_id,\n    sensor_name,\n    sensor_type\n} = msg;\n\nconst payloads = msg.payload.map(({ frigate_camera_id }) => {\n    return {\n        payload: { \n            frigate_event: {\n                is_custom_event: true,\n                frigate_camera_id,\n                event_name: `sensor_trigger_${sensor_id}`,\n                body: {\n                    sub_label: `${sensor_name} (${sensor_type})`,\n                    duration: 120\n                }\n            }\n        }\n    }\n});\n\nreturn [ payloads ].filter(p => p.length > 0);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 80,
        "wires": [
            [
                "828e93a513933ab6"
            ]
        ]
    },
    {
        "id": "7f17ee13c0d25451",
        "type": "function",
        "z": "f42119ca744f79bc",
        "name": "Iterate over triggers",
        "func": "const payloads = msg.payload.map(({ sensor_id, sensor_name, sensor_type }) => {\n    return {\n        payload: {\n            sensor_id,\n            sensor_name,\n            sensor_type\n        }\n    }\n});\n\nreturn [ payloads ].filter(p => p.length > 0);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 80,
        "wires": [
            [
                "63359a949684ad68"
            ]
        ]
    },
    {
        "id": "53fe43181bd4b1f2",
        "type": "switch",
        "z": "5951c9b8d92c3224",
        "name": "Switch `message`",
        "property": "payload.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ON",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OFF",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 140,
        "wires": [
            [
                "75b28e1debc7d573"
            ],
            [
                "29983d5b3cc980e7"
            ]
        ]
    },
    {
        "id": "bc1c04bd41b5618d",
        "type": "function",
        "z": "5951c9b8d92c3224",
        "name": "Select `trigger_on_motion` cameras",
        "func": "const {\n  camera_id\n} = msg;\n\nconst sql_query = `\n  select connection_params_camera_id as frigate_camera_id\n  from security_alarm_camera_rules\n  where camera_id = :camera_id\n    and connection_type = 'frigate'\n    and trigger_on_motion = 1\n`;\n\nconst params = {\n  camera_id\n};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 100,
        "wires": [
            [
                "64f16159ae659a95",
                "dd571c69df2678c1"
            ]
        ]
    },
    {
        "id": "64f16159ae659a95",
        "type": "subflow:2f860c0929d372d8",
        "z": "5951c9b8d92c3224",
        "name": "",
        "x": 1400,
        "y": 100,
        "wires": [
            [
                "ad369b698163ace5",
                "5f3a8fec631f29d4"
            ]
        ]
    },
    {
        "id": "211a3b191940d79d",
        "type": "subflow:7d49c71091189360",
        "z": "5951c9b8d92c3224",
        "name": "",
        "x": 1820,
        "y": 100,
        "wires": []
    },
    {
        "id": "ad369b698163ace5",
        "type": "function",
        "z": "5951c9b8d92c3224",
        "name": "Iterate over cameras",
        "func": "const payloads = msg.payload.map(({ frigate_camera_id }) => {\n    return {\n        payload: {\n            frigate_event: {\n                is_custom_event: true,\n                frigate_camera_id,\n                event_name: 'motion',\n                body: {\n                    duration: 120\n                }\n            }\n        }\n    }\n});\n\nreturn [ payloads ].filter(p => p.length > 0);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 100,
        "wires": [
            [
                "211a3b191940d79d"
            ]
        ]
    },
    {
        "id": "75b28e1debc7d573",
        "type": "function",
        "z": "5951c9b8d92c3224",
        "name": "Set `motion_start_at`",
        "func": "const { device_id: camera_id } = msg.payload;\n\nconst alarm_state = global.get('alarm_state');\n\nconst current_timestamp = Math.floor(new Date().getTime());\n\nlet {\n    motion_start_at\n} = alarm_state;\n\nmotion_start_at ||= current_timestamp;\n\nconst new_alarm_state = {\n    ...alarm_state,\n    motion_start_at\n};\n\nglobal.set('alarm_state', new_alarm_state);\n\nreturn {\n    camera_id,\n    payload: new_alarm_state\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 100,
        "wires": [
            [
                "25b1e3fc7a65540b"
            ]
        ]
    },
    {
        "id": "29983d5b3cc980e7",
        "type": "function",
        "z": "5951c9b8d92c3224",
        "name": "Clear `motion_start_at`",
        "func": "const alarm_state = global.get('alarm_state');\n\nconst new_alarm_state = {\n    ...alarm_state,\n    motion_start_at: null\n};\n\nglobal.set('alarm_state', new_alarm_state);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "25b1e3fc7a65540b",
        "type": "delay",
        "z": "5951c9b8d92c3224",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 100,
        "wires": [
            [
                "106721c61d6e3c42",
                "b3ca810130ab3694"
            ]
        ]
    },
    {
        "id": "b3ca810130ab3694",
        "type": "switch",
        "z": "5951c9b8d92c3224",
        "name": "Check motion still occurring",
        "property": "payload.motion_start_at",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "alarm_state.motion_start_at",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 880,
        "y": 100,
        "wires": [
            [
                "bc1c04bd41b5618d",
                "3773c1e25d1cadcd"
            ]
        ]
    },
    {
        "id": "106721c61d6e3c42",
        "type": "debug",
        "z": "5951c9b8d92c3224",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 200,
        "wires": []
    },
    {
        "id": "3773c1e25d1cadcd",
        "type": "debug",
        "z": "5951c9b8d92c3224",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 360,
        "wires": []
    },
    {
        "id": "5f3a8fec631f29d4",
        "type": "debug",
        "z": "5951c9b8d92c3224",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 240,
        "wires": []
    },
    {
        "id": "dd571c69df2678c1",
        "type": "debug",
        "z": "5951c9b8d92c3224",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 280,
        "wires": []
    },
    {
        "id": "dc657bcce8ae5f97",
        "type": "switch",
        "z": "7f2caed3ae7db32d",
        "name": "Switch `message_type`",
        "property": "payload.message.message_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "event",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 240,
        "y": 80,
        "wires": [
            [
                "b700758d04a6b912"
            ]
        ]
    },
    {
        "id": "b700758d04a6b912",
        "type": "switch",
        "z": "7f2caed3ae7db32d",
        "name": "Switch `type`",
        "property": "payload.message.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "new",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 80,
        "wires": [
            [
                "b13a666adcacf981"
            ]
        ]
    },
    {
        "id": "b13a666adcacf981",
        "type": "function",
        "z": "7f2caed3ae7db32d",
        "name": "Select `trigger_on_detect` cameras",
        "func": "const {\n  device_id: camera_id\n} = msg.payload;\n\nconst sql_query = `\n  select 1\n  from security_alarm_camera_rules\n  where camera_id = :camera_id\n    and connection_type = 'frigate'\n    and trigger_on_detect = 1\n`;\n\nconst params = {\n  camera_id\n};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 80,
        "wires": [
            [
                "346c7573676e0443"
            ]
        ]
    },
    {
        "id": "346c7573676e0443",
        "type": "subflow:2f860c0929d372d8",
        "z": "7f2caed3ae7db32d",
        "name": "",
        "x": 900,
        "y": 80,
        "wires": [
            [
                "6e673116ff8f0d3c"
            ]
        ]
    },
    {
        "id": "bb24b941acda895a",
        "type": "subflow:7d49c71091189360",
        "z": "7f2caed3ae7db32d",
        "name": "",
        "x": 1320,
        "y": 80,
        "wires": []
    },
    {
        "id": "6e673116ff8f0d3c",
        "type": "function",
        "z": "7f2caed3ae7db32d",
        "name": "Iterate over cameras",
        "func": "const payloads = msg.payload.map(({ frigate_camera_id }) => {\n    return {\n        payload: {\n            frigate_event: {\n                frigate_camera_id,\n                event_name: 'detect'\n            }\n        }\n    }\n});\n\nreturn [ payloads ].filter(p => p.length > 0);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 80,
        "wires": [
            [
                "bb24b941acda895a"
            ]
        ]
    },
    {
        "id": "c2383a9fdbcbbbbd",
        "type": "function",
        "z": "955372658bf804f1",
        "name": "Select setting",
        "func": "const {\n  setting_key\n} = msg.payload;\n\nif(!setting_key) {\n  throw { type: 'invalid_request' };\n};\n\nconst sql_query = `\n  select value, type\n  from settings\n  where setting_key = :setting_key\n`;\n\nconst params = {\n  setting_key\n};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            [
                "898f52bfa36a405f"
            ]
        ]
    },
    {
        "id": "898f52bfa36a405f",
        "type": "subflow:2f860c0929d372d8",
        "z": "955372658bf804f1",
        "name": "",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "16f086e892d4aafb",
                "9832c2c69d182e89"
            ]
        ]
    },
    {
        "id": "16f086e892d4aafb",
        "type": "function",
        "z": "955372658bf804f1",
        "name": "Parse setting",
        "func": "const {\n  value,\n  type\n} = msg.payload[0];\n\nif(['boolean', 'json'].includes(type)) {\n  return {\n    payload: JSON.parse(value)\n  }\n} else {\n  return {\n    payload: value\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 80,
        "wires": [
            [
                "ba2394bc10822158"
            ]
        ]
    },
    {
        "id": "9832c2c69d182e89",
        "type": "debug",
        "z": "955372658bf804f1",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 160,
        "wires": []
    },
    {
        "id": "ba2394bc10822158",
        "type": "debug",
        "z": "955372658bf804f1",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 160,
        "wires": []
    },
    {
        "id": "31d947797f03b4bb",
        "type": "function",
        "z": "75ede1672068ab0f",
        "name": "Iterate over cameras",
        "func": "const payloads = msg.payload.map(({ frigate_camera_id }) => {\n    return {\n        payload: { frigate_camera_id }\n    }\n});\n\nreturn [ payloads ].filter(p => p.length > 0);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 100,
        "wires": [
            [
                "c362d1861a4a80d5"
            ]
        ]
    },
    {
        "id": "c362d1861a4a80d5",
        "type": "subflow:f93e3d154617f1c6",
        "z": "75ede1672068ab0f",
        "name": "",
        "x": 910,
        "y": 100,
        "wires": []
    },
    {
        "id": "ca7792ec74ddb5dc",
        "type": "function",
        "z": "75ede1672068ab0f",
        "name": "Select `arm_on` trigger cameras",
        "func": "const sql_query = `\n  select connection_params_camera_id as frigate_camera_id\n  from security_alarm_camera_rules\n  where arm_on = 'trigger'\n`;\n\nconst params = {};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "90ae49bb46d74766"
            ]
        ]
    },
    {
        "id": "90ae49bb46d74766",
        "type": "subflow:2f860c0929d372d8",
        "z": "75ede1672068ab0f",
        "name": "",
        "x": 480,
        "y": 100,
        "wires": [
            [
                "31d947797f03b4bb"
            ]
        ]
    },
    {
        "id": "5a25578b4609fa7d",
        "type": "function",
        "z": "e52b3bb6fb08cd68",
        "name": "Iterate over cameras",
        "func": "const payloads = msg.payload.map(({ frigate_camera_id }) => {\n    return {\n        payload: { frigate_camera_id }\n    }\n});\n\nreturn [ payloads ].filter(p => p.length > 0);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 80,
        "wires": [
            [
                "c941376d939769e8"
            ]
        ]
    },
    {
        "id": "c941376d939769e8",
        "type": "subflow:f93e3d154617f1c6",
        "z": "e52b3bb6fb08cd68",
        "name": "",
        "x": 950,
        "y": 80,
        "wires": []
    },
    {
        "id": "e982076e6930c9c2",
        "type": "function",
        "z": "e52b3bb6fb08cd68",
        "name": "Select `alarm_on` trigger cameras",
        "func": "const sql_query = `\n  select connection_params_camera_id as frigate_camera_id\n  from security_alarm_camera_rules\n  where arm_on = 'alarm_on'\n`;\n\nconst params = {};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 80,
        "wires": [
            [
                "949a37cf5b503260"
            ]
        ]
    },
    {
        "id": "949a37cf5b503260",
        "type": "subflow:2f860c0929d372d8",
        "z": "e52b3bb6fb08cd68",
        "name": "",
        "x": 520,
        "y": 80,
        "wires": [
            [
                "5a25578b4609fa7d"
            ]
        ]
    },
    {
        "id": "d93ad76dcd020cdd",
        "type": "function",
        "z": "4fec160c96cbd7e5",
        "name": "Update `tunnel_token`",
        "func": "const { tunnel_token } = msg.payload.value;\n\nconst secrets_folder = '/secrets/cloudflare';\nconst tunnel_token_path = `${secrets_folder}/tunnel_token`;\n\nconst commands = [\n    `mkdir -p ${secrets_folder}`,\n    `echo ${tunnel_token} > ${tunnel_token_path}`\n];\n\nconst payload = commands.join(' && ');\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 100,
        "wires": [
            [
                "d995ea3068d6b6eb"
            ]
        ]
    },
    {
        "id": "d995ea3068d6b6eb",
        "type": "exec",
        "z": "4fec160c96cbd7e5",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 430,
        "y": 100,
        "wires": [
            [
                "3e5966214e9aa383"
            ],
            [],
            []
        ]
    },
    {
        "id": "3e5966214e9aa383",
        "type": "function",
        "z": "4fec160c96cbd7e5",
        "name": "Get `cloudflared-tunnel` container",
        "func": "return {\n    ...msg,\n    payload: {\n        service_name: 'cloudflared-tunnel'\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 80,
        "wires": [
            [
                "b537e0ca9e479866"
            ]
        ]
    },
    {
        "id": "b537e0ca9e479866",
        "type": "subflow:7b9d1f6f5864ccce",
        "z": "4fec160c96cbd7e5",
        "name": "",
        "x": 950,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ceecc1d5bd98370a",
        "type": "function",
        "z": "0c36da2ded227873",
        "name": "Get `nextcloud_host` settings",
        "func": "const credentials = msg.payload.value || {};\n\nconst sql_query = `\n  select value\n  from settings\n  where setting_key = 'nextcloud_host'\n`;\n\nreturn {\n    ...msg,\n    credentials,\n    payload: { sql_query }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 100,
        "wires": [
            [
                "96ad150d7efb64aa"
            ]
        ]
    },
    {
        "id": "96ad150d7efb64aa",
        "type": "subflow:2f860c0929d372d8",
        "z": "0c36da2ded227873",
        "name": "",
        "x": 480,
        "y": 100,
        "wires": [
            [
                "20af527216db7942"
            ]
        ]
    },
    {
        "id": "20af527216db7942",
        "type": "function",
        "z": "0c36da2ded227873",
        "name": "Update secrets",
        "func": "const {\n    username,\n    password\n} = msg.credentials;\n\nconst {\n    value: host\n} = msg.payload[0];\n\nconst secrets_folder = '/secrets/nextcloud';\nconst host_path = `${secrets_folder}/nextcloud_host`;\nconst username_path = `${secrets_folder}/nextcloud_username`;\nconst password_path = `${secrets_folder}/nextcloud_password`;\n\nconst commands = [\n    `mkdir -p ${secrets_folder}`,\n    ...host ? [ `echo ${host} > ${host_path}` ] : [],\n    ...username ? [ `echo ${username} > ${username_path}` ] : [],\n    ...password ? [ `echo ${password} > ${password_path}` ] : []\n];\n\nconst payload = commands.join(' && ');\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 100,
        "wires": [
            [
                "f023052e4ca0d74d"
            ]
        ]
    },
    {
        "id": "f023052e4ca0d74d",
        "type": "exec",
        "z": "0c36da2ded227873",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 810,
        "y": 100,
        "wires": [
            [
                "b2785d8a44b406e3"
            ],
            [],
            []
        ]
    },
    {
        "id": "b2785d8a44b406e3",
        "type": "function",
        "z": "0c36da2ded227873",
        "name": "Get `nextcloud-client` container",
        "func": "return {\n    ...msg,\n    payload: {\n        service_name: 'nextcloud-client'\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 80,
        "wires": [
            [
                "65d89ecbaaad73d9"
            ]
        ]
    },
    {
        "id": "65d89ecbaaad73d9",
        "type": "subflow:7b9d1f6f5864ccce",
        "z": "0c36da2ded227873",
        "name": "",
        "x": 1290,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f7a70eb3ee7a6e7c",
        "type": "subflow:48376301d7cf8ab5",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "5454baccb3adcf75"
            ]
        ]
    },
    {
        "id": "0a1d29608ba1f9c3",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/relays/state`",
        "url": "api/v1/relays/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "f7a70eb3ee7a6e7c"
            ]
        ]
    },
    {
        "id": "5454baccb3adcf75",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 600,
        "y": 100,
        "wires": []
    },
    {
        "id": "f6fe2ecb7716291c",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/gps/state`",
        "url": "api/v1/gps/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 300,
        "wires": [
            [
                "6ccf70ed017a483e"
            ]
        ]
    },
    {
        "id": "6ccf70ed017a483e",
        "type": "subflow:cd03e8b953118d1f",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 360,
        "y": 300,
        "wires": [
            [
                "db72e358f763ea55"
            ]
        ]
    },
    {
        "id": "db72e358f763ea55",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 520,
        "y": 300,
        "wires": []
    },
    {
        "id": "0f0bba26d386cac0",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "POST `api/v1/relays/state`",
        "url": "api/v1/relays/state",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "1fdbc5f6e83fb59b"
            ]
        ]
    },
    {
        "id": "03af40a681e75b74",
        "type": "subflow:3ee3b10c02a9dae4",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 570,
        "y": 140,
        "wires": [
            [
                "41da5c626064985a",
                "d2b6ec5847fe44ee"
            ]
        ]
    },
    {
        "id": "1fdbc5f6e83fb59b",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Parse request",
        "func": "const payload = msg.req.body;\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "03af40a681e75b74"
            ]
        ]
    },
    {
        "id": "7d50cc6af9fcf19b",
        "type": "subflow:b3276c87a286f102",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 400,
        "y": 380,
        "wires": [
            [
                "188a549a1f51eeb4"
            ]
        ]
    },
    {
        "id": "2c1d6d5eda93c0da",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/usb_devices`",
        "url": "api/v1/usb_devices",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "7d50cc6af9fcf19b"
            ]
        ]
    },
    {
        "id": "188a549a1f51eeb4",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 580,
        "y": 380,
        "wires": []
    },
    {
        "id": "41da5c626064985a",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 780,
        "y": 120,
        "wires": []
    },
    {
        "id": "7beb665f89ba6397",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/temperature_sensors/state`",
        "url": "api/v1/temperature_sensors/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 220,
        "wires": [
            [
                "6d491cd23c82b12a"
            ]
        ]
    },
    {
        "id": "1beaa2df69f1f2f6",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 760,
        "y": 220,
        "wires": []
    },
    {
        "id": "6d491cd23c82b12a",
        "type": "subflow:1fcb65ecb479780e",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 530,
        "y": 220,
        "wires": [
            [
                "1beaa2df69f1f2f6"
            ]
        ]
    },
    {
        "id": "9d18bcda6a2e63be",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "PUT `api/v1/settings/:setting_key`",
        "url": "api/v1/settings/:setting_key",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 800,
        "wires": [
            [
                "b803672cf71ec8e9"
            ]
        ]
    },
    {
        "id": "31a5ed7eed82404a",
        "type": "subflow:e0baa17c5072b7d3",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 1370,
        "y": 720,
        "wires": [
            [
                "1f97e6fba379a917"
            ]
        ]
    },
    {
        "id": "a8316479d2c8618f",
        "type": "switch",
        "z": "181d977a8b81274c",
        "name": "Switch `setting_key`",
        "property": "req.params.setting_key",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "gpsd_usb_device",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "zigbee_usb_device",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nextcloud_host",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1100,
        "y": 780,
        "wires": [
            [
                "31a5ed7eed82404a"
            ],
            [
                "b584c6951067cf9d"
            ],
            [
                "0a46fbe81e9fd8ab"
            ],
            [
                "fd627450ae8b6d74"
            ]
        ]
    },
    {
        "id": "b803672cf71ec8e9",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Compose update query",
        "func": "const { setting_key } = msg.req.params;\n\nconst {\n    label,\n    value\n} = msg.payload;\n\nconst sql_query = `\n  update settings \n    set \n      label = :label,\n      value = :value\n  where setting_key = :setting_key\n`;\n\nconst params = {\n    label,\n    value,\n    setting_key\n};\n\nreturn {\n    ...msg,\n    payload: {\n        sql_query,\n        params\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 800,
        "wires": [
            [
                "77840cd1f12c0fdc"
            ]
        ]
    },
    {
        "id": "77840cd1f12c0fdc",
        "type": "subflow:2f860c0929d372d8",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 660,
        "y": 800,
        "wires": [
            [
                "f1ec4f73fe87f228"
            ]
        ]
    },
    {
        "id": "b1498895bc9d6bb5",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 2560,
        "y": 720,
        "wires": []
    },
    {
        "id": "b584c6951067cf9d",
        "type": "subflow:e0baa17c5072b7d3",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 1370,
        "y": 760,
        "wires": [
            [
                "a71b394d9bd662e8"
            ]
        ]
    },
    {
        "id": "a71b394d9bd662e8",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Get `zigbee2mqtt` container",
        "func": "return {\n    ...msg,\n    payload: {\n        service_name: 'zigbee2mqtt'\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 760,
        "wires": [
            [
                "0c6c5ed7d8d9e1c1"
            ]
        ]
    },
    {
        "id": "0c6c5ed7d8d9e1c1",
        "type": "subflow:7b9d1f6f5864ccce",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 1870,
        "y": 760,
        "wires": [
            [
                "bbb923b1ade37476"
            ]
        ]
    },
    {
        "id": "bbb923b1ade37476",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 2060,
        "y": 760,
        "wires": []
    },
    {
        "id": "fd627450ae8b6d74",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1320,
        "y": 860,
        "wires": []
    },
    {
        "id": "1f97e6fba379a917",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Get `gpsd` container",
        "func": "return {\n    ...msg,\n    payload: {\n        service_name: 'gpsd'\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 720,
        "wires": [
            [
                "0c51548a484b88fc"
            ]
        ]
    },
    {
        "id": "0c51548a484b88fc",
        "type": "subflow:7b9d1f6f5864ccce",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 1830,
        "y": 720,
        "wires": [
            [
                "f6e6fbb00c336018"
            ]
        ]
    },
    {
        "id": "f6e6fbb00c336018",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Get `nomadpi-gpsd-to-mqtt` container",
        "func": "return {\n    ...msg,\n    payload: {\n        service_name: 'nomadpi-gpsd-to-mqtt'\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 720,
        "wires": [
            [
                "5e73a49120a369b5"
            ]
        ]
    },
    {
        "id": "5e73a49120a369b5",
        "type": "subflow:7b9d1f6f5864ccce",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 2370,
        "y": 720,
        "wires": [
            [
                "b1498895bc9d6bb5"
            ]
        ]
    },
    {
        "id": "14124682afec4cd3",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "POST `api/v1/mqtt_hub/restart`",
        "url": "api/v1/mqtt_hub/restart",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "83e16f70b82fb8a3"
            ]
        ]
    },
    {
        "id": "83e16f70b82fb8a3",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Get `nomadpi-mqtt-hub` container",
        "func": "return {\n    ...msg,\n    payload: {\n        service_name: 'nomadpi-mqtt-hub'\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1080,
        "wires": [
            [
                "af5125a4b90f941b"
            ]
        ]
    },
    {
        "id": "af5125a4b90f941b",
        "type": "subflow:7b9d1f6f5864ccce",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 730,
        "y": 1080,
        "wires": [
            [
                "aef8160a036e3305"
            ]
        ]
    },
    {
        "id": "aef8160a036e3305",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 920,
        "y": 1080,
        "wires": []
    },
    {
        "id": "f1ec4f73fe87f228",
        "type": "switch",
        "z": "181d977a8b81274c",
        "name": "`value` is present",
        "property": "req.body.value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 800,
        "wires": [
            [
                "a8316479d2c8618f"
            ],
            [
                "fd627450ae8b6d74"
            ]
        ]
    },
    {
        "id": "9856d72277173c8f",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/batteries/state`",
        "url": "api/v1/batteries/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 460,
        "wires": [
            [
                "91246a9c0dd82595"
            ]
        ]
    },
    {
        "id": "5755b80a585e4300",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 620,
        "y": 460,
        "wires": []
    },
    {
        "id": "91246a9c0dd82595",
        "type": "subflow:5dcda338317c7a86",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 420,
        "y": 460,
        "wires": [
            [
                "5755b80a585e4300"
            ]
        ]
    },
    {
        "id": "d0ced5f43dc06004",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/water_tanks/state`",
        "url": "api/v1/water_tanks/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "de27efdc58d58d86"
            ]
        ]
    },
    {
        "id": "2289330a7767a2fb",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 700,
        "y": 580,
        "wires": []
    },
    {
        "id": "de27efdc58d58d86",
        "type": "subflow:d6bd8ca48ade8d7d",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 480,
        "y": 580,
        "wires": [
            [
                "2289330a7767a2fb"
            ]
        ]
    },
    {
        "id": "80b2481a7c9a63aa",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/solar_charge_controllers/state`",
        "url": "api/v1/solar_charge_controllers/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 520,
        "wires": [
            [
                "b9192ec4f79793ea"
            ]
        ]
    },
    {
        "id": "3a1d9bfa729fcfd0",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 920,
        "y": 520,
        "wires": []
    },
    {
        "id": "b9192ec4f79793ea",
        "type": "subflow:8b0e71f3c152c02a",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 620,
        "y": 520,
        "wires": [
            [
                "3a1d9bfa729fcfd0"
            ]
        ]
    },
    {
        "id": "e399feac322ff350",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/alarm/state`",
        "url": "api/v1/alarm/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "9e4289950796820a"
            ]
        ]
    },
    {
        "id": "6f94708bf4108fca",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 580,
        "y": 640,
        "wires": []
    },
    {
        "id": "9e4289950796820a",
        "type": "subflow:933ed9d2e03018bd",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 400,
        "y": 640,
        "wires": [
            [
                "6f94708bf4108fca"
            ]
        ]
    },
    {
        "id": "0119d8a37bbfd225",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "POST `api/v1/alarm/state`",
        "url": "api/v1/alarm/state",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 700,
        "wires": [
            [
                "0358aa21eb9e3241"
            ]
        ]
    },
    {
        "id": "65515bff97f67987",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 590,
        "y": 680,
        "wires": []
    },
    {
        "id": "0358aa21eb9e3241",
        "type": "subflow:d02cbdb9b9ab0598",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 400,
        "y": 700,
        "wires": [
            [
                "65515bff97f67987",
                "8930b4f5a072e877"
            ]
        ]
    },
    {
        "id": "27abaf223e1705e5",
        "type": "websocket out",
        "z": "181d977a8b81274c",
        "name": "",
        "server": "83c62c0e144839bf",
        "client": "",
        "x": 1080,
        "y": 160,
        "wires": []
    },
    {
        "id": "d2b6ec5847fe44ee",
        "type": "subflow:48376301d7cf8ab5",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 830,
        "y": 160,
        "wires": [
            [
                "27abaf223e1705e5"
            ]
        ]
    },
    {
        "id": "8930b4f5a072e877",
        "type": "subflow:933ed9d2e03018bd",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 630,
        "y": 720,
        "wires": [
            [
                "e29687ea11260ff9"
            ]
        ]
    },
    {
        "id": "e29687ea11260ff9",
        "type": "websocket out",
        "z": "181d977a8b81274c",
        "name": "",
        "server": "fc9284fab0ccd3c2",
        "client": "",
        "x": 870,
        "y": 720,
        "wires": []
    },
    {
        "id": "fc70ba6a396464e2",
        "type": "subflow:924d506d524e2f1f",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 320,
        "y": 1160,
        "wires": [
            [
                "462c2e06190b2ff0"
            ]
        ]
    },
    {
        "id": "462c2e06190b2ff0",
        "type": "websocket out",
        "z": "181d977a8b81274c",
        "name": "",
        "server": "92b926f12b45fcac",
        "client": "",
        "x": 530,
        "y": 1160,
        "wires": []
    },
    {
        "id": "03e0c09948d61e60",
        "type": "mqtt in",
        "z": "181d977a8b81274c",
        "name": "",
        "topic": "nomadpi/gps_values",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 1160,
        "wires": [
            [
                "fc70ba6a396464e2"
            ]
        ]
    },
    {
        "id": "d60f4e20ad50f81c",
        "type": "subflow:d6bd8ca48ade8d7d",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 420,
        "y": 1260,
        "wires": [
            [
                "e218da2ba88517ef"
            ]
        ]
    },
    {
        "id": "7f8431caf9880877",
        "type": "subflow:5dcda338317c7a86",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 400,
        "y": 1300,
        "wires": [
            [
                "5872c574cfc09f93"
            ]
        ]
    },
    {
        "id": "ee3ea2aac1513ca6",
        "type": "subflow:8b0e71f3c152c02a",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 500,
        "y": 1340,
        "wires": [
            [
                "b48de6650aed6176"
            ]
        ]
    },
    {
        "id": "f4527378483695f3",
        "type": "subflow:1fcb65ecb479780e",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 430,
        "y": 1380,
        "wires": [
            [
                "edff70dacabc6a45"
            ]
        ]
    },
    {
        "id": "4ff5b9ccbb7b5742",
        "type": "inject",
        "z": "181d977a8b81274c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1320,
        "wires": [
            [
                "d60f4e20ad50f81c",
                "7f8431caf9880877",
                "ee3ea2aac1513ca6",
                "f4527378483695f3"
            ]
        ]
    },
    {
        "id": "e218da2ba88517ef",
        "type": "websocket out",
        "z": "181d977a8b81274c",
        "name": "",
        "server": "f603d6ef41b5d8a2",
        "client": "",
        "x": 720,
        "y": 1260,
        "wires": []
    },
    {
        "id": "5872c574cfc09f93",
        "type": "websocket out",
        "z": "181d977a8b81274c",
        "name": "",
        "server": "4be285fb0888be8c",
        "client": "",
        "x": 670,
        "y": 1300,
        "wires": []
    },
    {
        "id": "b48de6650aed6176",
        "type": "websocket out",
        "z": "181d977a8b81274c",
        "name": "",
        "server": "13d475413da9bf60",
        "client": "",
        "x": 920,
        "y": 1340,
        "wires": []
    },
    {
        "id": "edff70dacabc6a45",
        "type": "websocket out",
        "z": "181d977a8b81274c",
        "name": "",
        "server": "867e54e0ead62a12",
        "client": "",
        "x": 770,
        "y": 1380,
        "wires": []
    },
    {
        "id": "9e8c97920d79ba94",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "POST `api/v1/credentials/:service_id/refresh`",
        "url": "api/v1/credentials/:service_id/refresh",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 1000,
        "wires": [
            [
                "75b6073f8d582290"
            ]
        ]
    },
    {
        "id": "75b6073f8d582290",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Get decrypted credentials",
        "func": "const { service_id } = msg.req.params;\n\nconst servicesApiRootUrl = env.get('SERVICES_API_ROOT_URL');\nconst url = `${servicesApiRootUrl}/credentials/service/${service_id}`;\n\nreturn {\n    ...msg,\n    url\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1000,
        "wires": [
            [
                "3c895e408ff3f169"
            ]
        ]
    },
    {
        "id": "a87c6df21607e27f",
        "type": "switch",
        "z": "181d977a8b81274c",
        "name": "`value` is present",
        "property": "payload.value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 1000,
        "wires": [
            [
                "113cacd9759f8f4d"
            ],
            [
                "a95ab9389c4ffe94"
            ]
        ]
    },
    {
        "id": "113cacd9759f8f4d",
        "type": "switch",
        "z": "181d977a8b81274c",
        "name": "Switch `service_id`",
        "property": "req.params.service_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "cloudflare",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nextcloud",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1290,
        "y": 980,
        "wires": [
            [
                "95fcdb95a3b21721"
            ],
            [
                "48929a26820ea96e"
            ],
            [
                "a95ab9389c4ffe94"
            ]
        ]
    },
    {
        "id": "a95ab9389c4ffe94",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1500,
        "y": 1040,
        "wires": []
    },
    {
        "id": "55d628b99823c59b",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1600,
        "y": 800,
        "wires": []
    },
    {
        "id": "3c895e408ff3f169",
        "type": "http request",
        "z": "181d977a8b81274c",
        "name": "Call services API",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 1000,
        "wires": [
            [
                "236ba30f4817b864"
            ]
        ]
    },
    {
        "id": "236ba30f4817b864",
        "type": "json",
        "z": "181d977a8b81274c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 910,
        "y": 1000,
        "wires": [
            [
                "a87c6df21607e27f"
            ]
        ]
    },
    {
        "id": "01b091c88ee9b5f8",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1760,
        "y": 920,
        "wires": []
    },
    {
        "id": "95fcdb95a3b21721",
        "type": "subflow:4fec160c96cbd7e5",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 1550,
        "y": 920,
        "wires": [
            [
                "01b091c88ee9b5f8"
            ]
        ]
    },
    {
        "id": "48929a26820ea96e",
        "type": "subflow:0c36da2ded227873",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 1550,
        "y": 980,
        "wires": [
            [
                "f20b3f6c4cac038e"
            ]
        ]
    },
    {
        "id": "f20b3f6c4cac038e",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1760,
        "y": 980,
        "wires": []
    },
    {
        "id": "0a46fbe81e9fd8ab",
        "type": "subflow:0c36da2ded227873",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 1390,
        "y": 800,
        "wires": [
            [
                "55d628b99823c59b"
            ]
        ]
    },
    {
        "id": "3a52cb55cca413c8",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "Get all heaters",
        "func": "const { payload: temperature_state } = msg;\n\nconst sql_query = `\n  select\n    id,\n    name,\n    vendor_id,\n    product_id,\n    connection_type,\n    connection_params,\n    heater_settings\n  from heaters\n`;\n\nconst params = {};\n\nreturn {\n    ...msg,\n    temperature_state,\n    payload: {\n        sql_query,\n        params\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 140,
        "wires": [
            [
                "996c47082a073b2b"
            ]
        ]
    },
    {
        "id": "996c47082a073b2b",
        "type": "subflow:2f860c0929d372d8",
        "z": "2ec629db0b2d93d1",
        "name": "",
        "x": 1180,
        "y": 140,
        "wires": [
            [
                "c23f742bd21fe365"
            ]
        ]
    },
    {
        "id": "a6f2375ccd46a632",
        "type": "inject",
        "z": "2ec629db0b2d93d1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "48936a6d8c97a199"
            ]
        ]
    },
    {
        "id": "c23f742bd21fe365",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "Iterate over heaters",
        "func": "const {\n    gps_state,\n    heaters_state,\n    temperature_state,\n    payload\n} = msg;\n\nconst payloads = payload.map(heater => {\n    const {\n        id,\n        name,\n        vendor_id,\n        product_id,\n        connection_type,\n        connection_params: raw_connection_params,\n        heater_settings: raw_heater_settings\n    } = heater;\n\n    const connection_params = JSON.parse(raw_connection_params);\n    const heater_settings = JSON.parse(raw_heater_settings);\n\n    return {\n        gps_state,\n        heaters_state,\n        temperature_state,\n        payload: {\n            id,\n            name,\n            vendor_id,\n            product_id,\n            connection_type,\n            connection_params,\n            heater_settings\n        }\n    }\n});\n\nreturn [ payloads ];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 140,
        "wires": [
            [
                "c4b374a208e05146"
            ]
        ]
    },
    {
        "id": "63179f4835ad06a0",
        "type": "switch",
        "z": "2ec629db0b2d93d1",
        "name": "Switch `vendor_id`",
        "property": "heater.vendor_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "webasto",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2010,
        "y": 140,
        "wires": [
            [
                "c5904f88f5c02390"
            ]
        ]
    },
    {
        "id": "c5904f88f5c02390",
        "type": "switch",
        "z": "2ec629db0b2d93d1",
        "name": "Switch `product_id`",
        "property": "heater.product_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "thermo_top_evo_5",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2210,
        "y": 140,
        "wires": [
            [
                "cdccdcc93c55ec6a",
                "5655503ad0fafdb8"
            ]
        ]
    },
    {
        "id": "d5e06aaea82d3b2a",
        "type": "switch",
        "z": "2ec629db0b2d93d1",
        "name": "Switch `connection_type`",
        "property": "heater.connection_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "usb",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1790,
        "y": 140,
        "wires": [
            [
                "63179f4835ad06a0"
            ]
        ]
    },
    {
        "id": "c4b374a208e05146",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "Infer desired state",
        "func": "const {\n    payload: heater,\n    temperature_state,\n    gps_state={}\n} = msg;\n\nconst {\n    id: heater_id,\n    heater_settings={}\n} = heater;\n\nconst { thermostat } = heater_settings;\n\nif(!thermostat) throw heater_settings;\n\nconst {\n    mode,\n    timer_from,\n    timer_to,\n    target_temperature,\n    temperature_sensor_id\n} = thermostat;\n\nconst on_temperature = target_temperature - 3;\nconst off_temperature = target_temperature + 2;\n\nconst {\n    temperature\n} = temperature_state[temperature_sensor_id];\n\nlet desired_state;\n\nif(temperature >= off_temperature || mode === 'off') {\n    desired_state = 'off';\n} else if(temperature <= on_temperature && mode === 'on') {\n    desired_state = 'on';\n} else if(mode === 'timer') {\n    const {\n        latitude,\n        longitude\n    } = gps_state;\n\n    let timezone = 'UTC';\n    if(latitude !== undefined) {\n        timezone = geoTz.find(latitude, longitude);\n    };\n\n    const start_date = new Date();\n    start_date.setHours(parseInt(timer_from.split(':')[0]));\n    start_date.setMinutes(parseInt(timer_from.split(':')[1]));\n\n    const end_date = new Date();\n    end_date.setHours(parseInt(timer_to.split(':')[0]));\n    end_date.setMinutes(parseInt(timer_to.split(':')[1]));\n\n    const current_time_string = new Date().toLocaleString('en-US', { timeZone: timezone });\n    const current_time = new Date(current_time_string);\n\n    let is_within_timeframe;\n    if (end_date < start_date) {\n        is_within_timeframe = current_time >= start_date || current_time <= end_date;\n    } else {\n        is_within_timeframe = current_time >= start_date && current_time <= end_date;\n    }\n    \n    if(!is_within_timeframe) {\n        desired_state = 'off'\n    } else if(temperature <= on_temperature) {\n        desired_state = 'on'\n    }\n};\n\nif(desired_state) {\n    return {\n        ...msg,\n        heater,\n        payload: desired_state\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "geoTz",
                "module": "geo-tz"
            }
        ],
        "x": 1570,
        "y": 140,
        "wires": [
            [
                "d5e06aaea82d3b2a",
                "f471a2e9de0b145a"
            ]
        ]
    },
    {
        "id": "e32c26a44cc7ad68",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "Get `global.heaters_state`",
        "func": "const { payload: gps_state } = msg;\n\nconst heaters_state = global.get('heaters_state') || {};\n\nreturn {\n    ...msg,\n    gps_state,\n    heaters_state\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 140,
        "wires": [
            [
                "9fa434c666dc1788"
            ]
        ]
    },
    {
        "id": "9fa434c666dc1788",
        "type": "subflow:1fcb65ecb479780e",
        "z": "2ec629db0b2d93d1",
        "name": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "3a52cb55cca413c8"
            ]
        ]
    },
    {
        "id": "48936a6d8c97a199",
        "type": "subflow:cd03e8b953118d1f",
        "z": "2ec629db0b2d93d1",
        "name": "",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "e32c26a44cc7ad68"
            ]
        ]
    },
    {
        "id": "f471a2e9de0b145a",
        "type": "debug",
        "z": "2ec629db0b2d93d1",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 280,
        "wires": []
    },
    {
        "id": "cdccdcc93c55ec6a",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "Compose command",
        "func": "const {\n    heaters_state,\n    heater,\n    payload\n} = msg;\n\nconst { status } = heaters_state[heater.id] || '';\n\nlet buffer;\nif(payload === 'off') {\n    if(status !== 'off') {\n        buffer = Buffer.from([\n            0xF4,\n            0x02,\n            0x10,\n            0xE6\n        ]);\n    }\n} else if(payload === 'on') {\n    if(status === 'on') {\n        // Keep-alive\n        buffer = Buffer.from([\n            0xF4,\n            0x04,\n            0x44,\n            0x21,\n            0x00,\n            0x95\n        ]);\n    } else {\n        // Start heating\n        buffer = Buffer.from([\n            0xF4,\n            0x03,\n            0x21,\n            0x3B,\n            0xED\n        ]);\n    }\n};\n\nglobal.set(\n    'heaters_state',\n    {\n        ...heaters_state,\n        [heater.id]: { status: payload }\n    }\n);\n\nif(buffer !== undefined) {\n    return {\n        payload: buffer\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 140,
        "wires": [
            [
                "0d4f67823f791a4c",
                "610b1761c204c9ab"
            ]
        ]
    },
    {
        "id": "0d4f67823f791a4c",
        "type": "debug",
        "z": "2ec629db0b2d93d1",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2680,
        "y": 300,
        "wires": []
    },
    {
        "id": "5655503ad0fafdb8",
        "type": "debug",
        "z": "2ec629db0b2d93d1",
        "name": "debug 44",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 320,
        "wires": []
    },
    {
        "id": "97ea1bff45fccec3",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "abfrage 50-05 sensoren1",
        "func": "const buf = Buffer.from([\n 0xF4,\n 0x03,\n 0x50,\n 0x05,\n 0xA2\n]);\n\nmsg.payload = buf;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "8cd6d42ef6a39efa",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "standheizen 1h",
        "func": "const buf = Buffer.from([\n 0xF4,\n 0x03,\n 0x21,\n 0x3B,\n 0xED\n]);\n\nmsg.payload = buf;\n\nreturn msg;\n\n\n//0xf4\",\"0x03\",\"0x23\",\"0x3b\",\"0xef - zuheizen \n\n//0xf4\",\"0x03\",\"0x21\",\"0x3b\",\"0xed  - standheizen",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2380,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e1aa4cfc872abf8b",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "stop befehl",
        "func": "const buf = Buffer.from([\n 0xF4,\n 0x02,\n 0x10,\n 0xe6\n]);\n\nmsg.payload = buf;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "466bb3daf3af9ff6",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "abfrage 50-07 status",
        "func": "const buf = Buffer.from([\n 0xF4,\n 0x03,\n 0x50,\n 0x07,\n 0xa0\n]);\n\nmsg.payload = buf;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2360,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "193bf8337e33d4a9",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "error abfrage",
        "func": "const buf = Buffer.from([\n 0xF4,\n 0x03,\n 0x56,\n 0x01,\n 0xa0\n]);\n\nmsg.payload = buf;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "80e645ff2e96d5e7",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "keep alive befehl 21",
        "func": "const buf = Buffer.from([\n 0xF4,\n 0x04,\n 0x44,\n 0x21,\n 0x00,\n 0x95\n]);\n\nmsg.payload = buf;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2360,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "26de02805397832f",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "abfrage 50-15 sensoren2",
        "func": "const buf = Buffer.from([\n 0xF4,\n 0x03,\n 0x50,\n 0x0f,\n 0xa8\n]);\n\nmsg.payload = buf;\n\nreturn msg;\n\n//    f4 03 50 0f a8                                    ô.P.¨            \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "9c580ea5b1659531",
        "type": "inject",
        "z": "2ec629db0b2d93d1",
        "name": "Start Standheizen 60min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "[\"0xf4\",\"0x03\",\"0x21\",\"0x3b\",\"0xed\"] ",
                "vt": "bin"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"0xf4\",\"0x03\",\"0x21\",\"0x3b\",\"0xed\"] ",
        "payloadType": "bin",
        "x": 2350,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "f0eabd34d92c8521",
        "type": "inject",
        "z": "2ec629db0b2d93d1",
        "name": "Stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"f4\",\"02\",\"10\",\"E6\"]",
        "payloadType": "bin",
        "x": 2410,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "0b692cb9261fe89b",
        "type": "inject",
        "z": "2ec629db0b2d93d1",
        "name": "Stand zuheizen 60min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"0xf4\",\"0x03\",\"0x23\",\"0x3b\",\"0xef\"]",
        "payloadType": "bin",
        "x": 2360,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "0cb0f9270656680f",
        "type": "comment",
        "z": "2ec629db0b2d93d1",
        "name": "Debug",
        "info": "",
        "x": 2390,
        "y": 780,
        "wires": []
    },
    {
        "id": "610b1761c204c9ab",
        "type": "serial out",
        "z": "2ec629db0b2d93d1",
        "name": "Send request",
        "serial": "adad033320ce05a2",
        "x": 2640,
        "y": 140,
        "wires": []
    },
    {
        "id": "02f49c953d0b19eb",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "Compose command",
        "func": "return {\n    payload: Buffer.from([\n        // 0xF4,\n        // 0x03,\n        // 0xA1,\n        // 0x3C,\n        // 0xD1\n\n        0x4F, 0x37, 0xD0, 0x30, 0x1E, 0x25, 0xD0, 0x5A, 0x00, 0x1E, 0x39, 0x33, 0x6C, 0x03, 0x00, 0x01, 0x03, 0x04, 0x00, 0x02, 0x00, 0x58, 0x00, 0x23, 0x0B, 0x59, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x01, 0x15, 0x7F, 0x13, 0x03, 0xD9, 0x34, 0x04, 0x6A, 0x24, 0x00, 0x2C, 0x00, 0x12, 0xC8, 0x11, 0x13, 0x88, 0x0C, 0x68, 0x51, 0x00, 0x00, 0x00, 0xCD\n    ])\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 420,
        "wires": [
            [
                "262a2291b599550a"
            ]
        ]
    },
    {
        "id": "6520982aa69ff9eb",
        "type": "inject",
        "z": "2ec629db0b2d93d1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "02f49c953d0b19eb"
            ]
        ]
    },
    {
        "id": "262a2291b599550a",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "Parse payload",
        "func": "const { payload } = msg;\n\nconst command = payload[2] - 0x80;\n\nlet parsed_payload;\nif(command) {\n    const command_hex = command.toString(16);\n    if(command_hex === '21') {\n        // Turn on answer\n        parsed_payload = {\n            status: 'on'\n        }\n    } else if(command_hex === '44') {\n        // Keep-alive answer\n        parsed_payload = {\n            status: 'on'\n        }\n    } else if(command_hex === '10') {\n        // Turn off answer\n        parsed_payload = {\n            status: 'off'\n        }\n    } else if(command_hex === '50') {\n        // Status answer\n        const response_hex = payload[1].toString(16);\n        if(response_hex === '1c') {\n            const [\n                pump_percent,\n                voltage_1,\n                voltage_2,\n                status_code_hex\n            ] = [\n                payload[23] / 2,\n                payload[25],\n                payload[26],\n                payload[28].toString(16)\n            ];\n\n            const get_status_string = () => {\n                switch(status_code_hex) {\n                    case '63': return 'TRS-cooling'\n                    case '64': return 'Rest heat utilisation'\n                    case '65': return 'State activated'\n                    case '66': return 'Ready'\n                    case '67': return 'Burner regeneration'\n                    case '68': return 'Initialisation process'\n                    case '69': return 'Sleep_Mode'\n                    case '6a': return 'Continue fuel priming'\n                    case '6b': return 'Continue stabilization, cold start'\n                    case '6c': return 'Continue stabilization, warm start'\n                    case '6d': return 'After-run ramp'\n                    case '6e': return 'Rest heat utilisation'\n                    case '6f': return 'Stabilization, cold start'\n                    case '70': return 'PROCESSOR OFF'\n                    case '71': return 'WAIT STATE'\n                    case '72': return 'Continue stabilization'\n                    case '73': return 'MOTOR CHECK'\n                    case '74': return 'FLAME MONITOR COOLING'\n                    case '75': return 'PRE-GLOWING1'\n                    case '76': return 'PRE-GLOWING2'\n                    case '77': return 'PRE-GLOWING2 Partial Load Start'\n                    case '78': return 'FLAME MONITOR CALIBATION Start'\n                    case '79': return 'START 1'\n                    case '7a': return 'START 2'\n                    case '7b': return 'START 3'\n                    case '7c': return 'START 4'\n                    case '7d': return 'START 5'\n                    case '7e': return 'START 6'\n                    case '7f': return 'GLOW PLUG RAMP'\n                    case '80': return 'FLAME MONITOR MEASURMENT1'\n                    case '81': return 'FLAME MONITOR MEASURMENT2'\n                    case '82': return 'START1 Partial Load Start'\n                    case '83': return 'START2 Partial Load Start'\n                    case '84': return 'START3 Partial Load Start'\n                    case '85': return 'START4 Partial Load Start'\n                    case '86': return 'START5 Partial Load Start'\n                    case '87': return 'START6 Partial Load Start'\n                    case '88': return 'GLOW PLUG RAMP Partial Load Start'\n                    case '89': return 'FLAME MONITOR MEASUREMENT1 Partial Load Start'\n                    case '8a': return 'FLAME MONITOR MEASUREMENT2 Partial Load Start'\n                    case '8b': return 'FULL LOAD'\n                    case '8c': return 'RAMP DOWN'\n                    case '8d': return 'PARTIAL LOAD'\n                    case '8e': return 'RAMP UP'\n                    case '8f': return 'PAUSE'\n                    case '90': return 'BURN-OUT Full Load'\n                    case '91': return 'BURN-OUT Partial Load'\n                    case '92': return 'BURN-OUT Start'\n                    case '93': return 'BURN-OUT Partial Load Start'\n                    case '94': return 'BURN-OUT Overheating'\n                    case '95': return 'COOL 1'\n                    case '96': return 'FLAME MONITOR CALIBRATION'\n                    case '97': return 'COOL 2'\n                    case '98': return 'Boost'\n                    case '99': return 'CONTINUOUS COOLANT TEMPERATURE CONTROL'\n                    case '9a': return 'CONTINUOUS COOLANT TEMPERATURE CONTROL HOLD'\n                    case 'a0': return 'Stabilization, warm start'\n                    case 'a1': return 'Start ramp, cold start'\n                    case 'a2': return 'Start ramp, warm start'\n                    case 'a3': return 'Residual heat utilization test'\n                }\n            };\n\n            const status_string = get_status_string();\n\n            parsed_payload = {\n                status_string,\n                status_code_hex,\n                pump_percent,\n                voltage_1,\n                voltage_2,\n            };\n        } else if(response_hex === '37') {\n            const [\n                fan_rpm_1,\n                fan_rpm_2,\n                fuel_pump_hz,\n                flame_status,\n                glow_rod_resistance_mohm_1,\n                glow_rod_resistance_mohm_2,\n                glow_rod_percent,\n                heating_output_percent,\n                power_consumption_1,\n                power_consumption_2,\n                temperature\n            ] = [\n                payload[5],\n                payload[6],\n                payload[12],\n                payload[32],\n                payload[36],\n                payload[37],\n                payload[42] / 2,\n                payload[46] / 2,\n                payload[51],\n                payload[52],\n                payload[54] - 50,\n            ];\n\n            parsed_payload = {\n                fan_rpm_1,\n                fan_rpm_2,\n                fuel_pump_hz,\n                flame_status,\n                glow_rod_resistance_mohm_1,\n                glow_rod_resistance_mohm_2,\n                glow_rod_percent,\n                heating_output_percent,\n                power_consumption_1,\n                power_consumption_2,\n                temperature\n            };\n        }\n    }\n}\n\nreturn { payload: parsed_payload };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 320,
        "wires": [
            [
                "faadb2285bf69e34",
                "4faadebcea55b5b3"
            ]
        ]
    },
    {
        "id": "a99132cb5ed66a43",
        "type": "serial in",
        "z": "2ec629db0b2d93d1",
        "name": "Webasto message received",
        "serial": "adad033320ce05a2",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "262a2291b599550a"
            ]
        ]
    },
    {
        "id": "faadb2285bf69e34",
        "type": "debug",
        "z": "2ec629db0b2d93d1",
        "name": "debug 45",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 620,
        "wires": []
    },
    {
        "id": "4faadebcea55b5b3",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "Get all heaters",
        "func": "const { payload: serial_payload } = msg;\n\nconst sql_query = `\n  select id\n  from heaters\n  where vendor_id = 'webasto'\n    and connection_type = 'usb'\n`;\n\nconst params = {};\n\nreturn {\n    ...msg,\n    serial_payload,\n    payload: {\n        sql_query,\n        params\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 320,
        "wires": [
            [
                "6b4682d7355c7614"
            ]
        ]
    },
    {
        "id": "6b4682d7355c7614",
        "type": "subflow:2f860c0929d372d8",
        "z": "2ec629db0b2d93d1",
        "name": "",
        "x": 880,
        "y": 320,
        "wires": [
            [
                "4fd70e633d77e13f"
            ]
        ]
    },
    {
        "id": "4fd70e633d77e13f",
        "type": "function",
        "z": "2ec629db0b2d93d1",
        "name": "Iterate over heaters",
        "func": "const {\n    payload,\n    serial_payload\n} = msg;\n\nconst payloads = payload.map(heater => {\n    const { id: heater_id } = heater;\n\n    return {\n        heater_id,\n        serial_payload\n    }\n});\n\nreturn [ payloads ];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "4ce9c6f04d2af4b4"
            ]
        ]
    },
    {
        "id": "4ce9c6f04d2af4b4",
        "type": "debug",
        "z": "2ec629db0b2d93d1",
        "name": "debug 46",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 300,
        "wires": []
    },
    {
        "id": "f2b8b0a08c62f6b1",
        "type": "mqtt in",
        "z": "412a66feda2814e4",
        "name": "Listen to Hub MQTT topic",
        "topic": "${HUB_MQTT_TOPIC}",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "3ee780688134ac27"
            ]
        ]
    },
    {
        "id": "3ee780688134ac27",
        "type": "switch",
        "z": "412a66feda2814e4",
        "name": "Switch `device_type`",
        "property": "payload.device_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "water_tank",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "camera",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sensor",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "temperature_sensor",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 420,
        "y": 80,
        "wires": [
            [
                "0d1af9c425416463"
            ],
            [
                "1af7bed00d9dba14"
            ],
            [
                "3a23e9d20615362f"
            ],
            [
                "3fd1b5113ba587bd"
            ]
        ]
    },
    {
        "id": "9cfa201de2d41045",
        "type": "subflow:2af61905d791930b",
        "z": "412a66feda2814e4",
        "name": "",
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "0d1af9c425416463",
        "type": "function",
        "z": "412a66feda2814e4",
        "name": "Parse payload",
        "func": "const { payload } = msg;\nconst {\n    message,\n    device_id: water_tank_id,\n    ...rest\n} = payload;\n\nreturn {\n    ...msg,\n    payload: {\n        ...rest,\n        water_tank_id,\n        value: message\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 60,
        "wires": [
            [
                "9cfa201de2d41045"
            ]
        ]
    },
    {
        "id": "1b179243c3b2e53a",
        "type": "mqtt in",
        "z": "412a66feda2814e4",
        "name": "Frigate events",
        "topic": "frigate/events",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 340,
        "wires": [
            [
                "bfd40c85ecb8806f"
            ]
        ]
    },
    {
        "id": "fed55bcef9fdb9f6",
        "type": "subflow:2f860c0929d372d8",
        "z": "412a66feda2814e4",
        "name": "",
        "x": 540,
        "y": 340,
        "wires": [
            [
                "442ddb0f25810e96"
            ]
        ]
    },
    {
        "id": "bfd40c85ecb8806f",
        "type": "function",
        "z": "412a66feda2814e4",
        "name": "Get Frigate cameras",
        "func": "const {\n  camera_id\n} = msg.payload.after;\n\nconst sql_query = `\n  select id as camera_id\n  from cameras\n  where connection_type = 'frigate'\n    and json_unquote(json_extract(connection_params, '$.camera_id')) = :camera_id\n`;\n\nconst params = {\n  camera_id\n};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  },\n  frigate_payload: msg.payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 340,
        "wires": [
            [
                "fed55bcef9fdb9f6"
            ]
        ]
    },
    {
        "id": "f68ef210df45d0bf",
        "type": "mqtt out",
        "z": "412a66feda2814e4",
        "name": "Broadcast to MQTT Hub",
        "topic": "${HUB_MQTT_TOPIC}",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 1030,
        "y": 340,
        "wires": []
    },
    {
        "id": "442ddb0f25810e96",
        "type": "function",
        "z": "412a66feda2814e4",
        "name": "Broadcast events to MQTT Hub",
        "func": "const {\n  frigate_payload: message\n} = msg;\n\nconst payloads = msg.payload.map(({ camera_id }) => {\n  return {\n    payload: {\n      device_type: 'camera',\n      device_subtype: 'frigate',\n      device_id: camera_id,\n      message: {\n        message_type: 'event',\n        ...message\n      }\n    }\n  };\n});\n\nreturn [ payloads ];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 340,
        "wires": [
            [
                "f68ef210df45d0bf"
            ]
        ]
    },
    {
        "id": "3a23e9d20615362f",
        "type": "switch",
        "z": "412a66feda2814e4",
        "name": "Alarm is on",
        "property": "alarm_state.armed",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 200,
        "wires": [
            [
                "8166053c18def6dc"
            ]
        ]
    },
    {
        "id": "c411315b226a878e",
        "type": "switch",
        "z": "412a66feda2814e4",
        "name": "Switch `mqtt_topic`",
        "property": "payload.mqtt_topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^.+\\/motion$",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^.+\\/events$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 120,
        "wires": [
            [
                "e583033fc0bb0a93"
            ],
            [
                "0cb33643a606da18"
            ]
        ]
    },
    {
        "id": "1af7bed00d9dba14",
        "type": "switch",
        "z": "412a66feda2814e4",
        "name": "Alarm is on",
        "property": "alarm_state.armed",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 120,
        "wires": [
            [
                "c411315b226a878e"
            ]
        ]
    },
    {
        "id": "8166053c18def6dc",
        "type": "subflow:f42119ca744f79bc",
        "z": "412a66feda2814e4",
        "name": "",
        "x": 880,
        "y": 200,
        "wires": []
    },
    {
        "id": "e583033fc0bb0a93",
        "type": "subflow:5951c9b8d92c3224",
        "z": "412a66feda2814e4",
        "name": "",
        "x": 1100,
        "y": 100,
        "wires": []
    },
    {
        "id": "0cb33643a606da18",
        "type": "subflow:7f2caed3ae7db32d",
        "z": "412a66feda2814e4",
        "name": "",
        "x": 1100,
        "y": 140,
        "wires": []
    },
    {
        "id": "f3153bfb961ba695",
        "type": "debug",
        "z": "412a66feda2814e4",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 520,
        "wires": []
    },
    {
        "id": "ab76350fe6aaa613",
        "type": "function",
        "z": "412a66feda2814e4",
        "name": "Get temperature",
        "func": "const {\n    mqtt_payload,\n    temperature_sensor_id\n} = msg;\n\nconst {\n    mqtt_payload_property\n} = msg.payload[0];\n\nreturn {\n    ...msg,\n    payload: {\n        temperature_sensor_id,\n        temperature: mqtt_payload[mqtt_payload_property]\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 280,
        "wires": [
            [
                "44805f5a74e1dc22"
            ]
        ]
    },
    {
        "id": "3fd1b5113ba587bd",
        "type": "function",
        "z": "412a66feda2814e4",
        "name": "Get `mqtt_payload_property`",
        "func": "const {\n  message,\n  device_id: temperature_sensor_id\n} = msg.payload;\n\nconst sql_query = `\n  select \n    json_unquote(\n      json_extract(\n        connection_params, \n        '$.mqtt_payload_property'\n      )\n    ) as mqtt_payload_property\n  from temperature_sensors\n  where id = :temperature_sensor_id\n`;\n\nconst params = {\n  temperature_sensor_id\n};\n\nreturn {\n  mqtt_payload: JSON.parse(message),\n  temperature_sensor_id,\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 280,
        "wires": [
            [
                "64ad68b15b255bf8"
            ]
        ]
    },
    {
        "id": "64ad68b15b255bf8",
        "type": "subflow:2f860c0929d372d8",
        "z": "412a66feda2814e4",
        "name": "",
        "x": 940,
        "y": 280,
        "wires": [
            [
                "ab76350fe6aaa613"
            ]
        ]
    },
    {
        "id": "44805f5a74e1dc22",
        "type": "function",
        "z": "412a66feda2814e4",
        "name": "Set `global.temperature_state`",
        "func": "const {\n    temperature_sensor_id,\n    temperature\n} = msg.payload;\n\nif(temperature) {\n    let temperature_state = global.get('temperature_state') || {};\n    global.set(\n        'temperature_state', \n        {\n            ...temperature_state,\n            [temperature_sensor_id]: { temperature }\n        }\n    );\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "a0d1b06349876103",
        "type": "mqtt in",
        "z": "412a66feda2814e4",
        "name": "",
        "topic": "shelly/events/rpc",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 600,
        "wires": [
            [
                "f3153bfb961ba695"
            ]
        ]
    },
    {
        "id": "f7360c1818b761fb",
        "type": "inject",
        "z": "e394437c1a103158",
        "name": "Execute at start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "1fe0309507dc230b",
                "b8e5d88f57cea7ff"
            ]
        ]
    },
    {
        "id": "fa44778ce07e4609",
        "type": "inject",
        "z": "e394437c1a103158",
        "name": "Every 15s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "12c28c8a127a03cb",
                "9d230bd350593bc3"
            ]
        ]
    },
    {
        "id": "21532896ca9f3e64",
        "type": "function",
        "z": "e394437c1a103158",
        "name": "(On Start) Set global variables",
        "func": "",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "global.set('portainer_api_url', 'http://127.0.0.1:9000/api/endpoints/2');",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "40345a0f84b5023a",
        "type": "subflow:fbcbc95f786b1f72",
        "z": "e394437c1a103158",
        "name": "",
        "x": 410,
        "y": 400,
        "wires": []
    },
    {
        "id": "12c28c8a127a03cb",
        "type": "subflow:d8264d18d8e4b566",
        "z": "e394437c1a103158",
        "name": "",
        "x": 420,
        "y": 340,
        "wires": []
    },
    {
        "id": "249b1f9c82b8fb2c",
        "type": "subflow:d0749495e355f931",
        "z": "e394437c1a103158",
        "name": "",
        "x": 440,
        "y": 460,
        "wires": []
    },
    {
        "id": "32a5d83af20cba88",
        "type": "mqtt in",
        "z": "e394437c1a103158",
        "name": "",
        "topic": "renogy_bt/state",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 700,
        "y": 460,
        "wires": [
            [
                "d18e9429b71ff540"
            ]
        ]
    },
    {
        "id": "d18e9429b71ff540",
        "type": "subflow:4ca15bb77bd03cce",
        "z": "e394437c1a103158",
        "name": "",
        "x": 970,
        "y": 460,
        "wires": []
    },
    {
        "id": "8e8af121e9211a33",
        "type": "inject",
        "z": "e394437c1a103158",
        "name": "Every 30s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "1fe0309507dc230b",
        "type": "subflow:75ede1672068ab0f",
        "z": "e394437c1a103158",
        "name": "",
        "x": 410,
        "y": 200,
        "wires": []
    },
    {
        "id": "b8e5d88f57cea7ff",
        "type": "subflow:933ed9d2e03018bd",
        "z": "e394437c1a103158",
        "name": "",
        "x": 380,
        "y": 260,
        "wires": [
            [
                "9995cac3ef48642e"
            ]
        ]
    },
    {
        "id": "3fca476f882bff80",
        "type": "subflow:e52b3bb6fb08cd68",
        "z": "e394437c1a103158",
        "name": "",
        "x": 840,
        "y": 260,
        "wires": []
    },
    {
        "id": "9995cac3ef48642e",
        "type": "function",
        "z": "e394437c1a103158",
        "name": "Check not armed",
        "func": "const { armed } = msg.payload;\n\nif(!armed) {\n    return {}\n} else {\n    return []\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 260,
        "wires": [
            [
                "3fca476f882bff80"
            ]
        ]
    },
    {
        "id": "dc1a46fce251a022",
        "type": "debug",
        "z": "e394437c1a103158",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 680,
        "wires": []
    },
    {
        "id": "8d98f8fb93929081",
        "type": "mqtt in",
        "z": "e394437c1a103158",
        "name": "",
        "topic": "ble_to_mqtt",
        "qos": "2",
        "datatype": "json",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 680,
        "wires": [
            [
                "2903eed58c0f483b"
            ]
        ]
    },
    {
        "id": "3ea99926c506c6b7",
        "type": "http request",
        "z": "e394437c1a103158",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5005/get_info?mac_address=A4:C1:38:0B:79:22&device_id=1&device_type=battery&adapter=batmon&device_subtype=jbd",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 560,
        "wires": [
            [
                "867058cbfefed0b7"
            ]
        ]
    },
    {
        "id": "9d230bd350593bc3",
        "type": "function",
        "z": "e394437c1a103158",
        "name": "function 10",
        "func": "\nreturn {\n    ...msg,\n    requestTimeout: 10000\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 580,
        "wires": [
            [
                "3ea99926c506c6b7"
            ]
        ]
    },
    {
        "id": "867058cbfefed0b7",
        "type": "http request",
        "z": "e394437c1a103158",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5005/get_info?mac_address=84:c6:92:13:c0:f4&device_id=1&device_type=battery&adapter=renogy&device_subtype=rover",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "2903eed58c0f483b",
        "type": "json",
        "z": "e394437c1a103158",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 680,
        "wires": [
            [
                "dc1a46fce251a022"
            ]
        ]
    },
    {
        "id": "dd6f48cb877d8037",
        "type": "subflow:3ee3b10c02a9dae4",
        "z": "2f6480327ea906c3",
        "name": "",
        "x": 990,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f929074e5e6b01b3",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Toggle",
        "func": "const {\n    payload,\n    relay_position\n} = msg;\n\nconst { state=0 } = payload;\n\nreturn {\n    payload: [\n        {\n            relay_type: 'relay',\n            relay_position,\n            actor: 'test',\n            ...state ? {\n                mode: 'unsubscribe'\n            } : {\n                state: true,\n                mode: 'subscribe'\n            }\n        }\n    ]\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 180,
        "wires": [
            [
                "dd6f48cb877d8037"
            ]
        ]
    },
    {
        "id": "82815de83cf25863",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "90c4a3afd5076e64"
            ]
        ]
    },
    {
        "id": "1bccc0445d55310b",
        "type": "subflow:d2eb75050cc2ea33",
        "z": "2f6480327ea906c3",
        "name": "",
        "x": 660,
        "y": 180,
        "wires": [
            [
                "f929074e5e6b01b3"
            ]
        ]
    },
    {
        "id": "90c4a3afd5076e64",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 1",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 1\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "c2ab88a316f52251",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "744075e5aa78dc4e"
            ]
        ]
    },
    {
        "id": "744075e5aa78dc4e",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 2",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 2\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "407ae424c06eceb1",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "1a2f7e2de813c471"
            ]
        ]
    },
    {
        "id": "1a2f7e2de813c471",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 3",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 3\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "4d84a5ab67cc4c3b",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "2a03fd0d13e62d2a"
            ]
        ]
    },
    {
        "id": "2a03fd0d13e62d2a",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 4",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 4\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 280,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "1411fd958d971939",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 340,
        "wires": [
            [
                "59b24134294bfac0"
            ]
        ]
    },
    {
        "id": "59b24134294bfac0",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 5",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 5\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "cf282f06380978f6",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 400,
        "wires": [
            [
                "292e4ff1d9d68e2c"
            ]
        ]
    },
    {
        "id": "292e4ff1d9d68e2c",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 6",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 6\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 400,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "708083cc14d12329",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 460,
        "wires": [
            [
                "9838e74d18b5d5bc"
            ]
        ]
    },
    {
        "id": "9838e74d18b5d5bc",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 7",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 7\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 460,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "b6ff1858607e4cf5",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 520,
        "wires": [
            [
                "408db813edd47217"
            ]
        ]
    },
    {
        "id": "408db813edd47217",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 8",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 8\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 520,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "07902ae4b7523777",
        "type": "inject",
        "z": "43f1ddd45d338663",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "23e3d5833d4f01d4"
            ]
        ]
    },
    {
        "id": "23e3d5833d4f01d4",
        "type": "function",
        "z": "43f1ddd45d338663",
        "name": "Set device ID",
        "func": "return {\n    payload: {\n        device_id: 'a4:c1:38:0b:79:22'\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 80,
        "wires": [
            [
                "1e2754fe85a66c65"
            ]
        ]
    },
    {
        "id": "1e2754fe85a66c65",
        "type": "subflow:44f3ed9f999bd3a8",
        "z": "43f1ddd45d338663",
        "name": "",
        "x": 500,
        "y": 80,
        "wires": [
            [
                "7d1a1fc692ff5258"
            ]
        ]
    },
    {
        "id": "7d1a1fc692ff5258",
        "type": "debug",
        "z": "43f1ddd45d338663",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 80,
        "wires": []
    },
    {
        "id": "7ee90873b0cc3487",
        "type": "inject",
        "z": "d06ae3eee692de3d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "684314d35968f05c"
            ]
        ]
    },
    {
        "id": "684314d35968f05c",
        "type": "subflow:b3276c87a286f102",
        "z": "d06ae3eee692de3d",
        "name": "",
        "x": 300,
        "y": 80,
        "wires": [
            [
                "ea8d16ecb29a73ce"
            ]
        ]
    },
    {
        "id": "ea8d16ecb29a73ce",
        "type": "debug",
        "z": "d06ae3eee692de3d",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 80,
        "wires": []
    },
    {
        "id": "d54c61c1d1da4b62",
        "type": "inject",
        "z": "d06ae3eee692de3d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "500502697aeb0feb"
            ]
        ]
    },
    {
        "id": "500502697aeb0feb",
        "type": "subflow:e0baa17c5072b7d3",
        "z": "d06ae3eee692de3d",
        "name": "",
        "x": 330,
        "y": 140,
        "wires": [
            [
                "993171f29d0cb799"
            ]
        ]
    },
    {
        "id": "993171f29d0cb799",
        "type": "debug",
        "z": "d06ae3eee692de3d",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 140,
        "wires": []
    },
    {
        "id": "1e73c37b977c04c8",
        "type": "inject",
        "z": "254fbe7becd93c6d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "6a470f531cdcf5bb"
            ]
        ]
    },
    {
        "id": "43a66530f131fe31",
        "type": "debug",
        "z": "254fbe7becd93c6d",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 80,
        "wires": []
    },
    {
        "id": "6a470f531cdcf5bb",
        "type": "subflow:cd03e8b953118d1f",
        "z": "254fbe7becd93c6d",
        "name": "",
        "x": 300,
        "y": 80,
        "wires": [
            [
                "43a66530f131fe31"
            ]
        ]
    },
    {
        "id": "4b1881351c88a84d",
        "type": "inject",
        "z": "0176619f63694862",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "bce8300f54ab3b55"
            ]
        ]
    },
    {
        "id": "72f8cc92480c9cc5",
        "type": "debug",
        "z": "0176619f63694862",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "bce8300f54ab3b55",
        "type": "subflow:1fcb65ecb479780e",
        "z": "0176619f63694862",
        "name": "",
        "x": 350,
        "y": 80,
        "wires": [
            [
                "72f8cc92480c9cc5"
            ]
        ]
    },
    {
        "id": "0de3a3f38db23062",
        "type": "mqtt in",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "cmnd/tasmota_test/POWER1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 320,
        "y": 180,
        "wires": [
            [
                "c9aeddf2423f02c2"
            ]
        ]
    },
    {
        "id": "955d1b66f57352d9",
        "type": "mqtt out",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "stat/tasmota_test",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 550,
        "y": 320,
        "wires": []
    },
    {
        "id": "8bb39527bc092b84",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 3",
        "func": "return {payload: 'world'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 320,
        "wires": [
            [
                "955d1b66f57352d9"
            ]
        ]
    },
    {
        "id": "c9aeddf2423f02c2",
        "type": "debug",
        "z": "d1fe66a0a15b470a",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 180,
        "wires": []
    },
    {
        "id": "43a1aebb7cadca3b",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "8bb39527bc092b84"
            ]
        ]
    },
    {
        "id": "31482b014b714389",
        "type": "mqtt out",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "cmnd/tasmota_test/POWER1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 690,
        "y": 460,
        "wires": []
    },
    {
        "id": "0dca77c32be0089b",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 4",
        "func": "return {payload: 'ON'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 460,
        "wires": [
            [
                "31482b014b714389"
            ]
        ]
    },
    {
        "id": "b8d8ea038f410cfb",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 460,
        "wires": [
            [
                "0dca77c32be0089b"
            ]
        ]
    },
    {
        "id": "0747aeccd0cf3158",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 5",
        "func": "return {payload: 'OFF'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 520,
        "wires": [
            [
                "31482b014b714389"
            ]
        ]
    },
    {
        "id": "7f8ea82823d00189",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 520,
        "wires": [
            [
                "0747aeccd0cf3158"
            ]
        ]
    },
    {
        "id": "326dafec0bb6c97d",
        "type": "mqtt out",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "cmnd/tasmota_test/POWER2",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 690,
        "y": 620,
        "wires": []
    },
    {
        "id": "24da06e016f85680",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 6",
        "func": "return {payload: 'ON'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 620,
        "wires": [
            [
                "326dafec0bb6c97d"
            ]
        ]
    },
    {
        "id": "1d7c14eff6295053",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 620,
        "wires": [
            [
                "24da06e016f85680"
            ]
        ]
    },
    {
        "id": "e5b8b11f3dc32b95",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 7",
        "func": "return {payload: 'OFF'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 680,
        "wires": [
            [
                "326dafec0bb6c97d"
            ]
        ]
    },
    {
        "id": "672a9251c4214c70",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 680,
        "wires": [
            [
                "e5b8b11f3dc32b95"
            ]
        ]
    },
    {
        "id": "ce34dbaca0b7e2d0",
        "type": "mqtt in",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "water-sensor-test/startup",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 840,
        "wires": [
            [
                "6c93626787f462fb"
            ]
        ]
    },
    {
        "id": "6c93626787f462fb",
        "type": "debug",
        "z": "d1fe66a0a15b470a",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 840,
        "wires": []
    },
    {
        "id": "807e59e6b95fa258",
        "type": "mqtt in",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "water-sensor-test/values",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "09c3d1f8a3b0dc8b",
        "type": "mqtt in",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "stat/vibration_sensor_test/3/values",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 360,
        "y": 980,
        "wires": [
            [
                "27f638171de56a7c"
            ]
        ]
    },
    {
        "id": "27f638171de56a7c",
        "type": "debug",
        "z": "d1fe66a0a15b470a",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 980,
        "wires": []
    },
    {
        "id": "15a8189742bcbeeb",
        "type": "mqtt in",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "stat/vibration_sensor_test/1/values",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 360,
        "y": 1040,
        "wires": [
            [
                "bd6bb9d888df74a5"
            ]
        ]
    },
    {
        "id": "bd6bb9d888df74a5",
        "type": "debug",
        "z": "d1fe66a0a15b470a",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a8b996b6bc5d8339",
        "type": "mqtt in",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "stat/vibration_sensor_test/2/values",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 360,
        "y": 1100,
        "wires": [
            [
                "6a5f08b5e96ecebd"
            ]
        ]
    },
    {
        "id": "6a5f08b5e96ecebd",
        "type": "debug",
        "z": "d1fe66a0a15b470a",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c735411758053451",
        "type": "inject",
        "z": "e7a6fe05a4d2b37c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "adfa8d2186a6f889"
            ]
        ]
    },
    {
        "id": "adfa8d2186a6f889",
        "type": "function",
        "z": "e7a6fe05a4d2b37c",
        "name": "Parse request",
        "func": "return {\n    ...msg,\n    payload: {\n        connection_type: 'mqtt',\n        device_type: 'mqtt',\n        device_id: 1\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f266801fc9a08cc1",
        "type": "debug",
        "z": "e7a6fe05a4d2b37c",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 100,
        "wires": []
    },
    {
        "id": "5c4b39ec23d7d6fb",
        "type": "function",
        "z": "b78d606a12ae9c11",
        "name": "function 9",
        "func": "const {\n  payload\n} = msg;\n\nconst {\n  time,\n  ...rest\n} = payload;\n\nreturn {\n  measurement: 'gps_state',\n  payload: {\n    time: new Date(time).getTime(),\n    ...rest\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 280,
        "wires": [
            [
                "c18042bef3d7ad56"
            ]
        ]
    },
    {
        "id": "05078a2ac29a4184",
        "type": "inject",
        "z": "b78d606a12ae9c11",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "d0be47dfdac732a4"
            ]
        ]
    },
    {
        "id": "c18042bef3d7ad56",
        "type": "influxdb out",
        "z": "b78d606a12ae9c11",
        "influxdb": "4c57579e23eb17f5",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 880,
        "y": 300,
        "wires": []
    },
    {
        "id": "ec62b70e23e51273",
        "type": "influxdb in",
        "z": "b78d606a12ae9c11",
        "influxdb": "4c57579e23eb17f5",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 620,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d0be47dfdac732a4",
        "type": "subflow:cd03e8b953118d1f",
        "z": "b78d606a12ae9c11",
        "name": "",
        "x": 360,
        "y": 200,
        "wires": [
            [
                "5c4b39ec23d7d6fb",
                "c461cf7d3b57368d"
            ]
        ]
    },
    {
        "id": "c461cf7d3b57368d",
        "type": "debug",
        "z": "b78d606a12ae9c11",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 440,
        "wires": []
    }
]