[
    {
        "id": "181d977a8b81274c",
        "type": "tab",
        "label": "HTTP API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e394437c1a103158",
        "type": "tab",
        "label": "Init",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "412a66feda2814e4",
        "type": "tab",
        "label": "MQTT Hub",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2f6480327ea906c3",
        "type": "tab",
        "label": "[Test] Relays",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "43f1ddd45d338663",
        "type": "tab",
        "label": "[Test] JBD BMS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d06ae3eee692de3d",
        "type": "tab",
        "label": "[Test] USB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "254fbe7becd93c6d",
        "type": "tab",
        "label": "[Test] GPS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0176619f63694862",
        "type": "tab",
        "label": "[Test] Temperature sensor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d1fe66a0a15b470a",
        "type": "tab",
        "label": "[Test] Tasmota",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e7a6fe05a4d2b37c",
        "type": "tab",
        "label": "[Test] Water tanks",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ee3b10c02a9dae4",
        "type": "subflow",
        "name": "[Relays] dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 480,
                "wires": [
                    {
                        "id": "827e13d335fd312c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 520,
                "wires": [
                    {
                        "id": "827e13d335fd312c",
                        "port": 0
                    },
                    {
                        "id": "d604f0318f30da1e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4e1f9183000d244e",
        "type": "subflow",
        "name": "[Relays] set items state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "8a0ad5065fdbb073"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 80,
                "wires": [
                    {
                        "id": "63d13c5a16c612f0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d2eb75050cc2ea33",
        "type": "subflow",
        "name": "[Relays] Get item state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "ad6e53e4c4004a25"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 80,
                "wires": [
                    {
                        "id": "ad6e53e4c4004a25",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "44f3ed9f999bd3a8",
        "type": "subflow",
        "name": "[JBD BMS] Get battery stats",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "e9419abf35522968"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 660,
                "y": 80,
                "wires": [
                    {
                        "id": "b034b52cd70cb3d7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "924d506d524e2f1f",
        "type": "subflow",
        "name": "[GPS] Initialize",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "cd03e8b953118d1f",
        "type": "subflow",
        "name": "[GPS] Get info",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "85c5be514632f153"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "85c5be514632f153",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "48376301d7cf8ab5",
        "type": "subflow",
        "name": "[Relays] Get items state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "b305862eb524c8b9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "b305862eb524c8b9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c30c47ad0a20b80b",
        "type": "subflow",
        "name": "[Temp Sensor] Update temperatures",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c2d74b2b38c9e67b"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b3276c87a286f102",
        "type": "subflow",
        "name": "[USB] Scan devices",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "08e3e221b1ea90ee"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 80,
                "wires": [
                    {
                        "id": "4a1a8de294b7154f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2f860c0929d372d8",
        "type": "subflow",
        "name": "[DB] Run query",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "d3fb6d1d0e15f941"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 80,
                "wires": [
                    {
                        "id": "1c4a76541ff62d0d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "28a3f62edac8391d",
        "type": "subflow",
        "name": "[Relays] GPIO dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 460,
                "wires": [
                    {
                        "id": "97059ba81f6ce727"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d843692079f79c4f",
        "type": "subflow",
        "name": "[Relays] MQTT dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "3ffcd74351762851"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e0baa17c5072b7d3",
        "type": "subflow",
        "name": "[USB] Rewrite `udev` rules",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "82aef1b2f5d6d0c5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1400,
                "y": 60,
                "wires": [
                    {
                        "id": "3483775fb8fe0b42",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d88de85075ac25db",
        "type": "subflow",
        "name": "[USB] Create `usb_devices` view",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "ec0297ab17af6839"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d1e3712ec6c2128d",
        "type": "subflow",
        "name": "[Batteries] Dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 160,
                "wires": [
                    {
                        "id": "8276b42967ce2963"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 140,
                "wires": [
                    {
                        "id": "a85ad1d6b4e922a4",
                        "port": 0
                    },
                    {
                        "id": "cff0d2d68e414164",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1fcb65ecb479780e",
        "type": "subflow",
        "name": "[Temp Sensor] Get temperature values",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "560065fbfef44112"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "560065fbfef44112",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "43ab01fa1b483aad",
        "type": "subflow",
        "name": "[MQTT] Create `mqtt_devices` view",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "adf17e5e98e12d95"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2af61905d791930b",
        "type": "subflow",
        "name": "[Water tanks] Set water tanks state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "b27fc867cae90a0f"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5006edf73217beed",
        "type": "subflow",
        "name": "[Water tanks] Dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "5f4411a7693f4453"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 80,
                "wires": [
                    {
                        "id": "68bba093d0234b34",
                        "port": 0
                    },
                    {
                        "id": "20746b7155acadd5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d522f6d2f07435cd",
        "type": "subflow",
        "name": "[Portainer] Get container",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "0d5b2114da75e3d1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 80,
                "wires": [
                    {
                        "id": "4a6ce239161630fd",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9c0f55db9b5a4462",
        "type": "subflow",
        "name": "[Portainer] Get access token",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "352a53d8795dfcbb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 600,
                "y": 80,
                "wires": [
                    {
                        "id": "eb520c589947876d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7b9d1f6f5864ccce",
        "type": "subflow",
        "name": "[Portainer] Restart container",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "932fb4a01c4811ce"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 80,
                "wires": [
                    {
                        "id": "08e96559c84b53f6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "fff9b047550b9220",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e83d5dc5a3f616c1",
        "type": "mcp23017chip",
        "addr": "0x20",
        "interval": "100"
    },
    {
        "id": "f57dd118a2654036",
        "type": "MySQL-Server-Connector",
        "name": "MariaDB",
        "host": "${DB_HOST}",
        "port": "3306",
        "user": "${DB_USER}",
        "password": "${DB_PASSWORD}",
        "tls": false,
        "database": "${DB_NAME}"
    },
    {
        "id": "827e13d335fd312c",
        "type": "subflow:4e1f9183000d244e",
        "z": "3ee3b10c02a9dae4",
        "name": "",
        "x": 250,
        "y": 480,
        "wires": [
            [
                "9e128262d7408f9d"
            ]
        ]
    },
    {
        "id": "9c7423bd52cc2dec",
        "type": "function",
        "z": "3ee3b10c02a9dae4",
        "name": "Parse payload",
        "func": "const {\n    relay_position,\n    state\n} = msg.payload;\n\nreturn {\n    relay_position,\n    payload: state ? 1 : 0\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 400,
        "wires": [
            [
                "816adb2ad456cbd8"
            ]
        ]
    },
    {
        "id": "1aee12fc671bca2f",
        "type": "catch",
        "z": "3ee3b10c02a9dae4",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 140,
        "y": 580,
        "wires": [
            [
                "d604f0318f30da1e"
            ]
        ]
    },
    {
        "id": "d604f0318f30da1e",
        "type": "function",
        "z": "3ee3b10c02a9dae4",
        "name": "Parse error",
        "func": "const { error } = msg;\nlet { message } = error;\n\ntry {\n    message = JSON.parse(message);\n} catch(err) {}\n\nreturn {\n    ...msg,\n    statusCode: 422,\n    payload: {\n        error: {\n            ...error,\n            message\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "9e128262d7408f9d",
        "type": "function",
        "z": "3ee3b10c02a9dae4",
        "name": "Group payloads",
        "func": "const payload = msg.payload.map(item => {\n    const {\n        relay_type,\n        vendor_id,\n        mqtt_topic,\n        relay_position,\n        state\n    } = item;\n    \n    return {\n        payload: {\n            relay_type,\n            vendor_id,\n            mqtt_topic,\n            relay_position,\n            state\n        }\n    }\n});\n\nreturn [payload];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 440,
        "wires": [
            [
                "080e9cb5061c772f"
            ]
        ]
    },
    {
        "id": "080e9cb5061c772f",
        "type": "switch",
        "z": "3ee3b10c02a9dae4",
        "name": "Relay type",
        "property": "payload.relay_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "relay",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "wifi_relay",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 440,
        "wires": [
            [
                "9c7423bd52cc2dec"
            ],
            [
                "248e1755cef2988d"
            ]
        ]
    },
    {
        "id": "816adb2ad456cbd8",
        "type": "subflow:28a3f62edac8391d",
        "z": "3ee3b10c02a9dae4",
        "name": "",
        "x": 1050,
        "y": 400,
        "wires": []
    },
    {
        "id": "248e1755cef2988d",
        "type": "subflow:d843692079f79c4f",
        "z": "3ee3b10c02a9dae4",
        "name": "",
        "x": 870,
        "y": 460,
        "wires": []
    },
    {
        "id": "8a0ad5065fdbb073",
        "type": "function",
        "z": "4e1f9183000d244e",
        "name": "Validate new state",
        "func": "const {\n    payload\n} = msg;\n\nif(!Array.isArray(payload)) {\n    throw { type: 'invalid_payload' }\n};\n\nconst relays_state = {\n    ...global.get('relays_state') || {}\n};\n\npayload.forEach(item => {\n    const {\n        relay_type,\n        relay_position,\n        state,\n        actor,\n        mode,\n        vendor_id,\n        mqtt_topic,\n        ...rest\n    } = item;\n\n    const relay_type_state = relays_state[relay_type] || {};\n    const item_state = relay_type_state[relay_position] || {};\n\n    if (\n        [relay_position, relay_type].includes(undefined)\n        || !['wifi_relay', 'relay'].includes(relay_type)\n        || Object.keys(rest).length > 0\n        || (\n            relay_type === 'wifi_relay' \n            && [vendor_id, mqtt_topic].includes(undefined)\n        )\n        || (\n            relay_type === 'relay'\n            && (!!vendor_id || !!mqtt_topic)\n        )\n        || !['subscribe', 'unsubscribe'].includes(mode)\n        || !actor\n        || (state !== undefined && mode === 'unsubscribe')\n        || (state === undefined && mode === 'subscribe')\n    ) {\n        throw { type: 'invalid_payload' }\n    };\n\n    if (\n        mode === 'subscribe'\n        && state !== item_state.state\n        && (item_state.actors || []).length > 0\n    ) {\n        throw {\n            type: 'conflicting_actors_found',\n            relay_type,\n            relay_position,\n            actors: item_state.actors\n        }\n    };\n})\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "63d13c5a16c612f0"
            ]
        ]
    },
    {
        "id": "63d13c5a16c612f0",
        "type": "function",
        "z": "4e1f9183000d244e",
        "name": "Set `global.relays_state`",
        "func": "const {\n    payload\n} = msg;\n\nlet relays_state = {...global.get('relays_state') || {}};\n\nconst newPayload = payload.map(item => {\n    const {\n        relay_type,\n        relay_position,\n        vendor_id,\n        mqtt_topic,\n        state,\n        actor,\n        mode\n    } = item;\n\n    let relay_type_state = relays_state[relay_type] || {};\n    let mqtt_topic_state = relay_type_state[mqtt_topic] || {};\n\n    let item_state;\n    if(relay_type === 'relay') {\n        item_state = relay_type_state[relay_position] || {};\n    } else if(relay_type === 'wifi_relay') {\n        item_state = mqtt_topic_state[relay_position] || {};\n    }\n    \n    item_state.actors ||= [];\n\n    if(mode === 'subscribe') {\n        item_state.state = state;\n        if (!item_state.actors.find(({actor: a}) => a === actor)) {\n            item_state.actors.push({ actor })\n        }\n    } else if(mode === 'unsubscribe') {\n        item_state.actors = item_state.actors.filter(({actor: a}) => a !== actor);\n        if(item_state.actors.length === 0) {\n            item_state.state = false;\n        }\n    }\n\n    if(relay_type === 'relay') {\n        relay_type_state[relay_position] = item_state;\n    } else if(relay_type === 'wifi_relay') {\n        mqtt_topic_state[relay_position] = item_state;\n        relay_type_state[mqtt_topic] = mqtt_topic_state;\n    }\n    \n    relays_state[relay_type] = relay_type_state;\n\n    return {\n        relay_type,\n        relay_position,\n        vendor_id,\n        mqtt_topic,\n        state: item_state.state\n    }\n});\n\nglobal.set('relays_state', relays_state);\n\nreturn {\n    ...msg,\n    payload: newPayload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ad6e53e4c4004a25",
        "type": "function",
        "z": "d2eb75050cc2ea33",
        "name": "Get item state",
        "func": "const {\n    relay_type,\n    mqtt_topic,\n    relay_position\n} = msg;\n\nconst relays_state = {...global.get('relays_state') || {}};\n\nconst relay_type_state = relays_state[relay_type] || {};\n\nlet relay_state;\nif(relay_type === 'wifi_relay') {\n    const mqtt_topic_state = relay_type_state[mqtt_topic] || {};\n    relay_state = mqtt_topic_state[relay_position]; \n} else if(relay_type === 'relay') {\n    relay_state = relay_type_state[relay_position];\n}\n\nreturn {\n    ...msg,\n    payload: relay_state || {}\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e9419abf35522968",
        "type": "function",
        "z": "44f3ed9f999bd3a8",
        "name": "JBD BMS script",
        "func": "const root_scripts_path = env.get('PEKAWAY_SCRIPTS_PATH');\nconst filename = `liontronBmsInfo.py`;\nconst { device_id } = msg.payload;\n\nif(!root_scripts_path) {\n    throw {\n        type: 'missing_env_variable',\n        message: `$PEKAWAY_SCRIPTS_PATH is not set`\n    }\n} else if(!device_id) {\n    throw {\n        type: 'invalid_request',\n        message: `\\`device_id\\` is required`\n    }\n} else {\n    return {\n        ...msg,\n        payload: `${root_scripts_path}/${filename} -d ${device_id}`\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "5b81d63543932a28"
            ]
        ]
    },
    {
        "id": "5b81d63543932a28",
        "type": "exec",
        "z": "44f3ed9f999bd3a8",
        "command": "python3 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 360,
        "y": 80,
        "wires": [
            [
                "b034b52cd70cb3d7"
            ],
            [],
            []
        ]
    },
    {
        "id": "b034b52cd70cb3d7",
        "type": "json",
        "z": "44f3ed9f999bd3a8",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 530,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "49ee4acd56fb9817",
        "type": "function",
        "z": "924d506d524e2f1f",
        "name": "Set `global.gps_info`",
        "func": "const {\n    payload\n} = msg;\n\nif(['3d', '2d'].includes(payload.mode || !global.get('gps_info'))) {\n    global.set('gps_info', msg.payload);\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "03e0c09948d61e60",
        "type": "mqtt in",
        "z": "924d506d524e2f1f",
        "name": "",
        "topic": "vanpi/gps_values",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 80,
        "wires": [
            [
                "49ee4acd56fb9817"
            ]
        ]
    },
    {
        "id": "85c5be514632f153",
        "type": "function",
        "z": "cd03e8b953118d1f",
        "name": "Get `global.gps_info`",
        "func": "const payload = global.get('gps_info') || {};\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b305862eb524c8b9",
        "type": "function",
        "z": "48376301d7cf8ab5",
        "name": "Get GPIO items state",
        "func": "const {\n    _msgid='',\n    ...payload\n} = global.get('relays_state') || {};\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c2d74b2b38c9e67b",
        "type": "function",
        "z": "c30c47ad0a20b80b",
        "name": "Temperature sensor script",
        "func": "const root_scripts_path = env.get('PEKAWAY_SCRIPTS_PATH');\nconst filename = `ds18b20.py`;\n\nif(!root_scripts_path) {\n    throw `$PEKAWAY_SCRIPTS_PATH is not set`\n} else {\n    return {\n        ...msg,\n        payload: `${root_scripts_path}/${filename}`\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "9494fc6e2243e775"
            ]
        ]
    },
    {
        "id": "9494fc6e2243e775",
        "type": "exec",
        "z": "c30c47ad0a20b80b",
        "command": "python3 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "215a88fad5308406"
            ],
            [],
            []
        ]
    },
    {
        "id": "215a88fad5308406",
        "type": "function",
        "z": "c30c47ad0a20b80b",
        "name": "Parse temperatures",
        "func": "const {\n    payload\n} = msg;\n\nlet parsedPayload = {};\n\npayload\n    .split(\"\\n\")\n    .filter(s => !!s)\n    .forEach(string => {\n        const [\n            index,\n            temperature,\n            unit\n        ] = string.trim().split(/[\\s,\\t,\\n]+/);\n\n        if (temperature !== 'undefined') {\n            parsedPayload[parseInt(index)] = {\n                temperature: parseFloat(temperature),\n                unit\n            }\n        }\n    });\n\nreturn {\n    ...msg,\n    payload: parsedPayload\n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "562a4f72d675c33b"
            ]
        ]
    },
    {
        "id": "562a4f72d675c33b",
        "type": "function",
        "z": "c30c47ad0a20b80b",
        "name": "function 8",
        "func": "const temperature_state = global.get('temperature_state') || {};\n\nconst new_state = {\n    ...temperature_state,\n    ...msg.payload\n};\n\nglobal.set('temperature_state', new_state)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "719e21a14994edb0",
        "type": "exec",
        "z": "b3276c87a286f102",
        "command": "python3",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 340,
        "y": 100,
        "wires": [
            [
                "86cffd55d951734a"
            ],
            [],
            []
        ]
    },
    {
        "id": "08e3e221b1ea90ee",
        "type": "function",
        "z": "b3276c87a286f102",
        "name": "Scan USB script",
        "func": "const root_scripts_path = env.get('PEKAWAY_SCRIPTS_PATH');\nconst filename = `usbScan.py`;\n\nif(!root_scripts_path) {\n    throw `$PEKAWAY_SCRIPTS_PATH is not set`\n} else {\n    return {\n        ...msg,\n        payload: `${root_scripts_path}/${filename}`\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 100,
        "wires": [
            [
                "719e21a14994edb0"
            ]
        ]
    },
    {
        "id": "86cffd55d951734a",
        "type": "json",
        "z": "b3276c87a286f102",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 80,
        "wires": [
            [
                "4a1a8de294b7154f"
            ]
        ]
    },
    {
        "id": "4a1a8de294b7154f",
        "type": "function",
        "z": "b3276c87a286f102",
        "name": "Parse items",
        "func": "const {\n    payload\n} = msg;\n\nconst usb_items = payload.map(item => {\n    const {\n        idVendor,\n        idProduct,\n        iManufacturer,\n        iProduct,\n        iSerial\n    } = item;\n\n    const [vendor_id, vendor_name] = idVendor.split(/ (.*)/s, 2);\n    const [product_id, product_name] = idProduct.split(/ (.*)/s, 2);\n    const manufacturer_name = iManufacturer.split(/ (.*)/s, 2)[1];\n    const product_description = iProduct.split(/ (.*)/s, 2)[1];\n    const serial = iSerial.split(/ (.*)/s, 2)[1];\n\n    return {\n        product_id,\n        product_name,\n        vendor_id,\n        vendor_name,\n        manufacturer_name,\n        product_description,\n        serial\n    }\n});\n\nreturn {\n    ...msg,\n    payload: usb_items\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d3fb6d1d0e15f941",
        "type": "function",
        "z": "2f860c0929d372d8",
        "name": "Parse payload",
        "func": "const {\n    sql_query,\n    params\n} = msg.payload;\n\nreturn {\n    ...msg,\n    topic: sql_query,\n    payload: params\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "1c4a76541ff62d0d"
            ]
        ]
    },
    {
        "id": "1c4a76541ff62d0d",
        "type": "MySQL-Connector",
        "z": "2f860c0929d372d8",
        "server": "f57dd118a2654036",
        "name": "",
        "x": 340,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "97059ba81f6ce727",
        "type": "switch",
        "z": "28a3f62edac8391d",
        "name": "",
        "property": "relay_position",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 190,
        "y": 460,
        "wires": [
            [
                "51e9ffee4c0bc96b"
            ],
            [
                "4d7a3d34f6c7c660"
            ],
            [
                "968be9d3d6d4eebf"
            ],
            [
                "0ea16f9f74190e0f"
            ],
            [
                "2f6aac866698cfdc"
            ],
            [
                "a96a03dab3a26335"
            ],
            [
                "5e666f6ef9bf1e74"
            ],
            [
                "a45a4f2438934378"
            ]
        ]
    },
    {
        "id": "51e9ffee4c0bc96b",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "8",
        "invert": true,
        "x": 410,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4d7a3d34f6c7c660",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "9",
        "invert": true,
        "x": 410,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "968be9d3d6d4eebf",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "10",
        "invert": true,
        "x": 410,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "0ea16f9f74190e0f",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "11",
        "invert": true,
        "x": 410,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "2f6aac866698cfdc",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "12",
        "invert": true,
        "x": 410,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "a96a03dab3a26335",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "13",
        "invert": true,
        "x": 410,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a45a4f2438934378",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "15",
        "invert": true,
        "x": 410,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "5e666f6ef9bf1e74",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "14",
        "invert": true,
        "x": 410,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "f2b73ec8783670eb",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "d": true,
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "17",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 120,
        "wires": []
    },
    {
        "id": "6c1e1dc4910a7401",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "d": true,
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "27",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 220,
        "wires": []
    },
    {
        "id": "70f12259a4a7ad76",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "d": true,
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "22",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 320,
        "wires": []
    },
    {
        "id": "a06c202dae056775",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "d": true,
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "10",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 420,
        "wires": []
    },
    {
        "id": "ecd927f10a908484",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "d": true,
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "9",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 520,
        "wires": []
    },
    {
        "id": "ab52291981ecc883",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "d": true,
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "11",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 620,
        "wires": []
    },
    {
        "id": "0ee1e822b54e8ba0",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "d": true,
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "5",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 820,
        "wires": []
    },
    {
        "id": "827313b3d4fdaa84",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "d": true,
        "name": "PIN: 27 (node.pin=0, not editable through UI)",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "0",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 490,
        "y": 720,
        "wires": [],
        "info": "This node points to PIN 27 (BCM GPIO 0), \nwhich is disabled in the `pi-gpiod` UI.\n\nIn order to re-set the pin value to 0, \nif changed, it's advisable to export \nthe node and reimport it after modifying \nthe `pin` value in the JSON block."
    },
    {
        "id": "41b66de42d91cee8",
        "type": "function",
        "z": "d843692079f79c4f",
        "name": "Parse payload",
        "func": "const {\n    relay_position='',\n    mqtt_topic,\n    state\n} = msg.payload;\n\nconst topic = `cmnd/${mqtt_topic}/POWER${relay_position}`;\n\nreturn {\n    topic,\n    payload: state ? 'on' : 'off',\n    qos: 2\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 80,
        "wires": [
            [
                "e1924512decc72e2"
            ]
        ]
    },
    {
        "id": "3ffcd74351762851",
        "type": "switch",
        "z": "d843692079f79c4f",
        "name": "Vendor type",
        "property": "payload.vendor_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "tasmota",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 100,
        "wires": [
            [
                "41b66de42d91cee8"
            ],
            [
                "b68f65dc6383d334"
            ]
        ]
    },
    {
        "id": "b68f65dc6383d334",
        "type": "function",
        "z": "d843692079f79c4f",
        "name": "Throw error",
        "func": "const {\n    vendor_id\n} = msg.payload;\n\nthrow { type: `invalid_vendor_id`, vendor_id };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e1924512decc72e2",
        "type": "mqtt out",
        "z": "d843692079f79c4f",
        "name": "Dispatch MQTT command",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "82aef1b2f5d6d0c5",
        "type": "function",
        "z": "e0baa17c5072b7d3",
        "name": "Compose query",
        "func": "const payload = {\n    sql_query: 'select * from usb_devices'\n}\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "5dc5371dfb879bae"
            ]
        ]
    },
    {
        "id": "5dc5371dfb879bae",
        "type": "subflow:2f860c0929d372d8",
        "z": "e0baa17c5072b7d3",
        "name": "",
        "x": 360,
        "y": 80,
        "wires": [
            [
                "043806d87c0eb8f3"
            ]
        ]
    },
    {
        "id": "043806d87c0eb8f3",
        "type": "function",
        "z": "e0baa17c5072b7d3",
        "name": "`.rule` file content",
        "func": "const payload = msg.payload.map(item => {\n    const {\n        device_key,\n        device_spec\n    } = item;\n\n    const {\n        vendor_id,\n        product_id\n    } = JSON.parse(device_spec);\n\n    return `KERNEL==\"tty*\", ATTRS{idVendor}==\"${vendor_id.replace('0x', '')}\", ATTRS{idProduct}==\"${product_id.replace('0x', '')}\", MODE:=\"0666\", SYMLINK+=\"${device_key}\"`\n}).join(\"\\n\");\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 80,
        "wires": [
            [
                "d995c5942c7f9f0c"
            ]
        ]
    },
    {
        "id": "d995c5942c7f9f0c",
        "type": "file",
        "z": "e0baa17c5072b7d3",
        "name": "",
        "filename": "/lib/udev/rules.d/99-vanpi-usb-devices.rules",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 830,
        "y": 80,
        "wires": [
            [
                "3483775fb8fe0b42"
            ]
        ]
    },
    {
        "id": "3483775fb8fe0b42",
        "type": "exec",
        "z": "e0baa17c5072b7d3",
        "command": "service udev restart && udevadm trigger",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1180,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "779b79e0cc17eefe",
        "type": "subflow:2f860c0929d372d8",
        "z": "d88de85075ac25db",
        "name": "",
        "x": 360,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ec0297ab17af6839",
        "type": "function",
        "z": "d88de85075ac25db",
        "name": "Compose query",
        "func": "const sql_query = `\n  create or replace view usb_devices\n\n  as\n\n  select\n    :gpsd_device_key as device_key,\n    value as device_spec\n  from settings\n  where setting_key = 'gpsd_usb_device'\n\n  union all\n\n  select\n    :zigbee_device_key as device_key,\n    value as device_spec\n  from settings\n  where setting_key = 'zigbee_usb_device'\n`;\n\nconst params = { \n  gpsd_device_key: env.get('GPSD_UDEV_KEY'),\n  zigbee_device_key: env.get('ZIGBEE_UDEV_KEY')\n};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "779b79e0cc17eefe"
            ]
        ]
    },
    {
        "id": "a85ad1d6b4e922a4",
        "type": "subflow:44f3ed9f999bd3a8",
        "z": "d1e3712ec6c2128d",
        "name": "",
        "x": 600,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8276b42967ce2963",
        "type": "switch",
        "z": "d1e3712ec6c2128d",
        "name": "Device type",
        "property": "payload.device_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "jbd",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "cc34d9c66177e492"
            ],
            [
                "5f3fc687b18afa45"
            ]
        ]
    },
    {
        "id": "cc34d9c66177e492",
        "type": "switch",
        "z": "d1e3712ec6c2128d",
        "name": "Connection type",
        "property": "payload.connection_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ble",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "a85ad1d6b4e922a4"
            ],
            [
                "5f3fc687b18afa45"
            ]
        ]
    },
    {
        "id": "5f3fc687b18afa45",
        "type": "function",
        "z": "d1e3712ec6c2128d",
        "name": "Throw error",
        "func": "const { payload } = msg;\n\nthrow {\n    type: 'invalid_request',\n    payload\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "9a24ef20470b8ef8",
        "type": "catch",
        "z": "d1e3712ec6c2128d",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 420,
        "y": 260,
        "wires": [
            [
                "cff0d2d68e414164"
            ]
        ]
    },
    {
        "id": "cff0d2d68e414164",
        "type": "function",
        "z": "d1e3712ec6c2128d",
        "name": "Parse error",
        "func": "const { error } = msg;\nlet { message } = error;\n\ntry {\n    message = JSON.parse(message);\n} catch(err) {}\n\nreturn {\n    ...msg,\n    statusCode: 400,\n    payload: {\n        error: {\n            ...error,\n            message\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "560065fbfef44112",
        "type": "function",
        "z": "1fcb65ecb479780e",
        "name": "Get `global.temperature_state`",
        "func": "const payload = global.get('temperature_state') || {};\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c1ca75ba04464a24",
        "type": "subflow:2f860c0929d372d8",
        "z": "43ab01fa1b483aad",
        "name": "",
        "x": 400,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "adf17e5e98e12d95",
        "type": "function",
        "z": "43ab01fa1b483aad",
        "name": "Compose query",
        "func": "const sql_query = `\n  create or replace view mqtt_devices\n\n  as\n\n  select\n    'water_tank' as device_type,\n    id as device_id,\n    json_unquote(json_extract(connection_params, '$.mqtt_topic')) as mqtt_topic\n  from water_tanks\n  where connection_type = 'mqtt'\n`;\n\nconst params = {};\n\nreturn {\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            [
                "c1ca75ba04464a24"
            ]
        ]
    },
    {
        "id": "b27fc867cae90a0f",
        "type": "switch",
        "z": "2af61905d791930b",
        "name": "Value > 0",
        "property": "payload.value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "84c9c3b979ac8442"
            ]
        ]
    },
    {
        "id": "84c9c3b979ac8442",
        "type": "function",
        "z": "2af61905d791930b",
        "name": "Compose volumetric attributes query",
        "func": "const {\n  device_id,\n  device_type,\n  value\n} = msg.payload;\n\nconst sql_query = `\n  select\n    volumetric_type,\n    volumetric_params\n  from water_tanks\n  where id = :device_id\n`;\n\nconst params = {\n  device_id\n};\n\nreturn {\n  ...msg,\n  mqtt_payload: {\n    device_id,\n    value\n  },\n  payload: {\n    sql_query,\n    params\n  }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 80,
        "wires": [
            [
                "9e859df6d55df580"
            ]
        ]
    },
    {
        "id": "9e859df6d55df580",
        "type": "subflow:2f860c0929d372d8",
        "z": "2af61905d791930b",
        "name": "",
        "x": 680,
        "y": 80,
        "wires": [
            [
                "5b0883d895bf1c0f"
            ]
        ]
    },
    {
        "id": "0826298b22e97e05",
        "type": "switch",
        "z": "2af61905d791930b",
        "name": "Switch `volumetric_type`",
        "property": "payload.volumetric_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "rectangular",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cylindrical",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 80,
        "wires": [
            [
                "538b31be0df29263"
            ],
            [
                "3d3606ea68b64a29"
            ]
        ]
    },
    {
        "id": "538b31be0df29263",
        "type": "function",
        "z": "2af61905d791930b",
        "name": "Calculate total and remaining volume",
        "func": "const { device_id } = msg.mqtt_payload;\n\nconst {\n    sensor_distance_when_full,\n    sensor_distance_from_surface,\n    height,\n    width,\n    length\n} = msg.payload.volumetric_params;\n\nconst total_volume_liters = height * width * length / 1000;\nconst remaining_volume_liters = (\n    Math.max(\n        0, \n        (\n            height\n            - sensor_distance_from_surface\n            + sensor_distance_when_full\n        ) * width * length\n    ) / 1000\n);\n\nreturn {\n    ...msg,\n    payload: {\n        device_id,\n        total_volume_liters,\n        sensor_distance_from_surface,\n        sensor_distance_when_full,\n        remaining_volume_liters\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 60,
        "wires": [
            [
                "da3c73fc6dfbca7e"
            ]
        ]
    },
    {
        "id": "da3c73fc6dfbca7e",
        "type": "function",
        "z": "2af61905d791930b",
        "name": "Update `global.water_tanks_state`",
        "func": "const water_tanks_state = global.get('water_tanks_state');\n\nconst {\n    device_id,\n    ...rest\n} = msg.payload;\n\nconst new_water_tanks_state = {\n    ...water_tanks_state,\n    [device_id]: rest\n}\n\nglobal.set('water_tanks_state', new_water_tanks_state);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3d3606ea68b64a29",
        "type": "function",
        "z": "2af61905d791930b",
        "name": "Calculate total and remaining volume",
        "func": "const { device_id } = msg.mqtt_payload;\n\nconst {\n    sensor_distance_from_surface,\n    sensor_distance_when_full,\n    height,\n    diameter\n} = msg.payload;\n\nconst square_radius = Math.pow(diameter / 2, 2);\nconst total_volume_liters = Math.PI * square_radius * height / 1000;\n\n// Calculate the remaining volume based on the liquid distance\nconst remaining_volume_liters = (\n    Math.max(\n        0,\n        (\n            height\n            - sensor_distance_from_surface\n            + sensor_distance_when_full\n        ) * Math.PI * square_radius\n    )\n);\n\nreturn {\n    ...msg,\n    payload: {\n        device_id,\n        total_volume_liters,\n        sensor_distance_from_surface,\n        remaining_volume_liters\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 120,
        "wires": [
            [
                "da3c73fc6dfbca7e"
            ]
        ]
    },
    {
        "id": "5b0883d895bf1c0f",
        "type": "function",
        "z": "2af61905d791930b",
        "name": "Parse volumetric params",
        "func": "const {\n    volumetric_params\n} = msg.payload[0];\n\nconst {\n    device_id,\n    value\n} = msg.mqtt_payload;\n\nconst sensor_distance_from_surface = parseInt(value);\n\nconst parsed_params = JSON.parse(volumetric_params);\n\nconst height = parseInt(parsed_params.height);\nconst width = parseInt(parsed_params.width);\nconst length = parseInt(parsed_params.length);\nconst diameter = parseInt(parsed_params.diameter);\nconst sensor_distance_when_full = parseInt(parsed_params.sensor_distance_when_full);\n\nreturn {\n    ...msg,\n    payload: {\n        ...msg.payload[0],\n        volumetric_params: {\n            height,\n            width,\n            length,\n            diameter,\n            sensor_distance_when_full,\n            sensor_distance_from_surface\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 80,
        "wires": [
            [
                "0826298b22e97e05"
            ]
        ]
    },
    {
        "id": "5f4411a7693f4453",
        "type": "switch",
        "z": "5006edf73217beed",
        "name": "Device type",
        "property": "payload.device_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "mqtt",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 160,
        "wires": [
            [
                "34a42f464da15f1e"
            ],
            [
                "9f0fa0e589e79c19"
            ]
        ]
    },
    {
        "id": "34a42f464da15f1e",
        "type": "switch",
        "z": "5006edf73217beed",
        "name": "Connection type",
        "property": "payload.connection_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "mqtt",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 120,
        "wires": [
            [
                "20746b7155acadd5"
            ],
            [
                "9f0fa0e589e79c19"
            ]
        ]
    },
    {
        "id": "9f0fa0e589e79c19",
        "type": "function",
        "z": "5006edf73217beed",
        "name": "Throw error",
        "func": "const { payload } = msg;\n\nthrow {\n    type: 'invalid_request',\n    payload\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "0777dcc46eeca04b",
        "type": "catch",
        "z": "5006edf73217beed",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 460,
        "y": 260,
        "wires": [
            [
                "68bba093d0234b34"
            ]
        ]
    },
    {
        "id": "68bba093d0234b34",
        "type": "function",
        "z": "5006edf73217beed",
        "name": "Parse error",
        "func": "const { error } = msg;\nlet { message } = error;\n\ntry {\n    message = JSON.parse(message);\n} catch(err) {}\n\nreturn {\n    ...msg,\n    statusCode: 400,\n    payload: {\n        error: {\n            ...error,\n            message\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "20746b7155acadd5",
        "type": "function",
        "z": "5006edf73217beed",
        "name": "Get water tank state",
        "func": "const water_tanks_state = global.get('water_tanks_state') || {};\n\nconst { device_id } = msg.payload;\n\nreturn {\n    ...msg,\n    payload: water_tanks_state[device_id]\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4a6ce239161630fd",
        "type": "function",
        "z": "d522f6d2f07435cd",
        "name": "Get container info",
        "func": "const { service_name } = msg;\nconst service = msg.payload.find(i => {\n    return i['Names'].includes(`/${service_name}`)\n});\n\nreturn {\n    ...msg,\n    payload: service\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "0d5b2114da75e3d1",
        "type": "function",
        "z": "d522f6d2f07435cd",
        "name": "Validate request",
        "func": "const { service_name } = msg.payload;\n\nif (!service_name) {\n    throw { type: 'invalid_request' }\n};\n\nreturn {\n    ...msg,\n    service_name\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "99ccd3cca2dd4597"
            ]
        ]
    },
    {
        "id": "99ccd3cca2dd4597",
        "type": "subflow:9c0f55db9b5a4462",
        "z": "d522f6d2f07435cd",
        "name": "",
        "x": 420,
        "y": 80,
        "wires": [
            [
                "c2b9d9ba03fcdc2b"
            ]
        ]
    },
    {
        "id": "a49dfc6056dda404",
        "type": "http request",
        "z": "d522f6d2f07435cd",
        "name": "Portainer API request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-api-key",
                "valueType": "msg",
                "valueValue": "access_token"
            }
        ],
        "x": 860,
        "y": 80,
        "wires": [
            [
                "4a6ce239161630fd"
            ]
        ]
    },
    {
        "id": "c2b9d9ba03fcdc2b",
        "type": "function",
        "z": "d522f6d2f07435cd",
        "name": "Compose request",
        "func": "const api_url = global.get('portainer_api_url');\n\nconst { value: access_token } = msg.payload[0];\n\nconst url = `${api_url}/docker/containers/json?all=true`\n\nreturn {\n    ...msg,\n    url,\n    access_token\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 80,
        "wires": [
            [
                "a49dfc6056dda404"
            ]
        ]
    },
    {
        "id": "352a53d8795dfcbb",
        "type": "function",
        "z": "9c0f55db9b5a4462",
        "name": "Get Portainer access token query",
        "func": "const sql_query = `\n  select value\n  from settings\n  where setting_key = 'portainer_access_token'\n`;\n\nconst params = {};\n\nreturn {\n    ...msg,\n    payload: {\n        sql_query,\n        params\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            [
                "eb520c589947876d"
            ]
        ]
    },
    {
        "id": "eb520c589947876d",
        "type": "subflow:2f860c0929d372d8",
        "z": "9c0f55db9b5a4462",
        "name": "",
        "x": 480,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "932fb4a01c4811ce",
        "type": "subflow:d522f6d2f07435cd",
        "z": "7b9d1f6f5864ccce",
        "name": "",
        "x": 250,
        "y": 80,
        "wires": [
            [
                "83c260bfccf56224"
            ]
        ]
    },
    {
        "id": "83c260bfccf56224",
        "type": "function",
        "z": "7b9d1f6f5864ccce",
        "name": "Set `container_id`",
        "func": "const container_id = msg.payload['Id'];\n\nreturn {\n    ...msg,\n    container_id\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 80,
        "wires": [
            [
                "a6fbba7a7bdee225"
            ]
        ]
    },
    {
        "id": "08e96559c84b53f6",
        "type": "http request",
        "z": "7b9d1f6f5864ccce",
        "name": "Portainer API request",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-api-key",
                "valueType": "msg",
                "valueValue": "access_token"
            }
        ],
        "x": 1140,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "a6fbba7a7bdee225",
        "type": "subflow:9c0f55db9b5a4462",
        "z": "7b9d1f6f5864ccce",
        "name": "",
        "x": 700,
        "y": 80,
        "wires": [
            [
                "db260d6111a6b71f"
            ]
        ]
    },
    {
        "id": "db260d6111a6b71f",
        "type": "function",
        "z": "7b9d1f6f5864ccce",
        "name": "Compose request",
        "func": "const api_url = global.get('portainer_api_url');\n\nconst { container_id } = msg;\nconst { value: access_token } = msg.payload[0];\n\nconst url = `${api_url}/docker/containers/${container_id}/restart`\n\nreturn {\n    ...msg,\n    url,\n    access_token\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 80,
        "wires": [
            [
                "08e96559c84b53f6"
            ]
        ]
    },
    {
        "id": "f7a70eb3ee7a6e7c",
        "type": "subflow:48376301d7cf8ab5",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "5454baccb3adcf75"
            ]
        ]
    },
    {
        "id": "0a1d29608ba1f9c3",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/relays/state`",
        "url": "api/v1/relays/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "f7a70eb3ee7a6e7c"
            ]
        ]
    },
    {
        "id": "5454baccb3adcf75",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 600,
        "y": 100,
        "wires": []
    },
    {
        "id": "f6fe2ecb7716291c",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/gps_values`",
        "url": "api/v1/gps_values",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "6ccf70ed017a483e"
            ]
        ]
    },
    {
        "id": "6ccf70ed017a483e",
        "type": "subflow:cd03e8b953118d1f",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 380,
        "y": 300,
        "wires": [
            [
                "db72e358f763ea55"
            ]
        ]
    },
    {
        "id": "db72e358f763ea55",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 540,
        "y": 300,
        "wires": []
    },
    {
        "id": "0f0bba26d386cac0",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "POST `api/v1/relays/state`",
        "url": "api/v1/relays/state",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "1fdbc5f6e83fb59b"
            ]
        ]
    },
    {
        "id": "03af40a681e75b74",
        "type": "subflow:3ee3b10c02a9dae4",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 570,
        "y": 140,
        "wires": [
            [
                "41da5c626064985a"
            ]
        ]
    },
    {
        "id": "1fdbc5f6e83fb59b",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Parse request",
        "func": "const payload = msg.req.body;\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "03af40a681e75b74"
            ]
        ]
    },
    {
        "id": "7d50cc6af9fcf19b",
        "type": "subflow:b3276c87a286f102",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 400,
        "y": 380,
        "wires": [
            [
                "188a549a1f51eeb4"
            ]
        ]
    },
    {
        "id": "2c1d6d5eda93c0da",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/usb_devices`",
        "url": "api/v1/usb_devices",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "7d50cc6af9fcf19b"
            ]
        ]
    },
    {
        "id": "188a549a1f51eeb4",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 580,
        "y": 380,
        "wires": []
    },
    {
        "id": "d8869dc1f86645a1",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET api/v1/batteries/:connection_type/:device_type/:device_id/state`",
        "url": "api/v1/batteries/:connection_type/:device_type/:device_id/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 500,
        "wires": [
            [
                "c338ef6230fc84a3"
            ]
        ]
    },
    {
        "id": "9c9dedb968da9368",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1040,
        "y": 500,
        "wires": []
    },
    {
        "id": "c338ef6230fc84a3",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Parse request",
        "func": "const {\n    connection_type,\n    device_type,\n    device_id\n} = msg.req.params;\n\nreturn {\n    ...msg,\n    payload: {\n        connection_type,\n        device_type,\n        device_id\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 500,
        "wires": [
            [
                "101c0ecc3e216c58"
            ]
        ]
    },
    {
        "id": "101c0ecc3e216c58",
        "type": "subflow:d1e3712ec6c2128d",
        "z": "181d977a8b81274c",
        "x": 860,
        "y": 500,
        "wires": [
            [
                "9c9dedb968da9368"
            ]
        ]
    },
    {
        "id": "41da5c626064985a",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 740,
        "y": 140,
        "wires": []
    },
    {
        "id": "7beb665f89ba6397",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/temperature_values`",
        "url": "api/v1/temperature_values",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 220,
        "wires": [
            [
                "6d491cd23c82b12a"
            ]
        ]
    },
    {
        "id": "1beaa2df69f1f2f6",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 720,
        "y": 220,
        "wires": []
    },
    {
        "id": "6d491cd23c82b12a",
        "type": "subflow:1fcb65ecb479780e",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "1beaa2df69f1f2f6"
            ]
        ]
    },
    {
        "id": "c938af4e7a78375a",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET api/v1/water_tanks/:connection_type/:device_type/:device_id/state`",
        "url": "api/v1/water_tanks/:connection_type/:device_type/:device_id/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 320,
        "y": 560,
        "wires": [
            [
                "d3eb22cde699bee3"
            ]
        ]
    },
    {
        "id": "53093d60384f9fd1",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1080,
        "y": 560,
        "wires": []
    },
    {
        "id": "d3eb22cde699bee3",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Parse request",
        "func": "const {\n    connection_type,\n    device_type,\n    device_id\n} = msg.req.params;\n\nreturn {\n    ...msg,\n    payload: {\n        connection_type,\n        device_type,\n        device_id\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 560,
        "wires": [
            [
                "69d8b1cca223c818"
            ]
        ]
    },
    {
        "id": "69d8b1cca223c818",
        "type": "subflow:5006edf73217beed",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 890,
        "y": 560,
        "wires": [
            [
                "53093d60384f9fd1"
            ]
        ]
    },
    {
        "id": "9d18bcda6a2e63be",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "PUT `api/v1/settings/:setting_key`",
        "url": "api/v1/settings/:setting_key",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 700,
        "wires": [
            [
                "b803672cf71ec8e9"
            ]
        ]
    },
    {
        "id": "31a5ed7eed82404a",
        "type": "subflow:e0baa17c5072b7d3",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 1370,
        "y": 620,
        "wires": [
            [
                "1f97e6fba379a917"
            ]
        ]
    },
    {
        "id": "a8316479d2c8618f",
        "type": "switch",
        "z": "181d977a8b81274c",
        "name": "Switch `setting_key`",
        "property": "req.params.setting_key",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "gpsd_usb_device",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "zigbee_usb_device",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1100,
        "y": 680,
        "wires": [
            [
                "31a5ed7eed82404a"
            ],
            [
                "b584c6951067cf9d"
            ],
            [
                "fd627450ae8b6d74"
            ]
        ]
    },
    {
        "id": "b803672cf71ec8e9",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Compose update query",
        "func": "const { setting_key } = msg.req.params;\n\nconst {\n    label,\n    value\n} = msg.payload;\n\nconst sql_query = `\n  update settings \n    set \n      label = :label,\n      value = :value\n  where setting_key = :setting_key\n`;\n\nconst params = {\n    label,\n    value,\n    setting_key\n};\n\nreturn {\n    ...msg,\n    payload: {\n        sql_query,\n        params\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 700,
        "wires": [
            [
                "77840cd1f12c0fdc"
            ]
        ]
    },
    {
        "id": "77840cd1f12c0fdc",
        "type": "subflow:2f860c0929d372d8",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 660,
        "y": 700,
        "wires": [
            [
                "f1ec4f73fe87f228"
            ]
        ]
    },
    {
        "id": "b1498895bc9d6bb5",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 2600,
        "y": 620,
        "wires": []
    },
    {
        "id": "b584c6951067cf9d",
        "type": "subflow:e0baa17c5072b7d3",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 1370,
        "y": 680,
        "wires": [
            [
                "a71b394d9bd662e8"
            ]
        ]
    },
    {
        "id": "a71b394d9bd662e8",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Get `zigbee2mqtt` container",
        "func": "return {\n    ...msg,\n    payload: {\n        service_name: 'zigbee2mqtt'\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 680,
        "wires": [
            [
                "0c6c5ed7d8d9e1c1"
            ]
        ]
    },
    {
        "id": "0c6c5ed7d8d9e1c1",
        "type": "subflow:7b9d1f6f5864ccce",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 1880,
        "y": 680,
        "wires": [
            [
                "bbb923b1ade37476"
            ]
        ]
    },
    {
        "id": "bbb923b1ade37476",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 2080,
        "y": 680,
        "wires": []
    },
    {
        "id": "fd627450ae8b6d74",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1320,
        "y": 800,
        "wires": []
    },
    {
        "id": "1f97e6fba379a917",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Get `gpsd` container",
        "func": "return {\n    ...msg,\n    payload: {\n        service_name: 'gpsd'\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 620,
        "wires": [
            [
                "0c51548a484b88fc"
            ]
        ]
    },
    {
        "id": "0c51548a484b88fc",
        "type": "subflow:7b9d1f6f5864ccce",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 1840,
        "y": 620,
        "wires": [
            [
                "f6e6fbb00c336018"
            ]
        ]
    },
    {
        "id": "f6e6fbb00c336018",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Get `vanpi-gpsd-to-mqtt` container",
        "func": "return {\n    ...msg,\n    payload: {\n        service_name: 'vanpi-gpsd-to-mqtt'\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 620,
        "wires": [
            [
                "5e73a49120a369b5"
            ]
        ]
    },
    {
        "id": "5e73a49120a369b5",
        "type": "subflow:7b9d1f6f5864ccce",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 2400,
        "y": 620,
        "wires": [
            [
                "b1498895bc9d6bb5"
            ]
        ]
    },
    {
        "id": "14124682afec4cd3",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "POST `api/v1/mqtt_hub/restart`",
        "url": "api/v1/mqtt_hub/restart",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 860,
        "wires": [
            [
                "83e16f70b82fb8a3"
            ]
        ]
    },
    {
        "id": "83e16f70b82fb8a3",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Get `vanpi-mqtt-hub` container",
        "func": "return {\n    ...msg,\n    payload: {\n        service_name: 'vanpi-mqtt-hub'\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 860,
        "wires": [
            [
                "af5125a4b90f941b"
            ]
        ]
    },
    {
        "id": "af5125a4b90f941b",
        "type": "subflow:7b9d1f6f5864ccce",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 740,
        "y": 860,
        "wires": [
            [
                "aef8160a036e3305"
            ]
        ]
    },
    {
        "id": "aef8160a036e3305",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 940,
        "y": 860,
        "wires": []
    },
    {
        "id": "f1ec4f73fe87f228",
        "type": "switch",
        "z": "181d977a8b81274c",
        "name": "`value` is present",
        "property": "req.body.value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 700,
        "wires": [
            [
                "a8316479d2c8618f"
            ],
            [
                "fd627450ae8b6d74"
            ]
        ]
    },
    {
        "id": "f7360c1818b761fb",
        "type": "inject",
        "z": "e394437c1a103158",
        "name": "Execute at start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "2dea7fa39895542b",
                "687a7ba2e7fefc00"
            ]
        ]
    },
    {
        "id": "2dea7fa39895542b",
        "type": "subflow:d88de85075ac25db",
        "z": "e394437c1a103158",
        "name": "",
        "x": 410,
        "y": 200,
        "wires": []
    },
    {
        "id": "fa44778ce07e4609",
        "type": "inject",
        "z": "e394437c1a103158",
        "name": "Every 15s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "081541771c01eea7"
            ]
        ]
    },
    {
        "id": "081541771c01eea7",
        "type": "subflow:c30c47ad0a20b80b",
        "z": "e394437c1a103158",
        "name": "",
        "x": 370,
        "y": 340,
        "wires": []
    },
    {
        "id": "687a7ba2e7fefc00",
        "type": "subflow:43ab01fa1b483aad",
        "z": "e394437c1a103158",
        "name": "",
        "x": 420,
        "y": 260,
        "wires": []
    },
    {
        "id": "21532896ca9f3e64",
        "type": "function",
        "z": "e394437c1a103158",
        "name": "(On Start) Set global variables",
        "func": "",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "global.set('portainer_api_url', 'http://127.0.0.1:9000/api/endpoints/2');",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "fc70ba6a396464e2",
        "type": "subflow:924d506d524e2f1f",
        "z": "e394437c1a103158",
        "name": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "f2b8b0a08c62f6b1",
        "type": "mqtt in",
        "z": "412a66feda2814e4",
        "name": "Listen to Hub MQTT topic",
        "topic": "${HUB_MQTT_TOPIC}",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "3ee780688134ac27"
            ]
        ]
    },
    {
        "id": "3ee780688134ac27",
        "type": "switch",
        "z": "412a66feda2814e4",
        "name": "Switch `device_type`",
        "property": "payload.device_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "water_tank",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 80,
        "wires": [
            [
                "0d1af9c425416463"
            ]
        ]
    },
    {
        "id": "9cfa201de2d41045",
        "type": "subflow:2af61905d791930b",
        "z": "412a66feda2814e4",
        "name": "",
        "x": 860,
        "y": 80,
        "wires": []
    },
    {
        "id": "0d1af9c425416463",
        "type": "function",
        "z": "412a66feda2814e4",
        "name": "Parse payload",
        "func": "const { payload } = msg;\nconst { message, ...rest } = payload;\n\nreturn {\n    ...msg,\n    payload: {\n        ...rest,\n        value: message\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 80,
        "wires": [
            [
                "9cfa201de2d41045"
            ]
        ]
    },
    {
        "id": "dd6f48cb877d8037",
        "type": "subflow:3ee3b10c02a9dae4",
        "z": "2f6480327ea906c3",
        "name": "",
        "x": 990,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f929074e5e6b01b3",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Toggle",
        "func": "const {\n    payload,\n    relay_position\n} = msg;\n\nconst { state=0 } = payload;\n\nreturn {\n    payload: [\n        {\n            relay_type: 'relay',\n            relay_position,\n            actor: 'test',\n            ...state ? {\n                mode: 'unsubscribe'\n            } : {\n                state: true,\n                mode: 'subscribe'\n            }\n        }\n    ]\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 180,
        "wires": [
            [
                "dd6f48cb877d8037"
            ]
        ]
    },
    {
        "id": "82815de83cf25863",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "90c4a3afd5076e64"
            ]
        ]
    },
    {
        "id": "1bccc0445d55310b",
        "type": "subflow:d2eb75050cc2ea33",
        "z": "2f6480327ea906c3",
        "name": "",
        "x": 660,
        "y": 180,
        "wires": [
            [
                "f929074e5e6b01b3"
            ]
        ]
    },
    {
        "id": "90c4a3afd5076e64",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 1",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 1\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "c2ab88a316f52251",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "744075e5aa78dc4e"
            ]
        ]
    },
    {
        "id": "744075e5aa78dc4e",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 2",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 2\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "407ae424c06eceb1",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "1a2f7e2de813c471"
            ]
        ]
    },
    {
        "id": "1a2f7e2de813c471",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 3",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 3\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "4d84a5ab67cc4c3b",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "2a03fd0d13e62d2a"
            ]
        ]
    },
    {
        "id": "2a03fd0d13e62d2a",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 4",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 4\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 280,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "1411fd958d971939",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 340,
        "wires": [
            [
                "59b24134294bfac0"
            ]
        ]
    },
    {
        "id": "59b24134294bfac0",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 5",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 5\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "cf282f06380978f6",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 400,
        "wires": [
            [
                "292e4ff1d9d68e2c"
            ]
        ]
    },
    {
        "id": "292e4ff1d9d68e2c",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 6",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 6\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 400,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "708083cc14d12329",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 460,
        "wires": [
            [
                "9838e74d18b5d5bc"
            ]
        ]
    },
    {
        "id": "9838e74d18b5d5bc",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 7",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 7\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 460,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "b6ff1858607e4cf5",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 520,
        "wires": [
            [
                "408db813edd47217"
            ]
        ]
    },
    {
        "id": "408db813edd47217",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 8",
        "func": "return {\n    relay_type: 'relay',\n    relay_position: 8\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 520,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "07902ae4b7523777",
        "type": "inject",
        "z": "43f1ddd45d338663",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "23e3d5833d4f01d4"
            ]
        ]
    },
    {
        "id": "23e3d5833d4f01d4",
        "type": "function",
        "z": "43f1ddd45d338663",
        "name": "Set device ID",
        "func": "return {\n    payload: {\n        device_id: 'a4:c1:38:0b:79:22'\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 80,
        "wires": [
            [
                "1e2754fe85a66c65"
            ]
        ]
    },
    {
        "id": "1e2754fe85a66c65",
        "type": "subflow:44f3ed9f999bd3a8",
        "z": "43f1ddd45d338663",
        "name": "",
        "x": 500,
        "y": 80,
        "wires": [
            [
                "7d1a1fc692ff5258"
            ]
        ]
    },
    {
        "id": "7d1a1fc692ff5258",
        "type": "debug",
        "z": "43f1ddd45d338663",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 80,
        "wires": []
    },
    {
        "id": "7ee90873b0cc3487",
        "type": "inject",
        "z": "d06ae3eee692de3d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "684314d35968f05c"
            ]
        ]
    },
    {
        "id": "684314d35968f05c",
        "type": "subflow:b3276c87a286f102",
        "z": "d06ae3eee692de3d",
        "name": "",
        "x": 300,
        "y": 80,
        "wires": [
            [
                "ea8d16ecb29a73ce"
            ]
        ]
    },
    {
        "id": "ea8d16ecb29a73ce",
        "type": "debug",
        "z": "d06ae3eee692de3d",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 80,
        "wires": []
    },
    {
        "id": "d54c61c1d1da4b62",
        "type": "inject",
        "z": "d06ae3eee692de3d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "500502697aeb0feb"
            ]
        ]
    },
    {
        "id": "500502697aeb0feb",
        "type": "subflow:e0baa17c5072b7d3",
        "z": "d06ae3eee692de3d",
        "name": "",
        "x": 330,
        "y": 140,
        "wires": [
            [
                "993171f29d0cb799"
            ]
        ]
    },
    {
        "id": "993171f29d0cb799",
        "type": "debug",
        "z": "d06ae3eee692de3d",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 140,
        "wires": []
    },
    {
        "id": "1e73c37b977c04c8",
        "type": "inject",
        "z": "254fbe7becd93c6d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "6a470f531cdcf5bb"
            ]
        ]
    },
    {
        "id": "43a66530f131fe31",
        "type": "debug",
        "z": "254fbe7becd93c6d",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 80,
        "wires": []
    },
    {
        "id": "6a470f531cdcf5bb",
        "type": "subflow:cd03e8b953118d1f",
        "z": "254fbe7becd93c6d",
        "name": "",
        "x": 300,
        "y": 80,
        "wires": [
            [
                "43a66530f131fe31"
            ]
        ]
    },
    {
        "id": "4b1881351c88a84d",
        "type": "inject",
        "z": "0176619f63694862",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "bce8300f54ab3b55"
            ]
        ]
    },
    {
        "id": "72f8cc92480c9cc5",
        "type": "debug",
        "z": "0176619f63694862",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "bce8300f54ab3b55",
        "type": "subflow:1fcb65ecb479780e",
        "z": "0176619f63694862",
        "name": "",
        "x": 350,
        "y": 80,
        "wires": [
            [
                "72f8cc92480c9cc5"
            ]
        ]
    },
    {
        "id": "0de3a3f38db23062",
        "type": "mqtt in",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "cmnd/tasmota_test/POWER1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 320,
        "y": 180,
        "wires": [
            [
                "c9aeddf2423f02c2"
            ]
        ]
    },
    {
        "id": "955d1b66f57352d9",
        "type": "mqtt out",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "stat/tasmota_test",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 550,
        "y": 320,
        "wires": []
    },
    {
        "id": "8bb39527bc092b84",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 3",
        "func": "return {payload: 'world'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 320,
        "wires": [
            [
                "955d1b66f57352d9"
            ]
        ]
    },
    {
        "id": "c9aeddf2423f02c2",
        "type": "debug",
        "z": "d1fe66a0a15b470a",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 180,
        "wires": []
    },
    {
        "id": "43a1aebb7cadca3b",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "8bb39527bc092b84"
            ]
        ]
    },
    {
        "id": "31482b014b714389",
        "type": "mqtt out",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "cmnd/tasmota_test/POWER1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 690,
        "y": 460,
        "wires": []
    },
    {
        "id": "0dca77c32be0089b",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 4",
        "func": "return {payload: 'ON'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 460,
        "wires": [
            [
                "31482b014b714389"
            ]
        ]
    },
    {
        "id": "b8d8ea038f410cfb",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 460,
        "wires": [
            [
                "0dca77c32be0089b"
            ]
        ]
    },
    {
        "id": "0747aeccd0cf3158",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 5",
        "func": "return {payload: 'OFF'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 520,
        "wires": [
            [
                "31482b014b714389"
            ]
        ]
    },
    {
        "id": "7f8ea82823d00189",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 520,
        "wires": [
            [
                "0747aeccd0cf3158"
            ]
        ]
    },
    {
        "id": "326dafec0bb6c97d",
        "type": "mqtt out",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "cmnd/tasmota_test/POWER2",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 690,
        "y": 620,
        "wires": []
    },
    {
        "id": "24da06e016f85680",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 6",
        "func": "return {payload: 'ON'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 620,
        "wires": [
            [
                "326dafec0bb6c97d"
            ]
        ]
    },
    {
        "id": "1d7c14eff6295053",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 620,
        "wires": [
            [
                "24da06e016f85680"
            ]
        ]
    },
    {
        "id": "e5b8b11f3dc32b95",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 7",
        "func": "return {payload: 'OFF'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 680,
        "wires": [
            [
                "326dafec0bb6c97d"
            ]
        ]
    },
    {
        "id": "672a9251c4214c70",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 680,
        "wires": [
            [
                "e5b8b11f3dc32b95"
            ]
        ]
    },
    {
        "id": "ce34dbaca0b7e2d0",
        "type": "mqtt in",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "water-sensor-test/startup",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 840,
        "wires": [
            [
                "6c93626787f462fb"
            ]
        ]
    },
    {
        "id": "6c93626787f462fb",
        "type": "debug",
        "z": "d1fe66a0a15b470a",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 840,
        "wires": []
    },
    {
        "id": "807e59e6b95fa258",
        "type": "mqtt in",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "water-sensor-test/values",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "c735411758053451",
        "type": "inject",
        "z": "e7a6fe05a4d2b37c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "adfa8d2186a6f889"
            ]
        ]
    },
    {
        "id": "adfa8d2186a6f889",
        "type": "function",
        "z": "e7a6fe05a4d2b37c",
        "name": "Parse request",
        "func": "return {\n    ...msg,\n    payload: {\n        connection_type: 'mqtt',\n        device_type: 'mqtt',\n        device_id: 1\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 100,
        "wires": [
            [
                "4725867557157b87"
            ]
        ]
    },
    {
        "id": "4725867557157b87",
        "type": "subflow:5006edf73217beed",
        "z": "e7a6fe05a4d2b37c",
        "name": "",
        "x": 510,
        "y": 100,
        "wires": [
            [
                "f266801fc9a08cc1"
            ]
        ]
    },
    {
        "id": "f266801fc9a08cc1",
        "type": "debug",
        "z": "e7a6fe05a4d2b37c",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 100,
        "wires": []
    }
]