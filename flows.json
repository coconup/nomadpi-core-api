[
    {
        "id": "2f6480327ea906c3",
        "type": "tab",
        "label": "Relays",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "43f1ddd45d338663",
        "type": "tab",
        "label": "JBD BMS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d06ae3eee692de3d",
        "type": "tab",
        "label": "USB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "254fbe7becd93c6d",
        "type": "tab",
        "label": "GPS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0176619f63694862",
        "type": "tab",
        "label": "Temperature sensor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "181d977a8b81274c",
        "type": "tab",
        "label": "HTTP API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d1fe66a0a15b470a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ee3b10c02a9dae4",
        "type": "subflow",
        "name": "[Relays] dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 480,
                "wires": [
                    {
                        "id": "827e13d335fd312c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 520,
                "wires": [
                    {
                        "id": "827e13d335fd312c",
                        "port": 0
                    },
                    {
                        "id": "d604f0318f30da1e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4e1f9183000d244e",
        "type": "subflow",
        "name": "[Relays] set items state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "8a0ad5065fdbb073"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 80,
                "wires": [
                    {
                        "id": "63d13c5a16c612f0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d2eb75050cc2ea33",
        "type": "subflow",
        "name": "[Relays] Get item state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "ad6e53e4c4004a25"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 80,
                "wires": [
                    {
                        "id": "ad6e53e4c4004a25",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "44f3ed9f999bd3a8",
        "type": "subflow",
        "name": "[JBD BMS] Get battery stats",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "e9419abf35522968"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 80,
                "wires": [
                    {
                        "id": "b034b52cd70cb3d7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "924d506d524e2f1f",
        "type": "subflow",
        "name": "[GPS] Initialize",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "cd03e8b953118d1f",
        "type": "subflow",
        "name": "[GPS] Get info",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "85c5be514632f153"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "85c5be514632f153",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "48376301d7cf8ab5",
        "type": "subflow",
        "name": "[Relays] Get items state",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "b305862eb524c8b9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "b305862eb524c8b9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c30c47ad0a20b80b",
        "type": "subflow",
        "name": "[Temp Sensor] Get temperatures",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c2d74b2b38c9e67b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 80,
                "wires": [
                    {
                        "id": "215a88fad5308406",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b3276c87a286f102",
        "type": "subflow",
        "name": "[USB] Scan devices",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "08e3e221b1ea90ee"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 80,
                "wires": [
                    {
                        "id": "4a1a8de294b7154f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2f860c0929d372d8",
        "type": "subflow",
        "name": "[DB] Run query",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "d3fb6d1d0e15f941"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 80,
                "wires": [
                    {
                        "id": "1c4a76541ff62d0d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "28a3f62edac8391d",
        "type": "subflow",
        "name": "[Relays] GPIO dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 460,
                "wires": [
                    {
                        "id": "97059ba81f6ce727"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d843692079f79c4f",
        "type": "subflow",
        "name": "[Relays] MQTT dispatcher",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "3ffcd74351762851"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e83d5dc5a3f616c1",
        "type": "mcp23017chip",
        "addr": "0x20",
        "interval": "100"
    },
    {
        "id": "fb64b34bb7bd548d",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "f57dd118a2654036",
        "type": "MySQL-Server-Connector",
        "name": "MariaDB",
        "host": "${DB_HOST}",
        "port": "3306",
        "user": "${DB_USER}",
        "password": "${DB_PASSWORD}",
        "tls": false,
        "database": "${DB_NAME}"
    },
    {
        "id": "fff9b047550b9220",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "827e13d335fd312c",
        "type": "subflow:4e1f9183000d244e",
        "z": "3ee3b10c02a9dae4",
        "name": "",
        "x": 250,
        "y": 480,
        "wires": [
            [
                "9e128262d7408f9d"
            ]
        ]
    },
    {
        "id": "9c7423bd52cc2dec",
        "type": "function",
        "z": "3ee3b10c02a9dae4",
        "name": "Parse payload",
        "func": "const {\n    relay_position,\n    state\n} = msg.payload;\n\nreturn {\n    relay_position,\n    payload: state ? 1 : 0\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 400,
        "wires": [
            [
                "816adb2ad456cbd8"
            ]
        ]
    },
    {
        "id": "1aee12fc671bca2f",
        "type": "catch",
        "z": "3ee3b10c02a9dae4",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 140,
        "y": 580,
        "wires": [
            [
                "d604f0318f30da1e"
            ]
        ]
    },
    {
        "id": "d604f0318f30da1e",
        "type": "function",
        "z": "3ee3b10c02a9dae4",
        "name": "Parse error",
        "func": "const { error } = msg;\nlet { message } = error;\n\ntry {\n    message = JSON.parse(message);\n} catch(err) {}\n\nreturn {\n    ...msg,\n    statusCode: 422,\n    payload: {\n        error: {\n            ...error,\n            message\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "9e128262d7408f9d",
        "type": "function",
        "z": "3ee3b10c02a9dae4",
        "name": "Group payloads",
        "func": "const payload = msg.payload.map(item => {\n    const {\n        relay_type,\n        vendor_id,\n        mqtt_topic,\n        relay_position,\n        state\n    } = item;\n    \n    return {\n        payload: {\n            relay_type,\n            vendor_id,\n            mqtt_topic,\n            relay_position,\n            state\n        }\n    }\n});\n\nreturn [payload];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 440,
        "wires": [
            [
                "080e9cb5061c772f"
            ]
        ]
    },
    {
        "id": "080e9cb5061c772f",
        "type": "switch",
        "z": "3ee3b10c02a9dae4",
        "name": "Relay type",
        "property": "payload.relay_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "relay",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "wifi_relay",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 440,
        "wires": [
            [
                "9c7423bd52cc2dec"
            ],
            [
                "248e1755cef2988d"
            ]
        ]
    },
    {
        "id": "816adb2ad456cbd8",
        "type": "subflow:28a3f62edac8391d",
        "z": "3ee3b10c02a9dae4",
        "name": "",
        "x": 1050,
        "y": 400,
        "wires": []
    },
    {
        "id": "248e1755cef2988d",
        "type": "subflow:d843692079f79c4f",
        "z": "3ee3b10c02a9dae4",
        "x": 820,
        "y": 460,
        "wires": []
    },
    {
        "id": "8a0ad5065fdbb073",
        "type": "function",
        "z": "4e1f9183000d244e",
        "name": "Validate new state",
        "func": "const {\n    payload\n} = msg;\n\nif(!Array.isArray(payload)) {\n    throw { type: 'invalid_payload' }\n};\n\nconst relays_state = {\n    ...global.get('relays_state') || {}\n};\n\npayload.forEach(item => {\n    const {\n        relay_type,\n        relay_position,\n        state,\n        actor,\n        mode,\n        vendor_id,\n        mqtt_topic,\n        ...rest\n    } = item;\n\n    const relay_type_state = relays_state[relay_type] || {};\n    const item_state = relay_type_state[relay_position] || {};\n\n    if (\n        [relay_position, relay_type].includes(undefined)\n        || !['wifi_relay', 'relay'].includes(relay_type)\n        || Object.keys(rest).length > 0\n        || (\n            relay_type === 'wifi_relay' \n            && [vendor_id, mqtt_topic].includes(undefined)\n        )\n        || (\n            relay_type === 'relay'\n            && (!!vendor_id || !!mqtt_topic)\n        )\n        || !['subscribe', 'unsubscribe'].includes(mode)\n        || !actor\n        || (state !== undefined && mode === 'unsubscribe')\n        || (state === undefined && mode === 'subscribe')\n    ) {\n        throw { type: 'invalid_payload' }\n    };\n\n    if (\n        mode === 'subscribe'\n        && state !== item_state.state\n        && (item_state.actors || []).length > 0\n    ) {\n        throw {\n            type: 'conflicting_actors_found',\n            relay_type,\n            relay_position,\n            actors: item_state.actors\n        }\n    };\n})\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "63d13c5a16c612f0"
            ]
        ]
    },
    {
        "id": "63d13c5a16c612f0",
        "type": "function",
        "z": "4e1f9183000d244e",
        "name": "Set `global.relays_state`",
        "func": "const {\n    payload\n} = msg;\n\nlet relays_state = {...global.get('relays_state') || {}};\n\nconst newPayload = payload.map(item => {\n    const {\n        relay_type,\n        relay_position,\n        vendor_id,\n        mqtt_topic,\n        state,\n        actor,\n        mode\n    } = item;\n\n    let relay_type_state = relays_state[relay_type] || {};\n    let mqtt_topic_state = relay_type_state[mqtt_topic] || {};\n\n    let item_state;\n    if(relay_type === 'relay') {\n        item_state = relay_type_state[relay_position] || {};\n    } else if(relay_type === 'wifi_relay') {\n        item_state = mqtt_topic_state[relay_position] || {};\n    }\n    \n    item_state.actors ||= [];\n\n    if(mode === 'subscribe') {\n        item_state.state = state;\n        if (!item_state.actors.find(({actor: a}) => a === actor)) {\n            item_state.actors.push({ actor })\n        }\n    } else if(mode === 'unsubscribe') {\n        item_state.actors = item_state.actors.filter(({actor: a}) => a !== actor);\n        if(item_state.actors.length === 0) {\n            item_state.state = false;\n        }\n    }\n\n    if(relay_type === 'relay') {\n        relay_type_state[relay_position] = item_state;\n    } else if(relay_type === 'wifi_relay') {\n        mqtt_topic_state[relay_position] = item_state;\n        relay_type_state[mqtt_topic] = mqtt_topic_state;\n    }\n    \n    relays_state[relay_type] = relay_type_state;\n\n    return {\n        relay_type,\n        relay_position,\n        vendor_id,\n        mqtt_topic,\n        state: item_state.state\n    }\n});\n\nglobal.set('relays_state', relays_state);\n\nreturn {\n    ...msg,\n    payload: newPayload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ad6e53e4c4004a25",
        "type": "function",
        "z": "d2eb75050cc2ea33",
        "name": "Get item state",
        "func": "const {\n    relay_type,\n    mqtt_topic,\n    relay_position\n} = msg;\n\nconst relays_state = {...global.get('relays_state') || {}};\n\nconst relay_type_state = relays_state[relay_type] || {};\n\nlet relay_state;\nif(relay_type === 'wifi_relay') {\n    const mqtt_topic_state = relay_type_state[mqtt_topic] || {};\n    relay_state = mqtt_topic_state[relay_position]; \n} else if(relay_type === 'relay') {\n    relay_state = relay_type_state[relay_position];\n}\n\nreturn {\n    ...msg,\n    payload: relay_state || {}\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e9419abf35522968",
        "type": "function",
        "z": "44f3ed9f999bd3a8",
        "name": "JBD BMS script",
        "func": "const root_scripts_path = env.get('PEKAWAY_SCRIPTS_PATH');\nconst filename = `liontronBmsInfo.py`;\nconst { device_id } = msg.payload;\n\nif(!root_scripts_path) {\n    throw `$PEKAWAY_SCRIPTS_PATH is not set`\n} else if(!device_id) {\n    throw `\\`device_id\\` is required`\n} else {\n    return {\n        payload: `${root_scripts_path}/${filename} -d ${device_id}`\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "5b81d63543932a28"
            ]
        ]
    },
    {
        "id": "5b81d63543932a28",
        "type": "exec",
        "z": "44f3ed9f999bd3a8",
        "command": "python3 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 360,
        "y": 80,
        "wires": [
            [
                "b034b52cd70cb3d7"
            ],
            [],
            []
        ]
    },
    {
        "id": "b034b52cd70cb3d7",
        "type": "json",
        "z": "44f3ed9f999bd3a8",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 530,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "43815fbb22b94432",
        "type": "gpsd",
        "z": "924d506d524e2f1f",
        "name": "",
        "hostname": "127.0.0.1",
        "port": "2947",
        "tpv": true,
        "sky": false,
        "info": false,
        "device": false,
        "gst": false,
        "att": false,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "49ee4acd56fb9817"
            ]
        ]
    },
    {
        "id": "49ee4acd56fb9817",
        "type": "function",
        "z": "924d506d524e2f1f",
        "name": "Set `global.gps_info`",
        "func": "const {\n    payload\n} = msg;\n\nif([2,3].includes(payload.mode || !global.get('gps_info'))) {\n    global.set('gps_info', msg.payload);\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "85c5be514632f153",
        "type": "function",
        "z": "cd03e8b953118d1f",
        "name": "Get `global.gps_info`",
        "func": "const gps = global.get('gps_info');\nconst modes = {\n    0: 'unknown',\n    1: 'no_fix',\n    2: '2d',\n    3: '3d'\n};\n\nif(!gps) {\n    throw `GPS info not available`\n};\n\nreturn {\n    ...msg,\n    payload: {\n        mode: modes[gps.mode],\n        time: gps.time,\n        longitude: gps.lon,\n        latitude: gps.lat,\n        altitude_hae: gps.altHAE,\n        altitude_msl: gps.altMSL,\n        speed: gps.speed,\n        direction: gps.track,\n        climb: gps.climb,\n        estimated_errors: {\n            longitude: gps.epx,\n            latitude: gps.epy,\n            altitude: gps.epv,\n            speed: gps.eps,\n            direction: gps.epd,\n            climb: gps.epc\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b305862eb524c8b9",
        "type": "function",
        "z": "48376301d7cf8ab5",
        "name": "Get GPIO items state",
        "func": "const {\n    _msgid='',\n    ...payload\n} = global.get('relays_state') || {};\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c2d74b2b38c9e67b",
        "type": "function",
        "z": "c30c47ad0a20b80b",
        "name": "Temperature sensor script",
        "func": "const root_scripts_path = env.get('PEKAWAY_SCRIPTS_PATH');\nconst filename = `ds18b20.py`;\n\nif(!root_scripts_path) {\n    throw `$PEKAWAY_SCRIPTS_PATH is not set`\n} else {\n    return {\n        ...msg,\n        payload: `${root_scripts_path}/${filename}`\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "9494fc6e2243e775"
            ]
        ]
    },
    {
        "id": "9494fc6e2243e775",
        "type": "exec",
        "z": "c30c47ad0a20b80b",
        "command": "python3 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "215a88fad5308406"
            ],
            [],
            []
        ]
    },
    {
        "id": "215a88fad5308406",
        "type": "function",
        "z": "c30c47ad0a20b80b",
        "name": "Parse temperatures",
        "func": "const {\n    payload\n} = msg;\n\nlet parsedPayload = {};\n\npayload\n    .split(\"\\n\")\n    .filter(s => !!s)\n    .forEach(string => {\n        const [\n            index,\n            temperature,\n            unit\n        ] = string.trim().split(/[\\s,\\t,\\n]+/);\n\n        parsedPayload[parseInt(index)] = {\n            temperature: parseFloat(temperature),\n            unit\n        }\n    });\n\nreturn {\n    ...msg,\n    payload: parsedPayload\n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "719e21a14994edb0",
        "type": "exec",
        "z": "b3276c87a286f102",
        "command": "python3",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 340,
        "y": 100,
        "wires": [
            [
                "86cffd55d951734a"
            ],
            [],
            []
        ]
    },
    {
        "id": "08e3e221b1ea90ee",
        "type": "function",
        "z": "b3276c87a286f102",
        "name": "Scan USB script",
        "func": "const root_scripts_path = env.get('PEKAWAY_SCRIPTS_PATH');\nconst filename = `usbScan.py`;\n\nif(!root_scripts_path) {\n    throw `$PEKAWAY_SCRIPTS_PATH is not set`\n} else {\n    return {\n        ...msg,\n        payload: `${root_scripts_path}/${filename}`\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 100,
        "wires": [
            [
                "719e21a14994edb0"
            ]
        ]
    },
    {
        "id": "86cffd55d951734a",
        "type": "json",
        "z": "b3276c87a286f102",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 80,
        "wires": [
            [
                "4a1a8de294b7154f"
            ]
        ]
    },
    {
        "id": "4a1a8de294b7154f",
        "type": "function",
        "z": "b3276c87a286f102",
        "name": "Parse items",
        "func": "const {\n    payload\n} = msg;\n\nconst usb_items = payload.map(item => {\n    const {\n        idVendor,\n        idProduct,\n        iManufacturer,\n        iProduct,\n        iSerial\n    } = item;\n\n    const [vendor_id, vendor_name] = idVendor.split(/ (.*)/s, 2);\n    const [product_id, product_name] = idProduct.split(/ (.*)/s, 2);\n    const manufacturer_name = iManufacturer.split(/ (.*)/s, 2)[1];\n    const product_description = iProduct.split(/ (.*)/s, 2)[1];\n    const serial = iSerial.split(/ (.*)/s, 2)[1];\n\n    return {\n        product_id,\n        product_name,\n        vendor_id,\n        vendor_name,\n        manufacturer_name,\n        product_description,\n        serial\n    }\n});\n\nreturn {\n    ...msg,\n    payload: usb_items\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1c4a76541ff62d0d",
        "type": "MySQL-Connector",
        "z": "2f860c0929d372d8",
        "server": "f57dd118a2654036",
        "name": "",
        "x": 340,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d3fb6d1d0e15f941",
        "type": "function",
        "z": "2f860c0929d372d8",
        "name": "Parse payload",
        "func": "const {\n    sql_query,\n    params\n} = msg.payload;\n\nreturn {\n    ...msg,\n    topic: sql_query,\n    payload: params\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "1c4a76541ff62d0d"
            ]
        ]
    },
    {
        "id": "97059ba81f6ce727",
        "type": "switch",
        "z": "28a3f62edac8391d",
        "name": "",
        "property": "relay_position",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 190,
        "y": 460,
        "wires": [
            [
                "f2b73ec8783670eb",
                "51e9ffee4c0bc96b"
            ],
            [
                "6c1e1dc4910a7401",
                "4d7a3d34f6c7c660"
            ],
            [
                "968be9d3d6d4eebf",
                "70f12259a4a7ad76"
            ],
            [
                "0ea16f9f74190e0f",
                "a06c202dae056775"
            ],
            [
                "2f6aac866698cfdc",
                "ecd927f10a908484"
            ],
            [
                "a96a03dab3a26335",
                "ab52291981ecc883"
            ],
            [
                "5e666f6ef9bf1e74",
                "827313b3d4fdaa84"
            ],
            [
                "a45a4f2438934378",
                "0ee1e822b54e8ba0"
            ]
        ]
    },
    {
        "id": "f2b73ec8783670eb",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "17",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 120,
        "wires": []
    },
    {
        "id": "6c1e1dc4910a7401",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "27",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 220,
        "wires": []
    },
    {
        "id": "70f12259a4a7ad76",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "22",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 320,
        "wires": []
    },
    {
        "id": "a06c202dae056775",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "10",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 420,
        "wires": []
    },
    {
        "id": "ecd927f10a908484",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "9",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 520,
        "wires": []
    },
    {
        "id": "ab52291981ecc883",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "11",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 620,
        "wires": []
    },
    {
        "id": "0ee1e822b54e8ba0",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "name": "",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "5",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 380,
        "y": 820,
        "wires": []
    },
    {
        "id": "827313b3d4fdaa84",
        "type": "pi-gpiod out",
        "z": "28a3f62edac8391d",
        "name": "PIN: 27 (node.pin=0, not editable through UI)",
        "host": "${GPIOD_HOST}",
        "port": 8888,
        "pin": "0",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 490,
        "y": 720,
        "wires": [],
        "info": "This node points to PIN 27 (BCM GPIO 0), \nwhich is disabled in the `pi-gpiod` UI.\n\nIn order to re-set the pin value to 0, \nif changed, it's advisable to export \nthe node and reimport it after modifying \nthe `pin` value in the JSON block."
    },
    {
        "id": "51e9ffee4c0bc96b",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "8",
        "invert": true,
        "x": 410,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4d7a3d34f6c7c660",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "9",
        "invert": true,
        "x": 410,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "968be9d3d6d4eebf",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "10",
        "invert": true,
        "x": 410,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "0ea16f9f74190e0f",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "11",
        "invert": true,
        "x": 410,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "2f6aac866698cfdc",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "12",
        "invert": true,
        "x": 410,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "a96a03dab3a26335",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "13",
        "invert": true,
        "x": 410,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a45a4f2438934378",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "15",
        "invert": true,
        "x": 410,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "5e666f6ef9bf1e74",
        "type": "mcp23017output",
        "z": "28a3f62edac8391d",
        "name": "",
        "chip": "e83d5dc5a3f616c1",
        "bitNum": "14",
        "invert": true,
        "x": 410,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "41b66de42d91cee8",
        "type": "function",
        "z": "d843692079f79c4f",
        "name": "Parse payload",
        "func": "const {\n    relay_position='',\n    mqtt_topic,\n    state\n} = msg.payload;\n\nconst topic = `cmnd/${mqtt_topic}/POWER${relay_position}`;\n\nreturn {\n    topic,\n    payload: state ? 'on' : 'off',\n    qos: 2\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 80,
        "wires": [
            [
                "e1924512decc72e2"
            ]
        ]
    },
    {
        "id": "3ffcd74351762851",
        "type": "switch",
        "z": "d843692079f79c4f",
        "name": "Vendor type",
        "property": "payload.vendor_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "tasmota",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 100,
        "wires": [
            [
                "41b66de42d91cee8"
            ],
            [
                "b68f65dc6383d334"
            ]
        ]
    },
    {
        "id": "b68f65dc6383d334",
        "type": "function",
        "z": "d843692079f79c4f",
        "name": "Throw error",
        "func": "const {\n    vendor_id\n} = msg.payload;\n\nthrow { type: `invalid_vendor_id`, vendor_id };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e1924512decc72e2",
        "type": "mqtt out",
        "z": "d843692079f79c4f",
        "name": "Dispatch MQTT command",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "dd6f48cb877d8037",
        "type": "subflow:3ee3b10c02a9dae4",
        "z": "2f6480327ea906c3",
        "name": "",
        "x": 990,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f929074e5e6b01b3",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Toggle",
        "func": "const {\n    payload,\n    relay_position\n} = msg;\n\nconst { state } = payload;\n\nreturn {\n    payload: [\n        {\n            relay_position,\n            state: state === 0 ? 1 : 0,\n            // actor: 'test',\n            // mode: 'subscribe'\n        },\n        {\n            relay_position: relay_position+1,\n            state: state === 0 ? 1 : 0,\n            // actor: 'test',\n            // mode: 'subscribe'\n        }\n    ]\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 180,
        "wires": [
            [
                "dd6f48cb877d8037"
            ]
        ]
    },
    {
        "id": "82815de83cf25863",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "90c4a3afd5076e64"
            ]
        ]
    },
    {
        "id": "1bccc0445d55310b",
        "type": "subflow:d2eb75050cc2ea33",
        "z": "2f6480327ea906c3",
        "name": "",
        "x": 660,
        "y": 180,
        "wires": [
            [
                "f929074e5e6b01b3"
            ]
        ]
    },
    {
        "id": "90c4a3afd5076e64",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 1",
        "func": "return {\n    relay_position: 1\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "c2ab88a316f52251",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "744075e5aa78dc4e"
            ]
        ]
    },
    {
        "id": "744075e5aa78dc4e",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 2",
        "func": "return {\n    relay_position: 2\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "407ae424c06eceb1",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "1a2f7e2de813c471"
            ]
        ]
    },
    {
        "id": "1a2f7e2de813c471",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 3",
        "func": "return {\n    relay_position: 3\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "4d84a5ab67cc4c3b",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "2a03fd0d13e62d2a"
            ]
        ]
    },
    {
        "id": "2a03fd0d13e62d2a",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 4",
        "func": "return {\n    relay_position: 4\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 280,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "1411fd958d971939",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 340,
        "wires": [
            [
                "59b24134294bfac0"
            ]
        ]
    },
    {
        "id": "59b24134294bfac0",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 5",
        "func": "return {\n    relay_position: 5\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "cf282f06380978f6",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 400,
        "wires": [
            [
                "292e4ff1d9d68e2c"
            ]
        ]
    },
    {
        "id": "292e4ff1d9d68e2c",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 6",
        "func": "return {\n    relay_position: 6\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 400,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "708083cc14d12329",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 460,
        "wires": [
            [
                "9838e74d18b5d5bc"
            ]
        ]
    },
    {
        "id": "9838e74d18b5d5bc",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 7",
        "func": "return {\n    relay_position: 7\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 460,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "b6ff1858607e4cf5",
        "type": "inject",
        "z": "2f6480327ea906c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 520,
        "wires": [
            [
                "408db813edd47217"
            ]
        ]
    },
    {
        "id": "408db813edd47217",
        "type": "function",
        "z": "2f6480327ea906c3",
        "name": "Relay 8",
        "func": "return {\n    relay_position: 8\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 520,
        "wires": [
            [
                "1bccc0445d55310b"
            ]
        ]
    },
    {
        "id": "07902ae4b7523777",
        "type": "inject",
        "z": "43f1ddd45d338663",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 280,
        "wires": [
            [
                "23e3d5833d4f01d4"
            ]
        ]
    },
    {
        "id": "23e3d5833d4f01d4",
        "type": "function",
        "z": "43f1ddd45d338663",
        "name": "Set device ID",
        "func": "return {\n    payload: {\n        device_id: 'a4:c1:38:0b:79:22'\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 280,
        "wires": [
            [
                "1e2754fe85a66c65"
            ]
        ]
    },
    {
        "id": "1e2754fe85a66c65",
        "type": "subflow:44f3ed9f999bd3a8",
        "z": "43f1ddd45d338663",
        "name": "",
        "x": 540,
        "y": 280,
        "wires": [
            [
                "7d1a1fc692ff5258"
            ]
        ]
    },
    {
        "id": "7d1a1fc692ff5258",
        "type": "debug",
        "z": "43f1ddd45d338663",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 280,
        "wires": []
    },
    {
        "id": "7ee90873b0cc3487",
        "type": "inject",
        "z": "d06ae3eee692de3d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "684314d35968f05c"
            ]
        ]
    },
    {
        "id": "6b9d29fa591ebd37",
        "type": "file",
        "z": "d06ae3eee692de3d",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 560,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "ca51f19ab2691b69",
        "type": "function",
        "z": "d06ae3eee692de3d",
        "name": "function 1",
        "func": "const path = `/lib/udev/rules.d/999-vanpi-usb-devices.rules`;\n\nreturn {\n    ...msg,\n    path\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "684314d35968f05c",
        "type": "subflow:b3276c87a286f102",
        "z": "d06ae3eee692de3d",
        "name": "",
        "x": 300,
        "y": 100,
        "wires": [
            [
                "ea8d16ecb29a73ce"
            ]
        ]
    },
    {
        "id": "ea8d16ecb29a73ce",
        "type": "debug",
        "z": "d06ae3eee692de3d",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 100,
        "wires": []
    },
    {
        "id": "5d3285a4a6cc03f7",
        "type": "debug",
        "z": "d06ae3eee692de3d",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 460,
        "wires": []
    },
    {
        "id": "e4e215cf824a2a68",
        "type": "inject",
        "z": "d06ae3eee692de3d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 460,
        "wires": [
            [
                "9b98797cd45b84ac"
            ]
        ]
    },
    {
        "id": "ea8716830cd7eec0",
        "type": "subflow:2f860c0929d372d8",
        "z": "d06ae3eee692de3d",
        "name": "",
        "x": 560,
        "y": 460,
        "wires": [
            [
                "5d3285a4a6cc03f7"
            ]
        ]
    },
    {
        "id": "9b98797cd45b84ac",
        "type": "function",
        "z": "d06ae3eee692de3d",
        "name": "function 2",
        "func": "const payload = {\n    sql_query: 'select * from relays'\n}\n\nreturn {\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 460,
        "wires": [
            [
                "ea8716830cd7eec0"
            ]
        ]
    },
    {
        "id": "811698183eefda21",
        "type": "subflow:924d506d524e2f1f",
        "z": "254fbe7becd93c6d",
        "name": "",
        "x": 130,
        "y": 60,
        "wires": []
    },
    {
        "id": "1e73c37b977c04c8",
        "type": "inject",
        "z": "254fbe7becd93c6d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "6a470f531cdcf5bb"
            ]
        ]
    },
    {
        "id": "43a66530f131fe31",
        "type": "debug",
        "z": "254fbe7becd93c6d",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "6a470f531cdcf5bb",
        "type": "subflow:cd03e8b953118d1f",
        "z": "254fbe7becd93c6d",
        "name": "",
        "x": 300,
        "y": 140,
        "wires": [
            [
                "43a66530f131fe31"
            ]
        ]
    },
    {
        "id": "fa44778ce07e4609",
        "type": "inject",
        "z": "0176619f63694862",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "081541771c01eea7"
            ]
        ]
    },
    {
        "id": "081541771c01eea7",
        "type": "subflow:c30c47ad0a20b80b",
        "z": "0176619f63694862",
        "name": "",
        "x": 410,
        "y": 120,
        "wires": [
            [
                "e8ec4d805872edc5"
            ]
        ]
    },
    {
        "id": "e8ec4d805872edc5",
        "type": "debug",
        "z": "0176619f63694862",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 120,
        "wires": []
    },
    {
        "id": "f7a70eb3ee7a6e7c",
        "type": "subflow:48376301d7cf8ab5",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "5454baccb3adcf75"
            ]
        ]
    },
    {
        "id": "0a1d29608ba1f9c3",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/relays/state`",
        "url": "api/v1/relays/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "f7a70eb3ee7a6e7c"
            ]
        ]
    },
    {
        "id": "5454baccb3adcf75",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 600,
        "y": 100,
        "wires": []
    },
    {
        "id": "09fb0f13ef4f8d1f",
        "type": "subflow:c30c47ad0a20b80b",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 470,
        "y": 400,
        "wires": [
            [
                "fd2c6e14df5619c5"
            ]
        ]
    },
    {
        "id": "a55ba29cae6b62f5",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/temperature_values`",
        "url": "api/v1/temperature_values",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 400,
        "wires": [
            [
                "09fb0f13ef4f8d1f"
            ]
        ]
    },
    {
        "id": "fd2c6e14df5619c5",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 680,
        "y": 400,
        "wires": []
    },
    {
        "id": "f6fe2ecb7716291c",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "GET `api/v1/gps_values`",
        "url": "api/v1/gps_values",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "6ccf70ed017a483e"
            ]
        ]
    },
    {
        "id": "6ccf70ed017a483e",
        "type": "subflow:cd03e8b953118d1f",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 400,
        "y": 500,
        "wires": [
            [
                "db72e358f763ea55"
            ]
        ]
    },
    {
        "id": "db72e358f763ea55",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 580,
        "y": 500,
        "wires": []
    },
    {
        "id": "0f0bba26d386cac0",
        "type": "http in",
        "z": "181d977a8b81274c",
        "name": "POST `api/v1/relays/state`",
        "url": "api/v1/relays/state",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "1fdbc5f6e83fb59b"
            ]
        ]
    },
    {
        "id": "41da5c626064985a",
        "type": "http response",
        "z": "181d977a8b81274c",
        "name": "Response",
        "statusCode": "",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 740,
        "y": 240,
        "wires": []
    },
    {
        "id": "03af40a681e75b74",
        "type": "subflow:3ee3b10c02a9dae4",
        "z": "181d977a8b81274c",
        "name": "",
        "x": 570,
        "y": 240,
        "wires": [
            [
                "41da5c626064985a"
            ]
        ]
    },
    {
        "id": "1fdbc5f6e83fb59b",
        "type": "function",
        "z": "181d977a8b81274c",
        "name": "Parse request",
        "func": "const payload = msg.req.body;\n\nreturn {\n    ...msg,\n    payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 240,
        "wires": [
            [
                "03af40a681e75b74"
            ]
        ]
    },
    {
        "id": "0de3a3f38db23062",
        "type": "mqtt in",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "stat/tasmota_test",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fff9b047550b9220",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 180,
        "wires": [
            [
                "c9aeddf2423f02c2"
            ]
        ]
    },
    {
        "id": "955d1b66f57352d9",
        "type": "mqtt out",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "stat/tasmota_test",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 550,
        "y": 320,
        "wires": []
    },
    {
        "id": "8bb39527bc092b84",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 3",
        "func": "return {payload: 'world'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 320,
        "wires": [
            [
                "955d1b66f57352d9"
            ]
        ]
    },
    {
        "id": "c9aeddf2423f02c2",
        "type": "debug",
        "z": "d1fe66a0a15b470a",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 180,
        "wires": []
    },
    {
        "id": "43a1aebb7cadca3b",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "8bb39527bc092b84"
            ]
        ]
    },
    {
        "id": "31482b014b714389",
        "type": "mqtt out",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "cmnd/tasmota_test/POWER1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 690,
        "y": 460,
        "wires": []
    },
    {
        "id": "0dca77c32be0089b",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 4",
        "func": "return {payload: 'ON'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 460,
        "wires": [
            [
                "31482b014b714389"
            ]
        ]
    },
    {
        "id": "b8d8ea038f410cfb",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 460,
        "wires": [
            [
                "0dca77c32be0089b"
            ]
        ]
    },
    {
        "id": "0747aeccd0cf3158",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 5",
        "func": "return {payload: 'OFF'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 520,
        "wires": [
            [
                "31482b014b714389"
            ]
        ]
    },
    {
        "id": "7f8ea82823d00189",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 520,
        "wires": [
            [
                "0747aeccd0cf3158"
            ]
        ]
    },
    {
        "id": "326dafec0bb6c97d",
        "type": "mqtt out",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "topic": "cmnd/tasmota_test/POWER2",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fff9b047550b9220",
        "x": 690,
        "y": 620,
        "wires": []
    },
    {
        "id": "24da06e016f85680",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 6",
        "func": "return {payload: 'ON'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 620,
        "wires": [
            [
                "326dafec0bb6c97d"
            ]
        ]
    },
    {
        "id": "1d7c14eff6295053",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 620,
        "wires": [
            [
                "24da06e016f85680"
            ]
        ]
    },
    {
        "id": "e5b8b11f3dc32b95",
        "type": "function",
        "z": "d1fe66a0a15b470a",
        "name": "function 7",
        "func": "return {payload: 'OFF'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 680,
        "wires": [
            [
                "326dafec0bb6c97d"
            ]
        ]
    },
    {
        "id": "672a9251c4214c70",
        "type": "inject",
        "z": "d1fe66a0a15b470a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 680,
        "wires": [
            [
                "e5b8b11f3dc32b95"
            ]
        ]
    }
]